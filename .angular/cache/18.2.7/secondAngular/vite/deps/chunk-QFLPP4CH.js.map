{
  "version": 3,
  "sources": ["../../../../../../node_modules/@taiga-ui/cdk/fesm2022/taiga-ui-cdk-directives-let.mjs", "../../../../../../node_modules/@taiga-ui/cdk/fesm2022/taiga-ui-cdk-directives-popover.mjs", "../../../../../../node_modules/@taiga-ui/cdk/fesm2022/taiga-ui-cdk-directives-repeat-times.mjs", "../../../../../../node_modules/@taiga-ui/cdk/fesm2022/taiga-ui-cdk-pipes-mapper.mjs", "../../../../../../node_modules/@angular/cdk/fesm2022/coercion.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { inject, ViewContainerRef, TemplateRef, Directive, Input } from '@angular/core';\n\n/**\n * @internal\n */\nclass TuiLetContext {\n  constructor(internalDirectiveInstance) {\n    this.internalDirectiveInstance = internalDirectiveInstance;\n  }\n  get $implicit() {\n    return this.internalDirectiveInstance.tuiLet;\n  }\n  get tuiLet() {\n    return this.internalDirectiveInstance.tuiLet;\n  }\n}\n\n/**\n * Works like *ngIf but does not have a condition — use it to declare\n * the result of pipes calculation (i.e. async pipe)\n */\nclass TuiLet {\n  constructor() {\n    inject(ViewContainerRef).createEmbeddedView(inject(TemplateRef), new TuiLetContext(this));\n  }\n  /**\n   * Asserts the correct type of the context for the template that `TuiLet` will render.\n   *\n   * The presence of this method is a signal to the Ivy template type-check compiler that the\n   * `TuiLet` structural directive renders its template with a specific context type.\n   */\n  static ngTemplateContextGuard(_dir, _ctx) {\n    return true;\n  }\n  static {\n    this.ɵfac = function TuiLet_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || TuiLet)();\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: TuiLet,\n      selectors: [[\"\", \"tuiLet\", \"\"]],\n      inputs: {\n        tuiLet: \"tuiLet\"\n      },\n      standalone: true\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TuiLet, [{\n    type: Directive,\n    args: [{\n      standalone: true,\n      selector: '[tuiLet]'\n    }]\n  }], function () {\n    return [];\n  }, {\n    tuiLet: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TuiLet, TuiLetContext };\n", "import * as i0 from '@angular/core';\nimport { inject, Directive } from '@angular/core';\nimport { tuiIfMap } from '@taiga-ui/cdk/observables';\nimport { TuiPopoverService } from '@taiga-ui/cdk/services';\nimport { PolymorpheusTemplate } from '@taiga-ui/polymorpheus';\nimport { Subject, distinctUntilChanged, ignoreElements, endWith, share } from 'rxjs';\nclass TuiPopoverDirective extends PolymorpheusTemplate {\n  constructor() {\n    super(...arguments);\n    this.service = inject(TuiPopoverService);\n    this.open$ = new Subject();\n    this.options = {};\n    this.open = false;\n    this.openChange = this.open$.pipe(distinctUntilChanged(), tuiIfMap(() => this.service.open(this, this.options).pipe(ignoreElements(), endWith(false))), share());\n  }\n  ngOnChanges() {\n    this.open$.next(this.open);\n  }\n  static {\n    this.ɵfac = /* @__PURE__ */(() => {\n      let ɵTuiPopoverDirective_BaseFactory;\n      return function TuiPopoverDirective_Factory(__ngFactoryType__) {\n        return (ɵTuiPopoverDirective_BaseFactory || (ɵTuiPopoverDirective_BaseFactory = i0.ɵɵgetInheritedFactory(TuiPopoverDirective)))(__ngFactoryType__ || TuiPopoverDirective);\n      };\n    })();\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: TuiPopoverDirective,\n      features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TuiPopoverDirective, [{\n    type: Directive\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TuiPopoverDirective };\n", "import * as i0 from '@angular/core';\nimport { inject, ViewContainerRef, TemplateRef, Directive, Input } from '@angular/core';\nimport { tuiClamp } from '@taiga-ui/cdk/utils/math';\nconst MAX_VALUE = 0x10000;\nclass TuiRepeatTimesContext {\n  constructor($implicit) {\n    this.$implicit = $implicit;\n  }\n}\n/**\n * Directive similar to ngFor but using a number of repetitions rather than an array\n *\n * {@link TuiRepeatTimes.tuiRepeatTimesOf requested number of times}.\n * {@link TuiRepeatTimesContext context} for every instance of the template inherits outer context and stores\n * {@link TuiRepeatTimesContext.$implicit index} of a template instance.\n */\nclass TuiRepeatTimes {\n  constructor() {\n    this.viewContainer = inject(ViewContainerRef);\n    this.templateRef = inject(TemplateRef);\n  }\n  set tuiRepeatTimesOf(count) {\n    const safeCount = Math.floor(tuiClamp(count, 0, MAX_VALUE));\n    const {\n      length\n    } = this.viewContainer;\n    if (count < length) {\n      this.removeContainers(length - count);\n    } else {\n      this.addContainers(safeCount);\n    }\n  }\n  addContainers(count) {\n    for (let index = this.viewContainer.length; index < count; index++) {\n      this.viewContainer.createEmbeddedView(this.templateRef, new TuiRepeatTimesContext(index));\n    }\n  }\n  removeContainers(amount) {\n    for (let index = 0; index < amount; index++) {\n      this.viewContainer.remove();\n    }\n  }\n  static {\n    this.ɵfac = function TuiRepeatTimes_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || TuiRepeatTimes)();\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: TuiRepeatTimes,\n      selectors: [[\"\", \"tuiRepeatTimes\", \"\", \"tuiRepeatTimesOf\", \"\"]],\n      inputs: {\n        tuiRepeatTimesOf: \"tuiRepeatTimesOf\"\n      },\n      standalone: true\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TuiRepeatTimes, [{\n    type: Directive,\n    args: [{\n      standalone: true,\n      selector: '[tuiRepeatTimes][tuiRepeatTimesOf]'\n    }]\n  }], null, {\n    tuiRepeatTimesOf: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TuiRepeatTimes, TuiRepeatTimesContext };\n", "import * as i0 from '@angular/core';\nimport { Pipe } from '@angular/core';\nclass TuiMapperPipe {\n  /**\n   * Maps object to an arbitrary result through a mapper function\n   *\n   * @param value an item to transform\n   * @param mapper a mapping function\n   * @param args arbitrary number of additional arguments\n   */\n  transform(value, mapper, ...args) {\n    return mapper(value, ...args);\n  }\n  static {\n    this.ɵfac = function TuiMapperPipe_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || TuiMapperPipe)();\n    };\n  }\n  static {\n    this.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n      name: \"tuiMapper\",\n      type: TuiMapperPipe,\n      pure: true,\n      standalone: true\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TuiMapperPipe, [{\n    type: Pipe,\n    args: [{\n      standalone: true,\n      name: 'tuiMapper'\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TuiMapperPipe };\n", "import { ElementRef } from '@angular/core';\n\n/** Coerces a data-bound value (typically a string) to a boolean. */\nfunction coerceBooleanProperty(value) {\n  return value != null && `${value}` !== 'false';\n}\nfunction coerceNumberProperty(value, fallbackValue = 0) {\n  if (_isNumberValue(value)) {\n    return Number(value);\n  }\n  return arguments.length === 2 ? fallbackValue : 0;\n}\n/**\n * Whether the provided value is considered a number.\n * @docs-private\n */\nfunction _isNumberValue(value) {\n  // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,\n  // and other non-number values as NaN, where Number just uses 0) but it considers the string\n  // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.\n  return !isNaN(parseFloat(value)) && !isNaN(Number(value));\n}\nfunction coerceArray(value) {\n  return Array.isArray(value) ? value : [value];\n}\n\n/** Coerces a value to a CSS pixel value. */\nfunction coerceCssPixelValue(value) {\n  if (value == null) {\n    return '';\n  }\n  return typeof value === 'string' ? value : `${value}px`;\n}\n\n/**\n * Coerces an ElementRef or an Element into an element.\n * Useful for APIs that can accept either a ref or the native element itself.\n */\nfunction coerceElement(elementOrRef) {\n  return elementOrRef instanceof ElementRef ? elementOrRef.nativeElement : elementOrRef;\n}\n\n/**\n * Coerces a value to an array of trimmed non-empty strings.\n * Any input that is not an array, `null` or `undefined` will be turned into a string\n * via `toString()` and subsequently split with the given separator.\n * `null` and `undefined` will result in an empty array.\n * This results in the following outcomes:\n * - `null` -&gt; `[]`\n * - `[null]` -&gt; `[\"null\"]`\n * - `[\"a\", \"b \", \" \"]` -&gt; `[\"a\", \"b\"]`\n * - `[1, [2, 3]]` -&gt; `[\"1\", \"2,3\"]`\n * - `[{ a: 0 }]` -&gt; `[\"[object Object]\"]`\n * - `{ a: 0 }` -&gt; `[\"[object\", \"Object]\"]`\n *\n * Useful for defining CSS classes or table columns.\n * @param value the value to coerce into an array of strings\n * @param separator split-separator if value isn't an array\n */\nfunction coerceStringArray(value, separator = /\\s+/) {\n  const result = [];\n  if (value != null) {\n    const sourceValues = Array.isArray(value) ? value : `${value}`.split(separator);\n    for (const sourceValue of sourceValues) {\n      const trimmedString = `${sourceValue}`.trim();\n      if (trimmedString) {\n        result.push(trimmedString);\n      }\n    }\n  }\n  return result;\n}\nexport { _isNumberValue, coerceArray, coerceBooleanProperty, coerceCssPixelValue, coerceElement, coerceNumberProperty, coerceStringArray };\n"],
  "mappings": "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",
  "names": []
}
