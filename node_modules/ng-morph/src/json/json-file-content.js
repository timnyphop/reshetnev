"use strict";
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.JSONFileContent = void 0;
const jsonc_parser_1 = require("jsonc-parser");
class JSONFileContent {
    constructor(content) {
        this.content = content;
    }
    get(jsonPath) {
        const ast = this.jsonAst();
        const node = ast ? (0, jsonc_parser_1.findNodeAtLocation)(ast, jsonPath) : null;
        if (!node || !ast) {
            return undefined;
        }
        return (0, jsonc_parser_1.getNodeValue)(node);
    }
    getContent() {
        return this.content;
    }
    modify(jsonPath, value, insertInOrder) {
        let getInsertionIndex;
        if (insertInOrder === undefined) {
            const property = jsonPath.slice(-1)[0];
            getInsertionIndex = (properties) => [...properties, property]
                .sort((a, b) => { var _a, _b; return (_b = a === null || a === void 0 ? void 0 : a.toString().localeCompare((_a = b === null || b === void 0 ? void 0 : b.toString()) !== null && _a !== void 0 ? _a : '')) !== null && _b !== void 0 ? _b : -1; })
                .findIndex((p) => p === property);
        }
        else if (insertInOrder !== false) {
            getInsertionIndex = insertInOrder;
        }
        const edits = (0, jsonc_parser_1.modify)(this.content, jsonPath, value, {
            getInsertionIndex,
            formattingOptions: {
                insertSpaces: true,
                tabSize: 2,
            },
        });
        this.content = (0, jsonc_parser_1.applyEdits)(this.content, edits);
        this.jsonAstNode = undefined;
    }
    remove(jsonPath) {
        if (this.get(jsonPath) !== undefined) {
            this.modify(jsonPath, undefined);
        }
    }
    jsonAst() {
        if (this.jsonAstNode) {
            return this.jsonAstNode;
        }
        const errors = [];
        this.jsonAstNode = (0, jsonc_parser_1.parseTree)(this.content, errors);
        if (errors.length) {
            const { error, offset } = errors[0];
            throw new Error(`Failed to parse as JSON AST Object. ${(0, jsonc_parser_1.printParseErrorCode)(error)} at location: ${offset}.`);
        }
        return this.jsonAstNode;
    }
}
exports.JSONFileContent = JSONFileContent;
//# sourceMappingURL=json-file-content.js.map