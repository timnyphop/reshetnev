"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPackageJsonDependency = exports.removePackageJsonDependency = exports.addPackageJsonDependency = exports.NodeDependencyType = void 0;
const tslib_1 = require("tslib");
const semver = tslib_1.__importStar(require("semver"));
const consts_1 = require("./consts");
const json_file_1 = require("./json-file");
// eslint-disable-next-line no-restricted-syntax
var NodeDependencyType;
(function (NodeDependencyType) {
    NodeDependencyType["Default"] = "dependencies";
    NodeDependencyType["Dev"] = "devDependencies";
    NodeDependencyType["Peer"] = "peerDependencies";
    NodeDependencyType["Optional"] = "optionalDependencies";
})(NodeDependencyType = exports.NodeDependencyType || (exports.NodeDependencyType = {}));
const ALL_DEPENDENCY_TYPE = [
    NodeDependencyType.Default,
    NodeDependencyType.Dev,
    NodeDependencyType.Optional,
    NodeDependencyType.Peer,
];
function versionSanitize(version) {
    return version.replaceAll(/([\^~])/g, '');
}
function addPackageJsonDependency(tree, dependency, pkgJsonPath = consts_1.PACKAGE_PATH) {
    var _a;
    const { version: oldVersion } = (_a = getPackageJsonDependency(tree, dependency.name, pkgJsonPath)) !== null && _a !== void 0 ? _a : { version: '0.0.0' };
    const { overwrite, type = NodeDependencyType.Default, name, version } = dependency;
    if (!overwrite && semver.gt(versionSanitize(oldVersion), versionSanitize(version))) {
        return;
    }
    const json = new json_file_1.JSONFile(tree, pkgJsonPath);
    const path = [type, name];
    json.modify(path, version);
}
exports.addPackageJsonDependency = addPackageJsonDependency;
function removePackageJsonDependency(tree, name, pkgJsonPath = consts_1.PACKAGE_PATH) {
    const json = new json_file_1.JSONFile(tree, pkgJsonPath);
    ALL_DEPENDENCY_TYPE.forEach((depType) => json.remove([depType, name]));
}
exports.removePackageJsonDependency = removePackageJsonDependency;
function getPackageJsonDependency(tree, name, pkgJsonPath = consts_1.PACKAGE_PATH) {
    const json = new json_file_1.JSONFile(tree, pkgJsonPath);
    for (const depType of ALL_DEPENDENCY_TYPE) {
        const version = json.get([depType, name]);
        if (typeof version === 'string') {
            return {
                type: depType,
                name,
                version,
            };
        }
    }
    return null;
}
exports.getPackageJsonDependency = getPackageJsonDependency;
//# sourceMappingURL=dependencies.js.map