"use strict";
/* eslint-disable @typescript-eslint/require-await */
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NgCliFileSystem = exports.FileSystem = void 0;
const tslib_1 = require("tslib");
const node_path_1 = require("node:path");
const multimatch_1 = tslib_1.__importDefault(require("multimatch"));
/**
 * Abstraction of the file system that migrations can use to record and apply
 * changes. This is necessary to support virtual file systems as used in the CLI devkit.
 */
class FileSystem {
}
exports.FileSystem = FileSystem;
class NgCliFileSystem {
    constructor(fs) {
        this.fs = fs;
    }
    async copy(srcPath, destPath) {
        this.copySync(srcPath, destPath);
    }
    copySync(srcPath, destPath) {
        if (this.fileExistsSync(srcPath)) {
            this.writeFileSync(destPath, this.readFileSync(srcPath));
        }
        else if (this.directoryExistsSync(srcPath)) {
            const paths = this.readDirSync(srcPath);
            paths.forEach((path) => this.copySync(path.name, (0, node_path_1.join)(destPath, (0, node_path_1.basename)(path.name))));
        }
    }
    async delete(path) {
        this.deleteSync(path);
    }
    deleteSync(path) {
        this.fs.delete(path);
    }
    async directoryExists(dirPath) {
        return this.directoryExistsSync(dirPath);
    }
    directoryExistsSync(dirPath) {
        return this.fs.exists(dirPath) && !this.fileExistsSync(dirPath);
    }
    async fileExists(filePath) {
        return this.fileExistsSync(filePath);
    }
    fileExistsSync(filePath) {
        try {
            return this.fs.read(filePath) !== null;
        }
        catch (_a) {
            return false;
        }
    }
    getCurrentDirectory() {
        return '/';
    }
    async glob(patterns) {
        return this.globSync(patterns);
    }
    globSync(patterns) {
        return (0, multimatch_1.default)(this.getAllFilePaths(), patterns);
    }
    isCaseSensitive() {
        return true;
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    async mkdir(_dirPath) {
        return Promise.resolve(undefined);
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    mkdirSync(_dirPath) {
        // empty
    }
    async move(srcPath, destPath) {
        this.moveSync(srcPath, destPath);
    }
    moveSync(srcPath, destPath) {
        this.copySync(srcPath, destPath);
        this.deleteSync(srcPath);
    }
    readDirSync(dirPath) {
        const { directories, files } = this.fs.readDirectory(dirPath);
        return directories
            .map((name) => ({
            name,
            isFile: false,
            isDirectory: true,
            isSymlink: false,
        }))
            .concat(files.map((name) => ({
            name,
            isFile: true,
            isDirectory: false,
            isSymlink: false,
        })));
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    async readFile(filePath, _encoding) {
        return this.readFileSync(filePath);
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    readFileSync(filePath, _encoding) {
        var _a;
        return (_a = this.fs.read(filePath)) !== null && _a !== void 0 ? _a : '';
    }
    realpathSync(path) {
        return path;
    }
    async writeFile(filePath, fileText) {
        this.writeFileSync(filePath, fileText);
    }
    writeFileSync(filePath, fileText) {
        if (this.fileExistsSync(filePath)) {
            this.fs.overwrite(filePath, fileText);
        }
        else {
            this.fs.create(filePath, fileText);
        }
    }
    getAllFilePaths(path = '/', foundedFiles = []) {
        const { directories, files } = this.fs.readDirectory(path);
        foundedFiles.push(...files.map((file) => (0, node_path_1.join)(path, file)));
        directories
            .filter((dir) => !dir.startsWith('.') && dir !== 'node_modules')
            .forEach((dir) => this.getAllFilePaths((0, node_path_1.join)(path, dir), foundedFiles));
        return foundedFiles;
    }
}
exports.NgCliFileSystem = NgCliFileSystem;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS1zeXN0ZW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL25nLW1vcnBoL3NyYy9wcm9qZWN0L2ZpbGUtc3lzdGVtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxxREFBcUQ7QUFDckQ7Ozs7OztHQU1HOzs7O0FBRUgseUNBQXlDO0FBRXpDLG9FQUFvQztBQW9DcEM7OztHQUdHO0FBQ0gsTUFBc0IsVUFBVTtDQXVDL0I7QUF2Q0QsZ0NBdUNDO0FBRUQsTUFBYSxlQUFlO0lBQ3hCLFlBQW1CLEVBQW9CO1FBQXBCLE9BQUUsR0FBRixFQUFFLENBQWtCO0lBQUcsQ0FBQztJQUVwQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQWUsRUFBRSxRQUFnQjtRQUMvQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRU0sUUFBUSxDQUFDLE9BQWUsRUFBRSxRQUFnQjtRQUM3QyxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDOUIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1NBQzVEO2FBQU0sSUFBSSxJQUFJLENBQUMsbUJBQW1CLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDMUMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUV4QyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FDbkIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUEsZ0JBQUksRUFBQyxRQUFRLEVBQUUsSUFBQSxvQkFBUSxFQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQ2hFLENBQUM7U0FDTDtJQUNMLENBQUM7SUFFTSxLQUFLLENBQUMsTUFBTSxD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