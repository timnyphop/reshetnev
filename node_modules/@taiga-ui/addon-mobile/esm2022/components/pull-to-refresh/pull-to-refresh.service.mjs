import { inject, Injectable } from '@angular/core';
import { tuiScrollFrom, tuiTypedFromEvent } from '@taiga-ui/cdk/observables';
import { tuiInjectElement } from '@taiga-ui/cdk/utils/dom';
import { TUI_SCROLL_REF } from '@taiga-ui/core/tokens';
import { distinctUntilChanged, EMPTY, endWith, filter, map, Observable, scan, share, startWith, switchMap, takeUntil, takeWhile, tap, } from 'rxjs';
import { TUI_PULL_TO_REFRESH_COMPONENT, TUI_PULL_TO_REFRESH_LOADED, TUI_PULL_TO_REFRESH_THRESHOLD, } from './pull-to-refresh.providers';
import * as i0 from "@angular/core";
export const MICRO_OFFSET = 10 ** -6;
const EXCLUSION_SELECTORS = 'tui-dialog, tui-dropdown, tui-dropdown-mobile';
class TuiPullToRefreshService extends Observable {
    constructor() {
        const component = inject(TUI_PULL_TO_REFRESH_COMPONENT);
        super((subscriber) => (component ? this.pulling$ : EMPTY).subscribe(subscriber));
        this.el = tuiInjectElement();
        this.scrollRef = inject(TUI_SCROLL_REF);
        this.loaded$ = inject(TUI_PULL_TO_REFRESH_LOADED);
        this.threshold = inject(TUI_PULL_TO_REFRESH_THRESHOLD);
        // Hack for iOS to determine if pulling stopped due to scroll
        // because Safari does not support `touch-action: pan-down`
        this.touched = false;
        this.pulling$ = this.loaded$.pipe(startWith(null), switchMap(() => tuiTypedFromEvent(this.el, 'touchstart', { passive: true }).pipe(filter(() => !this.scrollRef.nativeElement.scrollTop &&
            !this.el.querySelector(EXCLUSION_SELECTORS)), map(({ touches }) => touches[0]?.clientY ?? 0), switchMap((start) => tuiTypedFromEvent(this.el, 'touchmove').pipe(tap(() => {
            this.touched = true;
        }), map(({ touches }) => (touches[0]?.clientY ?? 0) - start), filter((distance) => distance > 0), takeUntil(tuiTypedFromEvent(this.el, 'touchend').pipe(tap(() => {
            this.touched = false;
        }))), takeUntil(tuiScrollFrom(this.scrollRef.nativeElement)), endWith(0))), scan((prev, current) => !current && !this.touched && prev > this.threshold
            ? this.threshold
            : current + current * MICRO_OFFSET, 0), takeWhile((distance) => distance !== this.threshold, true), startWith(0))), distinctUntilChanged(), share());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiPullToRefreshService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiPullToRefreshService }); }
}
export { TuiPullToRefreshService };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiPullToRefreshService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVsbC10by1yZWZyZXNoLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hZGRvbi1tb2JpbGUvY29tcG9uZW50cy9wdWxsLXRvLXJlZnJlc2gvcHVsbC10by1yZWZyZXNoLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDakQsT0FBTyxFQUFDLGFBQWEsRUFBRSxpQkFBaUIsRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBQzNFLE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQ3pELE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUNyRCxPQUFPLEVBQ0gsb0JBQW9CLEVBQ3BCLEtBQUssRUFDTCxPQUFPLEVBQ1AsTUFBTSxFQUNOLEdBQUcsRUFDSCxVQUFVLEVBQ1YsSUFBSSxFQUNKLEtBQUssRUFDTCxTQUFTLEVBQ1QsU0FBUyxFQUNULFNBQVMsRUFDVCxTQUFTLEVBQ1QsR0FBRyxHQUNOLE1BQU0sTUFBTSxDQUFDO0FBRWQsT0FBTyxFQUNILDZCQUE2QixFQUM3QiwwQkFBMEIsRUFDMUIsNkJBQTZCLEdBQ2hDLE1BQU0sNkJBQTZCLENBQUM7O0FBRXJDLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDckMsTUFBTSxtQkFBbUIsR0FBRywrQ0FBK0MsQ0FBQztBQUU1RSxNQUNhLHVCQUF3QixTQUFRLFVBQWtCO0lBcUQzRDtRQUNJLE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO1FBRXhELEtBQUssQ0FBQyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBdkRwRSxPQUFFLEdBQUcsZ0JBQWdCLEVBQUUsQ0FBQztRQUN4QixjQUFTLEdBQTRCLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUM1RCxZQUFPLEdBQUcsTUFBTSxDQUFDLDBCQUEwQixDQUFDLENBQUM7UUFDN0MsY0FBUyxHQUFHLE1BQU0sQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO1FBRW5FLDZEQUE2RDtRQUM3RCwyREFBMkQ7UUFDbkQsWUFBTyxHQUFHLEtBQUssQ0FBQztRQUVQLGFBQVEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FDekMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUNmLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FDWCxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLFlBQVksRUFBRSxFQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FDMUQsTUFBTSxDQUNGLEdBQUcsRUFBRSxDQUNELENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsU0FBUztZQUN2QyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLG1CQUFtQixDQUFDLENBQ2xELEVBQ0QsR0FBRyxDQUFDLENBQUMsRUFBQyxPQUFPLEVBQUMsRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sSUFBSSxDQUFDLENBQUMsRUFDNUMsU0FBUyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FDaEIsaUJBQWlCLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQ3hDLEdBQUcsQ0FBQyxHQUFTLEVBQUU7WUFDWCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztRQUN4QixDQUFDLENBQUMsRUFDRixHQUFHLENBQUMsQ0FBQyxFQUFDLE9BQU8sRUFBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxPQUFPLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLEVBQ3RELE1BQU0sQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxFQUNsQyxTQUFTLENBQ0wsaUJBQWlCLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQ3ZDLEdBQUcsQ0FBQyxHQUFTLEVBQUU7WUFDWCxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztRQUN6QixDQUFDLENBQUMsQ0FDTCxDQUNKLEVBQ0QsU0FBUyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxDQUFDLEVBQ3RELE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FDYixDQUNKLEVBQ0QsSUFBSSxDQUNBLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxFQUFFLENBQ2QsQ0FBQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUztZQUM5QyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVM7WUFDaEIsQ0FBQyxDQUFDLE9BQU8sR0FBRyxPQUFPLEdBQUcsWUFBWSxFQUMxQyxDQUFDLENBQ0osRUFDRCxTQUFTLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLFFBQVEsS0FBSyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxFQUMxRCxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQ2YsQ0FDSixFQUNELG9CQUFvQixFQUFFLEVBQ3RCLEtBQUssRUFBRSxDQUNWLENBQUM7SUFNRixDQUFDOytHQXpEUSx1QkFBdUI7bUhBQXZCLHVCQUF1Qjs7U0FBdkIsdUJBQXVCOzRGQUF2Qix1QkFBdUI7a0JBRG5DLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7RWxlbWVudFJlZn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge2luamVjdCwgSW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge3R1aVNjcm9sbEZyb20sIHR1aVR5cGVkRnJvbUV2ZW50fSBmcm9tICdAdGFpZ2EtdWkvY2RrL29ic2VydmFibGVzJztcbmltcG9ydCB7dHVpSW5qZWN0RWxlbWVudH0gZnJvbSAnQHRhaWdhLXVpL2Nkay91dGlscy9kb20nO1xuaW1wb3J0IHtUVUlfU0NST0xMX1JFRn0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvdG9rZW5zJztcbmltcG9ydCB7XG4gICAgZGlzdGluY3RVbnRpbENoYW5nZWQsXG4gICAgRU1QVFksXG4gICAgZW5kV2l0aCxcbiAgICBmaWx0ZXIsXG4gICAgbWFwLFxuICAgIE9ic2VydmFibGUsXG4gICAgc2NhbixcbiAgICBzaGFyZSxcbiAgICBzdGFydFdpdGgsXG4gICAgc3dpdGNoTWFwLFxuICAgIHRha2VVbnRpbCxcbiAgICB0YWtlV2hpbGUsXG4gICAgdGFwLFxufSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHtcbiAgICBUVUlfUFVMTF9UT19SRUZSRVNIX0NPTVBPTkVOVCxcbiAgICBUVUlfUFVMTF9UT19SRUZSRVNIX0xPQURFRCxcbiAgICBUVUlfUFVMTF9UT19SRUZSRVNIX1RIUkVTSE9MRCxcbn0gZnJvbSAnLi9wdWxsLXRvLXJlZnJlc2gucHJvdmlkZXJzJztcblxuZXhwb3J0IGNvbnN0IE1JQ1JPX09GRlNFVCA9IDEwICoqIC02O1xuY29uc3QgRVhDTFVTSU9OX1NFTEVDVE9SUyA9ICd0dWktZGlhbG9nLCB0dWktZHJvcGRvd24sIHR1aS1kcm9wZG93bi1tb2JpbGUnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVHVpUHVsbFRvUmVmcmVzaFNlcnZpY2UgZXh0ZW5kcyBPYnNlcnZhYmxlPG51bWJlcj4ge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZWwgPSB0dWlJbmplY3RFbGVtZW50KCk7XG4gICAgcHJpdmF0ZSByZWFkb25seSBzY3JvbGxSZWY6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+ID0gaW5qZWN0KFRVSV9TQ1JPTExfUkVGKTtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGxvYWRlZCQgPSBpbmplY3QoVFVJX1BVTExfVE9fUkVGUkVTSF9MT0FERUQpO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgdGhyZXNob2xkID0gaW5qZWN0KFRVSV9QVUxMX1RPX1JFRlJFU0hfVEhSRVNIT0xEKTtcblxuICAgIC8vIEhhY2sgZm9yIGlPUyB0byBkZXRlcm1pbmUgaWYgcHVsbGluZyBzdG9wcGVkIGR1ZSB0byBzY3JvbGxcbiAgICAvLyBiZWNhdXNlIFNhZmFyaSBkb2VzIG5vdCBzdXBwb3J0IGB0b3VjaC1hY3Rpb246IHBhbi1kb3duYFxuICAgIHByaXZhdGUgdG91Y2hlZCA9IGZhbHNlO1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSBwdWxsaW5nJCA9IHRoaXMubG9hZGVkJC5waXBlKFxuICAgICAgICBzdGFydFdpdGgobnVsbCksXG4gICAgICAgIHN3aXRjaE1hcCgoKSA9PlxuICAgICAgICAgICAgdHVpVHlwZWRGcm9tRXZlbnQodGhpcy5lbCwgJ3RvdWNoc3RhcnQnLCB7cGFzc2l2ZTogdHJ1ZX0pLnBpcGUoXG4gICAgICAgICAgICAgICAgZmlsdGVyKFxuICAgICAgICAgICAgICAgICAgICAoKSA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgIXRoaXMuc2Nyb2xsUmVmLm5hdGl2ZUVsZW1lbnQuc2Nyb2xsVG9wICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAhdGhpcy5lbC5xdWVyeVNlbGVjdG9yKEVYQ0xVU0lPTl9TRUxFQ1RPUlMpLFxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgbWFwKCh7dG91Y2hlc30pID0+IHRvdWNoZXNbMF0/LmNsaWVudFkgPz8gMCksXG4gICAgICAgICAgICAgICAgc3dpdGNoTWFwKChzdGFydCkgPT5cbiAgICAgICAgICAgICAgICAgICAgdHVpVHlwZWRGcm9tRXZlbnQodGhpcy5lbCwgJ3RvdWNobW92ZScpLnBpcGUoXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXAoKCk6IHZvaWQgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudG91Y2hlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcCgoe3RvdWNoZXN9KSA9PiAodG91Y2hlc1swXT8uY2xpZW50WSA/PyAwKSAtIHN0YXJ0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcigoZGlzdGFuY2UpID0+IGRpc3RhbmNlID4gMCksXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWtlVW50aWwoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHVpVHlwZWRGcm9tRXZlbnQodGhpcy5lbCwgJ3RvdWNoZW5kJykucGlwZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFwKCgpOiB2b2lkID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudG91Y2hlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRha2VVbnRpbCh0dWlTY3JvbGxGcm9tKHRoaXMuc2Nyb2xsUmVmLm5hdGl2ZUVsZW1lbnQpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZFdpdGgoMCksXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBzY2FuKFxuICAgICAgICAgICAgICAgICAgICAocHJldiwgY3VycmVudCkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICFjdXJyZW50ICYmICF0aGlzLnRvdWNoZWQgJiYgcHJldiA+IHRoaXMudGhyZXNob2xkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLnRocmVzaG9sZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogY3VycmVudCArIGN1cnJlbnQgKiBNSUNST19PRkZTRVQsXG4gICAgICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICB0YWtlV2hpbGUoKGRpc3RhbmNlKSA9PiBkaXN0YW5jZSAhPT0gdGhpcy50aHJlc2hvbGQsIHRydWUpLFxuICAgICAgICAgICAgICAgIHN0YXJ0V2l0aCgwKSxcbiAgICAgICAgICAgICksXG4gICAgICAgICksXG4gICAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksXG4gICAgICAgIHNoYXJlKCksXG4gICAgKTtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBjb25zdCBjb21wb25lbnQgPSBpbmplY3QoVFVJX1BVTExfVE9fUkVGUkVTSF9DT01QT05FTlQpO1xuXG4gICAgICAgIHN1cGVyKChzdWJzY3JpYmVyKSA9PiAoY29tcG9uZW50ID8gdGhpcy5wdWxsaW5nJCA6IEVNUFRZKS5zdWJzY3JpYmUoc3Vic2NyaWJlcikpO1xuICAgIH1cbn1cbiJdfQ==