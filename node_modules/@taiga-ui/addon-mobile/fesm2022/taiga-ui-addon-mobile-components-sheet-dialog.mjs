import { __decorate } from 'tslib';
import { AsyncPipe, NgForOf, NgIf } from '@angular/common';
import * as i0 from '@angular/core';
import { inject, Component, ChangeDetectionStrategy, ViewChild, ViewChildren, Injectable, Directive } from '@angular/core';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { EMPTY_QUERY } from '@taiga-ui/cdk/constants';
import { TuiClickOutside } from '@taiga-ui/cdk/directives/click-outside';
import { tuiInjectElement } from '@taiga-ui/cdk/utils/dom';
import { tuiPure, tuiCreateToken, tuiProvideOptions } from '@taiga-ui/cdk/utils/miscellaneous';
import { tuiSlideInTop } from '@taiga-ui/core/animations';
import { TuiButton } from '@taiga-ui/core/components/button';
import { TUI_ANIMATIONS_SPEED, TUI_COMMON_ICONS, TUI_CLOSE_WORD } from '@taiga-ui/core/tokens';
import { tuiGetDuration } from '@taiga-ui/core/utils/miscellaneous';
import { shouldCall } from '@taiga-ui/event-plugins';
import { injectContext, PolymorpheusOutlet, PolymorpheusTemplate } from '@taiga-ui/polymorpheus';
import { BehaviorSubject } from 'rxjs';
import { TuiPopoverDirective } from '@taiga-ui/cdk/directives/popover';
import { TuiPopoverService, tuiAsPopover } from '@taiga-ui/cdk/services';
import { TUI_DIALOGS } from '@taiga-ui/core/components/dialog';

// So we re-enter ngZone and trigger change detection
function isCloseable() {
    return this.context.closeable;
}
class TuiSheetDialogComponent {
    constructor() {
        this.stopsRefs = EMPTY_QUERY;
        this.el = tuiInjectElement();
        this.speed = inject(TUI_ANIMATIONS_SPEED);
        this.pointers = 0;
        this.slideInTop = {
            value: '',
            params: {
                start: '100vh',
                duration: tuiGetDuration(this.speed),
            },
        };
        this.stuck$ = new BehaviorSubject(false);
        this.stuck$$ = this.stuck$
            .pipe(takeUntilDestroyed())
            .subscribe((add) => add ? this.el.classList.add('_stuck') : this.el.classList.remove('_stuck'));
        this.icons = inject(TUI_COMMON_ICONS);
        this.closeWord$ = inject(TUI_CLOSE_WORD);
        this.context = injectContext();
    }
    ngAfterViewInit() {
        this.el.scrollTop =
            [...this.getStops(this.stopsRefs), this.sheetTop][this.context.initial] ?? 0;
    }
    get offset() {
        return this.context.offset;
    }
    get closeable() {
        return this.context.closeable;
    }
    get isSmall() {
        return this.sheetTop > (this.sheet?.nativeElement.clientHeight || Infinity);
    }
    close() {
        // TODO: Refactor focus visible on mobile
        this.el.dispatchEvent(new Event('mousedown', { bubbles: true }));
        this.context.$implicit.complete();
    }
    onPointerChange(delta) {
        this.pointers += delta;
        if (!delta) {
            const stuck = this.el.scrollTop > this.sheetTop;
            this.stuck$.value !== stuck && this.stuck$.next(stuck);
        }
        if (this.context.closeable && !this.pointers && !this.el.scrollTop) {
            this.close();
        }
    }
    get sheetTop() {
        return this.sheet?.nativeElement.offsetTop ?? Infinity;
    }
    getStops(stops) {
        return stops.map(({ nativeElement }) => nativeElement.offsetTop + nativeElement.clientHeight);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSheetDialogComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiSheetDialogComponent, isStandalone: true, selector: "tui-sheet-dialog", host: { listeners: { "document:touchstart.passive.silent": "onPointerChange(1)", "document:touchend.silent": "onPointerChange(-1)", "document:touchcancel.silent": "onPointerChange(-1)", "scroll.silent": "onPointerChange(0)" }, properties: { "@tuiSlideInTop": "slideInTop", "style.top.px": "offset", "class._closeable": "closeable" } }, viewQueries: [{ propertyName: "sheet", first: true, predicate: ["sheet"], descendants: true }, { propertyName: "stopsRefs", predicate: ["stops"], descendants: true }], ngImport: i0, template: "<div class=\"t-stops\">\n    <div\n        *ngFor=\"let stop of context.stops\"\n        #stops\n        class=\"t-stop\"\n        [style.margin-top]=\"stop\"\n    ></div>\n</div>\n<div\n    #sheet\n    class=\"t-sheet\"\n    [class.t-sheet_small]=\"isSmall\"\n    (tuiClickOutside)=\"close()\"\n>\n    <div class=\"t-top\"></div>\n    <h2\n        *ngIf=\"context.label\"\n        class=\"t-heading\"\n        [id]=\"context.id\"\n    >\n        <ng-container *polymorpheusOutlet=\"context.label as label\">\n            {{ label }}\n        </ng-container>\n        <button\n            *ngIf=\"context.closeable\"\n            appearance=\"icon\"\n            size=\"xs\"\n            tuiIconButton\n            type=\"button\"\n            class=\"t-close\"\n            [iconStart]=\"icons.close\"\n            (click)=\"close()\"\n        >\n            {{ closeWord$ | async }}\n        </button>\n    </h2>\n    <div\n        *ngIf=\"context.content\"\n        class=\"t-content\"\n    >\n        <ng-container *polymorpheusOutlet=\"context.content as text; context: context\">\n            {{ text }}\n        </ng-container>\n    </div>\n</div>\n<div class=\"t-footer\"></div>\n", styles: [":host{scrollbar-width:none;-ms-overflow-style:none;display:flex;inline-size:100%;block-size:100%;flex-direction:column;clip-path:inset(0 0 0 0 round .75rem .75rem 0 0);font:var(--tui-font-text-m);overflow-y:scroll;scroll-snap-type:y mandatory;overscroll-behavior:none;box-shadow:0 20rem var(--tui-background-elevation-1)}:host::-webkit-scrollbar,:host::-webkit-scrollbar-thumb{display:none}:host._closeable{display:block}:host._closeable .t-stops{display:flex}.t-stops{display:none;block-size:100%;scroll-snap-stop:always;scroll-snap-align:start}.t-stop{scroll-snap-stop:normal;scroll-snap-align:start;block-size:1rem;inline-size:1rem}.t-sheet{box-shadow:var(--tui-shadow-small);border-radius:.75rem .75rem 0 0;padding:0 1rem;margin-top:auto;background:var(--tui-background-elevation-1);box-sizing:border-box;scroll-snap-stop:always;scroll-snap-align:start}@supports (-moz-appearance: none){.t-sheet_small{scroll-snap-align:end}}.t-top{position:sticky;top:0;z-index:1;block-size:1.5rem;background:var(--tui-background-elevation-1)}.t-top:after{content:\"\";position:absolute;top:.5rem;left:50%;inline-size:2rem;block-size:.25rem;transform:translate(-50%);background:var(--tui-background-neutral-2);border-radius:1rem}.t-heading{position:sticky;top:1.5rem;z-index:1;display:flex;margin:0;padding-bottom:1rem;font:var(--tui-font-heading-6);background:var(--tui-background-elevation-1)}.t-heading:last-child{margin-bottom:-.75rem}.t-heading:after{content:\"\";position:absolute;top:100%;left:0;right:0;block-size:1px;background:var(--tui-border-normal);opacity:0}:host._stuck .t-heading:after{opacity:1}.t-close{right:-.25rem;flex-shrink:0;margin-left:auto}.t-content{position:relative;isolation:isolate}.t-content:nth-child(3){margin-top:1rem}.t-footer{block-size:1rem;scroll-snap-stop:always;scroll-snap-align:end;background:var(--tui-background-elevation-1)}\n"], dependencies: [{ kind: "pipe", type: AsyncPipe, name: "async" }, { kind: "directive", type: NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: PolymorpheusOutlet, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { kind: "directive", type: TuiButton, selector: "a[tuiButton],button[tuiButton],a[tuiIconButton],button[tuiIconButton]", inputs: ["size"] }, { kind: "directive", type: TuiClickOutside, selector: "[tuiClickOutside]", outputs: ["tuiClickOutside"] }], animations: [tuiSlideInTop], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
__decorate([
    shouldCall(isCloseable)
], TuiSheetDialogComponent.prototype, "close", null);
__decorate([
    tuiPure
], TuiSheetDialogComponent.prototype, "getStops", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSheetDialogComponent, decorators: [{
            type: Component,
            args: [{ standalone: true, selector: 'tui-sheet-dialog', imports: [
                        AsyncPipe,
                        NgForOf,
                        NgIf,
                        PolymorpheusOutlet,
                        PolymorpheusTemplate,
                        TuiButton,
                        TuiClickOutside,
                    ], changeDetection: ChangeDetectionStrategy.OnPush, animations: [tuiSlideInTop], host: {
                        '[@tuiSlideInTop]': 'slideInTop',
                        '[style.top.px]': 'offset',
                        '[class._closeable]': 'closeable',
                        '(document:touchstart.passive.silent)': 'onPointerChange(1)',
                        '(document:touchend.silent)': 'onPointerChange(-1)',
                        '(document:touchcancel.silent)': 'onPointerChange(-1)',
                        '(scroll.silent)': 'onPointerChange(0)',
                    }, template: "<div class=\"t-stops\">\n    <div\n        *ngFor=\"let stop of context.stops\"\n        #stops\n        class=\"t-stop\"\n        [style.margin-top]=\"stop\"\n    ></div>\n</div>\n<div\n    #sheet\n    class=\"t-sheet\"\n    [class.t-sheet_small]=\"isSmall\"\n    (tuiClickOutside)=\"close()\"\n>\n    <div class=\"t-top\"></div>\n    <h2\n        *ngIf=\"context.label\"\n        class=\"t-heading\"\n        [id]=\"context.id\"\n    >\n        <ng-container *polymorpheusOutlet=\"context.label as label\">\n            {{ label }}\n        </ng-container>\n        <button\n            *ngIf=\"context.closeable\"\n            appearance=\"icon\"\n            size=\"xs\"\n            tuiIconButton\n            type=\"button\"\n            class=\"t-close\"\n            [iconStart]=\"icons.close\"\n            (click)=\"close()\"\n        >\n            {{ closeWord$ | async }}\n        </button>\n    </h2>\n    <div\n        *ngIf=\"context.content\"\n        class=\"t-content\"\n    >\n        <ng-container *polymorpheusOutlet=\"context.content as text; context: context\">\n            {{ text }}\n        </ng-container>\n    </div>\n</div>\n<div class=\"t-footer\"></div>\n", styles: [":host{scrollbar-width:none;-ms-overflow-style:none;display:flex;inline-size:100%;block-size:100%;flex-direction:column;clip-path:inset(0 0 0 0 round .75rem .75rem 0 0);font:var(--tui-font-text-m);overflow-y:scroll;scroll-snap-type:y mandatory;overscroll-behavior:none;box-shadow:0 20rem var(--tui-background-elevation-1)}:host::-webkit-scrollbar,:host::-webkit-scrollbar-thumb{display:none}:host._closeable{display:block}:host._closeable .t-stops{display:flex}.t-stops{display:none;block-size:100%;scroll-snap-stop:always;scroll-snap-align:start}.t-stop{scroll-snap-stop:normal;scroll-snap-align:start;block-size:1rem;inline-size:1rem}.t-sheet{box-shadow:var(--tui-shadow-small);border-radius:.75rem .75rem 0 0;padding:0 1rem;margin-top:auto;background:var(--tui-background-elevation-1);box-sizing:border-box;scroll-snap-stop:always;scroll-snap-align:start}@supports (-moz-appearance: none){.t-sheet_small{scroll-snap-align:end}}.t-top{position:sticky;top:0;z-index:1;block-size:1.5rem;background:var(--tui-background-elevation-1)}.t-top:after{content:\"\";position:absolute;top:.5rem;left:50%;inline-size:2rem;block-size:.25rem;transform:translate(-50%);background:var(--tui-background-neutral-2);border-radius:1rem}.t-heading{position:sticky;top:1.5rem;z-index:1;display:flex;margin:0;padding-bottom:1rem;font:var(--tui-font-heading-6);background:var(--tui-background-elevation-1)}.t-heading:last-child{margin-bottom:-.75rem}.t-heading:after{content:\"\";position:absolute;top:100%;left:0;right:0;block-size:1px;background:var(--tui-border-normal);opacity:0}:host._stuck .t-heading:after{opacity:1}.t-close{right:-.25rem;flex-shrink:0;margin-left:auto}.t-content{position:relative;isolation:isolate}.t-content:nth-child(3){margin-top:1rem}.t-footer{block-size:1rem;scroll-snap-stop:always;scroll-snap-align:end;background:var(--tui-background-elevation-1)}\n"] }]
        }], propDecorators: { sheet: [{
                type: ViewChild,
                args: ['sheet']
            }], stopsRefs: [{
                type: ViewChildren,
                args: ['stops']
            }], close: [], getStops: [] } });

const TUI_SHEET_DIALOG_DEFAULT_OPTIONS = {
    label: '',
    stops: [],
    initial: 0,
    offset: 16,
    closeable: true,
    data: undefined,
};
/**
 * Default parameters for mobile dialog component
 */
const TUI_SHEET_DIALOG_OPTIONS = tuiCreateToken(TUI_SHEET_DIALOG_DEFAULT_OPTIONS);
function tuiSheetDialogOptionsProvider(options) {
    return tuiProvideOptions(TUI_SHEET_DIALOG_OPTIONS, options, TUI_SHEET_DIALOG_DEFAULT_OPTIONS);
}

class TuiSheetDialogService extends TuiPopoverService {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSheetDialogService, deps: null, target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSheetDialogService, providedIn: 'root', useFactory: () => new TuiSheetDialogService(TUI_DIALOGS, TuiSheetDialogComponent, inject(TUI_SHEET_DIALOG_OPTIONS)) }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSheetDialogService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                    useFactory: () => new TuiSheetDialogService(TUI_DIALOGS, TuiSheetDialogComponent, inject(TUI_SHEET_DIALOG_OPTIONS)),
                }]
        }] });

class TuiSheetDialog extends TuiPopoverDirective {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSheetDialog, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiSheetDialog, isStandalone: true, selector: "ng-template[tuiSheetDialog]", inputs: { options: ["tuiSheetDialogOptions", "options"], open: ["tuiSheetDialog", "open"] }, outputs: { openChange: "tuiSheetDialogChange" }, providers: [tuiAsPopover(TuiSheetDialogService)], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSheetDialog, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: 'ng-template[tuiSheetDialog]',
                    inputs: ['options: tuiSheetDialogOptions', 'open: tuiSheetDialog'],
                    outputs: ['openChange: tuiSheetDialogChange'],
                    providers: [tuiAsPopover(TuiSheetDialogService)],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_SHEET_DIALOG_DEFAULT_OPTIONS, TUI_SHEET_DIALOG_OPTIONS, TuiSheetDialog, TuiSheetDialogComponent, TuiSheetDialogService, tuiSheetDialogOptionsProvider };
//# sourceMappingURL=taiga-ui-addon-mobile-components-sheet-dialog.mjs.map
