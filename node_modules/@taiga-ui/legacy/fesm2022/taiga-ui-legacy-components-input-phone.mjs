import { __decorate } from 'tslib';
import * as i0 from '@angular/core';
import { inject, EventEmitter, TemplateRef, Component, ChangeDetectionStrategy, ViewChild, ContentChild, Input, Output, Directive, NgModule } from '@angular/core';
import { maskitoTransform, MASKITO_DEFAULT_OPTIONS } from '@maskito/core';
import { maskitoPrefixPostprocessorGenerator, maskitoCaretGuard } from '@maskito/kit';
import { tuiIsNativeFocused } from '@taiga-ui/cdk/utils/focus';
import { tuiCreateToken, tuiProvideOptions, tuiPure } from '@taiga-ui/cdk/utils/miscellaneous';
import { tuiAsDataListHost, TuiDataListDirective } from '@taiga-ui/core/components/data-list';
import * as i1$1 from '@taiga-ui/core/directives/dropdown';
import { TuiDropdownOpen, TuiDropdown } from '@taiga-ui/core/directives/dropdown';
import { AbstractTuiControl, tuiAsControl, AbstractTuiTextfieldHost } from '@taiga-ui/legacy/classes';
import * as i2 from '@taiga-ui/legacy/components/primitive-textfield';
import { TuiPrimitiveTextfieldComponent, TuiPrimitiveTextfieldModule, TuiTextfieldComponent } from '@taiga-ui/legacy/components/primitive-textfield';
import * as i3 from '@taiga-ui/legacy/directives';
import { TUI_TEXTFIELD_CLEANER, TUI_TEXTFIELD_SIZE, TuiTextfieldControllerModule, TuiValueAccessorModule, TuiLegacyDropdownOpenMonitorDirective } from '@taiga-ui/legacy/directives';
import { tuiAsFocusableItemAccessor, tuiAsTextfieldHost } from '@taiga-ui/legacy/tokens';
import { FIXED_DROPDOWN_CONTROLLER_PROVIDER } from '@taiga-ui/legacy/utils';
import * as i1 from '@maskito/angular';
import { MaskitoDirective } from '@maskito/angular';

const TUI_INPUT_PHONE_DEFAULT_OPTIONS = {
    phoneMaskAfterCountryCode: '### ###-##-##',
    allowText: false,
    countryCode: '+7',
};
/**
 * @deprecated: drop in v5.0
 * Default parameters for input phone component
 */
const TUI_INPUT_PHONE_OPTIONS = tuiCreateToken(TUI_INPUT_PHONE_DEFAULT_OPTIONS);
function tuiInputPhoneOptionsProvider(options) {
    return tuiProvideOptions(TUI_INPUT_PHONE_OPTIONS, options, TUI_INPUT_PHONE_DEFAULT_OPTIONS);
}

const countDigits = (value) => value.replaceAll(/\D/g, '').length;
/**
 * `InputPhone` component sets country code as non-removable prefix.
 * This prefix appears on focus and cannot be erased.
 * But users sometimes can copy complete phone number (from any different source)
 * and try to insert the whole string inside our `InputPhone` textfield.
 * This preprocessor helps to avoid country prefix duplication on paste/drop/autofill events.
 */
function tuiCreateCompletePhoneInsertionPreprocessor(countryCode, phoneMaskAfterCountryCode) {
    const completePhoneLength = (countryCode + phoneMaskAfterCountryCode).replaceAll(/[^#\d]+/g, '').length;
    const trimCountryPrefix = (value) => countryCode === '+7'
        ? value.replace(/^(\+?7?\s?8?)\s?/, '')
        : value.replace(new RegExp(`^(\\+?${countryCode.replace('+', '')}?)\\s?`), '');
    return ({ elementState, data }) => {
        const { value, selection } = elementState;
        return {
            elementState: {
                selection,
                value: 
                /**
                 * The only possible case when `value` includes digits more
                 * than mask expression allows â€“ browser autofill.
                 * It means that we are inside `input`-event
                 * and mask are ready to reject "extra" characters.
                 * We should cut leading country prefix to save trailing characters!
                 */
                countDigits(value) > completePhoneLength
                    ? trimCountryPrefix(value)
                    : value,
            },
            data: countDigits(data) >= completePhoneLength
                ? /**
                   * User tries to insert/drop the complete phone number (with country prefix).
                   * We should drop already existing non-removable prefix.
                   */
                    trimCountryPrefix(data)
                : data,
        };
    };
}

/**
 * Create {@link https://maskito.dev/core-concepts/mask-expression pattern mask expression} for phone number
 *
 * @example
 * tuiCreatePhoneMaskExpression('+1', '(###) ###-####');
 */
function tuiCreatePhoneMaskExpression(countryCode, phoneMaskAfterCountryCode) {
    return [
        ...countryCode.split(''),
        ' ',
        ...phoneMaskAfterCountryCode
            .replaceAll(/[^#\- ()]+/g, '')
            .split('')
            .map((item) => (item === '#' ? /\d/ : item)),
    ];
}

const MASK_SYMBOLS = /[ \-_()]/g;
function isText(value) {
    return Number.isNaN(parseInt(value.replaceAll(MASK_SYMBOLS, ''), 10));
}
class TuiInputPhoneComponent extends AbstractTuiControl {
    constructor() {
        super(...arguments);
        this.textfieldCleaner = inject(TUI_TEXTFIELD_CLEANER);
        this.options = inject(TUI_INPUT_PHONE_OPTIONS);
        this.textfieldSize = inject(TUI_TEXTFIELD_SIZE);
        this.open = false;
        this.phoneMaskAfterCountryCode = this.options.phoneMaskAfterCountryCode;
        this.allowText = this.options.allowText;
        this.search = '';
        this.searchChange = new EventEmitter();
        this.countryCode = this.options.countryCode;
    }
    set countryCodeSetter(newCountryCode) {
        const prevCountryCode = this.countryCode;
        this.countryCode = newCountryCode;
        this.updateValueWithNewCountryCode(prevCountryCode, newCountryCode);
    }
    get size() {
        return this.textfieldSize.size;
    }
    get nativeFocusableElement() {
        return !this.textfield || this.computedDisabled
            ? null
            : this.textfield.nativeFocusableElement;
    }
    get focused() {
        return (tuiIsNativeFocused(this.nativeFocusableElement) ||
            !!this.dropdown?.tuiDropdownOpen);
    }
    get nativeValue() {
        return (this.nativeFocusableElement?.value ||
            maskitoTransform(this.value, this.maskOptions));
    }
    set nativeValue(value) {
        if (this.nativeFocusableElement) {
            this.nativeFocusableElement.value = value;
        }
    }
    get inputMode() {
        return this.allowText ? 'text' : 'numeric';
    }
    onValueChange(value) {
        const parsed = isText(value)
            ? value
            : value.replaceAll(MASK_SYMBOLS, '').slice(0, this.maxPhoneLength);
        this.updateSearch(parsed);
        this.value = parsed === this.countryCode || isText(parsed) ? '' : parsed;
        this.open = true;
        if (!this.value && !this.allowText) {
            this.nativeValue = this.nonRemovablePrefix;
        }
    }
    handleOption(item) {
        this.focusInput();
        this.value = item;
        this.nativeValue = maskitoTransform(this.value, this.maskOptions);
        this.updateSearch('');
        this.open = false;
    }
    setDisabledState() {
        super.setDisabledState();
        this.open = false;
    }
    writeValue(value) {
        super.writeValue(value);
        this.nativeValue = maskitoTransform(value || '', this.maskOptions);
        this.updateSearch('');
    }
    get canOpen() {
        return this.interactive && !!this.datalist;
    }
    get canClean() {
        return (this.nativeValue !== this.nonRemovablePrefix && this.textfieldCleaner.cleaner);
    }
    get maskOptions() {
        return this.calculateMask(this.countryCode, this.phoneMaskAfterCountryCode, this.nonRemovablePrefix, this.allowText);
    }
    onActiveZone(active) {
        this.updateFocused(active);
        if (active && !this.nativeValue && !this.readOnly && !this.allowText) {
            this.updateSearch(this.nonRemovablePrefix);
            this.nativeValue = this.nonRemovablePrefix;
            return;
        }
        if (this.nativeValue === this.nonRemovablePrefix || this.isTextValue) {
            this.updateSearch('');
            this.nativeValue = '';
            return;
        }
        if (!active && !this.allowText && this.nativeFocusableElement) {
            this.nativeValue = this.nativeValue.replace(/\D$/, '');
        }
    }
    getFallbackValue() {
        return '';
    }
    get nonRemovablePrefix() {
        return `${this.countryCode} `;
    }
    get maxPhoneLength() {
        return (this.countryCode.length +
            this.phoneMaskAfterCountryCode.replaceAll(/[^#]+/g, '').length);
    }
    get isTextValue() {
        return !!this.search && isText(this.search);
    }
    calculateMask(countryCode, phoneMaskAfterCountryCode, nonRemovablePrefix, allowText) {
        const mask = tuiCreatePhoneMaskExpression(countryCode, phoneMaskAfterCountryCode);
        const preprocessors = [
            tuiCreateCompletePhoneInsertionPreprocessor(countryCode, phoneMaskAfterCountryCode),
        ];
        return allowText
            ? {
                mask: ({ value }) => isText(value) && value !== '+'
                    ? MASKITO_DEFAULT_OPTIONS.mask
                    : mask,
                preprocessors,
            }
            : {
                mask,
                preprocessors,
                postprocessors: [
                    maskitoPrefixPostprocessorGenerator(nonRemovablePrefix),
                ],
                plugins: [
                    maskitoCaretGuard((value, [from, to]) => [
                        from === to ? nonRemovablePrefix.length : 0,
                        value.length,
                    ]),
                ],
            };
    }
    focusInput() {
        if (this.nativeFocusableElement) {
            this.nativeFocusableElement.focus({ preventScroll: true });
        }
    }
    updateSearch(search) {
        if (this.search === search) {
            return;
        }
        this.search = search;
        this.searchChange.emit(search);
    }
    updateValueWithNewCountryCode(prevCountryCode, newCountryCode) {
        if (!this.isTextValue) {
            this.value = this.value.replace(prevCountryCode, newCountryCode);
            this.nativeValue = maskitoTransform(this.value, this.maskOptions);
        }
    }
    static { this.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputPhoneComponent, deps: null, target: i0.ÉµÉµFactoryTarget.Component }); }
    static { this.Éµcmp = i0.ÉµÉµngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiInputPhoneComponent, selector: "tui-input-phone", inputs: { phoneMaskAfterCountryCode: "phoneMaskAfterCountryCode", allowText: "allowText", search: "search", countryCodeSetter: ["countryCode", "countryCodeSetter"] }, outputs: { searchChange: "searchChange" }, host: { properties: { "attr.data-size": "size" } }, providers: [
            tuiAsFocusableItemAccessor(TuiInputPhoneComponent),
            tuiAsControl(TuiInputPhoneComponent),
            tuiAsDataListHost(TuiInputPhoneComponent),
        ], queries: [{ propertyName: "datalist", first: true, predicate: TuiDataListDirective, descendants: true, read: TemplateRef }], viewQueries: [{ propertyName: "dropdown", first: true, predicate: TuiDropdownOpen, descendants: true }, { propertyName: "textfield", first: true, predicate: TuiPrimitiveTextfieldComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<div\n    tuiDropdownOpenMonitor\n    class=\"t-hosted\"\n    [tuiDropdown]=\"datalist || ''\"\n    [tuiDropdownEnabled]=\"canOpen\"\n    [(tuiDropdownOpen)]=\"open\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n>\n    <tui-primitive-textfield\n        tuiValueAccessor\n        class=\"t-textfield\"\n        [disabled]=\"computedDisabled\"\n        [focusable]=\"focusable\"\n        [invalid]=\"computedInvalid\"\n        [maskito]=\"maskOptions\"\n        [nativeId]=\"nativeId\"\n        [pseudoFocus]=\"computedFocused\"\n        [pseudoHover]=\"pseudoHover\"\n        [readOnly]=\"readOnly\"\n        [tuiTextfieldCleaner]=\"canClean\"\n        [(value)]=\"nativeValue\"\n        (valueChange)=\"onValueChange($event)\"\n    >\n        <ng-content />\n        <ng-content\n            ngProjectAs=\"input\"\n            select=\"input\"\n        />\n    </tui-primitive-textfield>\n</div>\n", styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:start}:host._disabled{pointer-events:none}.t-hosted{display:block;border-radius:inherit}.t-textfield{border-radius:inherit;text-align:inherit}\n"], dependencies: [{ kind: "directive", type: i1.MaskitoDirective, selector: "[maskito]", inputs: ["maskito", "maskitoElement"] }, { kind: "component", type: i2.TuiPrimitiveTextfieldComponent, selector: "tui-primitive-textfield", inputs: ["editable", "iconCleaner", "readOnly", "invalid", "disabled", "value"], outputs: ["valueChange"] }, { kind: "directive", type: i2.TuiPrimitiveTextfieldDirective, selector: "tui-primitive-textfield" }, { kind: "directive", type: i3.TuiTextfieldCleanerDirective, selector: "[tuiTextfieldCleaner]", inputs: ["tuiTextfieldCleaner"] }, { kind: "directive", type: i3.TuiValueAccessorDirective, selector: "[tuiValueAccessor]" }, { kind: "directive", type: i3.TuiLegacyDropdownOpenMonitorDirective, selector: "[tuiDropdownOpenMonitor]" }, { kind: "directive", type: i1$1.TuiDropdownDirective, selector: "[tuiDropdown]:not(ng-container):not(ng-template)", inputs: ["tuiDropdown"], exportAs: ["tuiDropdown"] }, { kind: "directive", type: i1$1.TuiDropdownOpen, selector: "[tuiDropdown][tuiDropdownOpen],[tuiDropdown][tuiDropdownOpenChange]", inputs: ["tuiDropdownEnabled", "tuiDropdownOpen"], outputs: ["tuiDropdownOpenChange"] }], viewProviders: [FIXED_DROPDOWN_CONTROLLER_PROVIDER], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
__decorate([
    tuiPure
], TuiInputPhoneComponent.prototype, "calculateMask", null);
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputPhoneComponent, decorators: [{
            type: Component,
            args: [{ standalone: false, selector: 'tui-input-phone', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        tuiAsFocusableItemAccessor(TuiInputPhoneComponent),
                        tuiAsControl(TuiInputPhoneComponent),
                        tuiAsDataListHost(TuiInputPhoneComponent),
                    ], viewProviders: [FIXED_DROPDOWN_CONTROLLER_PROVIDER], host: {
                        '[attr.data-size]': 'size',
                    }, template: "<div\n    tuiDropdownOpenMonitor\n    class=\"t-hosted\"\n    [tuiDropdown]=\"datalist || ''\"\n    [tuiDropdownEnabled]=\"canOpen\"\n    [(tuiDropdownOpen)]=\"open\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n>\n    <tui-primitive-textfield\n        tuiValueAccessor\n        class=\"t-textfield\"\n        [disabled]=\"computedDisabled\"\n        [focusable]=\"focusable\"\n        [invalid]=\"computedInvalid\"\n        [maskito]=\"maskOptions\"\n        [nativeId]=\"nativeId\"\n        [pseudoFocus]=\"computedFocused\"\n        [pseudoHover]=\"pseudoHover\"\n        [readOnly]=\"readOnly\"\n        [tuiTextfieldCleaner]=\"canClean\"\n        [(value)]=\"nativeValue\"\n        (valueChange)=\"onValueChange($event)\"\n    >\n        <ng-content />\n        <ng-content\n            ngProjectAs=\"input\"\n            select=\"input\"\n        />\n    </tui-primitive-textfield>\n</div>\n", styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:start}:host._disabled{pointer-events:none}.t-hosted{display:block;border-radius:inherit}.t-textfield{border-radius:inherit;text-align:inherit}\n"] }]
        }], propDecorators: { dropdown: [{
                type: ViewChild,
                args: [TuiDropdownOpen]
            }], textfield: [{
                type: ViewChild,
                args: [TuiPrimitiveTextfieldComponent]
            }], datalist: [{
                type: ContentChild,
                args: [TuiDataListDirective, { read: TemplateRef }]
            }], phoneMaskAfterCountryCode: [{
                type: Input
            }], allowText: [{
                type: Input
            }], search: [{
                type: Input
            }], searchChange: [{
                type: Output
            }], countryCodeSetter: [{
                type: Input,
                args: ['countryCode']
            }], calculateMask: [] } });

class TuiInputPhoneDirective extends AbstractTuiTextfieldHost {
    get value() {
        return this.host.nativeValue;
    }
    onValueChange(value) {
        this.host.onValueChange(value);
    }
    process(input) {
        this.input = input;
    }
    ngDoCheck() {
        if (!this.input) {
            return;
        }
        this.input.type = 'tel';
        this.input.inputMode = this.host.inputMode;
    }
    static { this.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputPhoneDirective, deps: null, target: i0.ÉµÉµFactoryTarget.Directive }); }
    static { this.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiInputPhoneDirective, selector: "tui-input-phone", providers: [tuiAsTextfieldHost(TuiInputPhoneDirective)], usesInheritance: true, ngImport: i0 }); }
}
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputPhoneDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: false,
                    selector: 'tui-input-phone',
                    providers: [tuiAsTextfieldHost(TuiInputPhoneDirective)],
                }]
        }] });

class TuiInputPhoneModule {
    static { this.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputPhoneModule, deps: [], target: i0.ÉµÉµFactoryTarget.NgModule }); }
    static { this.Éµmod = i0.ÉµÉµngDeclareNgModule({ minVersion: "14.0.0", version: "16.2.12", ngImport: i0, type: TuiInputPhoneModule, declarations: [TuiInputPhoneComponent, TuiInputPhoneDirective], imports: [MaskitoDirective,
            TuiPrimitiveTextfieldModule,
            TuiTextfieldControllerModule,
            TuiValueAccessorModule,
            TuiLegacyDropdownOpenMonitorDirective, i1$1.TuiDropdownOptionsDirective, i1$1.TuiDropdownDriverDirective, i1$1.TuiDropdownDirective, i1$1.TuiDropdownComponent, i1$1.TuiDropdownOpen, i1$1.TuiDropdownOpenLegacy, i1$1.TuiDropdownPortal, i1$1.TuiDropdownManual, i1$1.TuiDropdownHover, i1$1.TuiDropdownContext, i1$1.TuiDropdownPosition, i1$1.TuiDropdownPositionSided, i1$1.TuiDropdownSelection], exports: [TuiInputPhoneComponent,
            TuiInputPhoneDirective,
            TuiTextfieldComponent, i1$1.TuiDropdownOptionsDirective, i1$1.TuiDropdownDriverDirective, i1$1.TuiDropdownDirective, i1$1.TuiDropdownComponent, i1$1.TuiDropdownOpen, i1$1.TuiDropdownOpenLegacy, i1$1.TuiDropdownPortal, i1$1.TuiDropdownManual, i1$1.TuiDropdownHover, i1$1.TuiDropdownContext, i1$1.TuiDropdownPosition, i1$1.TuiDropdownPositionSided, i1$1.TuiDropdownSelection] }); }
    static { this.Éµinj = i0.ÉµÉµngDeclareInjector({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputPhoneModule, imports: [TuiPrimitiveTextfieldModule,
            TuiTextfieldControllerModule,
            TuiValueAccessorModule, i1$1.TuiDropdownComponent] }); }
}
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputPhoneModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        MaskitoDirective,
                        TuiPrimitiveTextfieldModule,
                        TuiTextfieldControllerModule,
                        TuiValueAccessorModule,
                        TuiLegacyDropdownOpenMonitorDirective,
                        ...TuiDropdown,
                    ],
                    declarations: [TuiInputPhoneComponent, TuiInputPhoneDirective],
                    exports: [
                        TuiInputPhoneComponent,
                        TuiInputPhoneDirective,
                        TuiTextfieldComponent,
                        ...TuiDropdown,
                    ],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_INPUT_PHONE_DEFAULT_OPTIONS, TUI_INPUT_PHONE_OPTIONS, TuiInputPhoneComponent, TuiInputPhoneDirective, TuiInputPhoneModule, tuiInputPhoneOptionsProvider };
//# sourceMappingURL=taiga-ui-legacy-components-input-phone.mjs.map
