import * as i0 from '@angular/core';
import { inject, Pipe } from '@angular/core';
import { CHAR_PLUS } from '@taiga-ui/cdk/constants';
import { TUI_COUNTRIES_MASKS } from '@taiga-ui/legacy/tokens';
import { tuiGetMaxAllowedPhoneLength, tuiIsoToCountryCode, tuiNotKzRegion } from '@taiga-ui/legacy/utils';

/**
 * @deprecated: drop in v5.0
 * use `maskitoGetCountryFromNumber` from `@maskito/phone` instead
 * ```
 * npm i @maskito/phone
 * ```
 *
 * ```ts
 * import {maskitoGetCountryFromNumber} from '@maskito/phone';
 * import metadata from 'libphonenumber-js/min/metadata';
 *
 * maskitoGetCountryFromNumber('+1 (212) 555-2368', metadata); // 'US'
 * maskitoGetCountryFromNumber('+12125552368', metadata); // 'US'
 * ```
 */
class TuiToCountryCodePipe {
    constructor() {
        this.countriesMasks = inject(TUI_COUNTRIES_MASKS);
    }
    /**
     * @deprecated use `maskitoGetCountryFromNumber` from `@maskito/phone` instead
     * ```
     * npm i @maskito/phone
     * ```
     *
     * ```ts
     * import {maskitoGetCountryFromNumber} from '@maskito/phone';
     * import metadata from 'libphonenumber-js/min/metadata';
     *
     * maskitoGetCountryFromNumber('+1 (212) 555-2368', metadata); // 'US'
     * maskitoGetCountryFromNumber('+12125552368', metadata); // 'US'
     * ```
     */
    transform(value, countries) {
        return countries.find((countryIsoCode) => {
            const ruCodeTest = countryIsoCode === 'RU' &&
                /^[78]/.test(value) &&
                /^(?!880[1-9 ])/.test(value) &&
                value.length + 1 ===
                    tuiGetMaxAllowedPhoneLength(this.countriesMasks, 'RU');
            const matched = ruCodeTest ||
                (value.startsWith(tuiIsoToCountryCode(this.countriesMasks, countryIsoCode).replace(CHAR_PLUS, '')) &&
                    value.length + 1 ===
                        tuiGetMaxAllowedPhoneLength(this.countriesMasks, countryIsoCode));
            if (matched) {
                switch (countryIsoCode) {
                    case 'RU':
                        return tuiNotKzRegion(value);
                    case 'KZ':
                        return !tuiNotKzRegion(value);
                    default:
                        return true;
                }
            }
            return false;
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiToCountryCodePipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "16.2.12", ngImport: i0, type: TuiToCountryCodePipe, isStandalone: true, name: "tuiToCountryCode" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiToCountryCodePipe, decorators: [{
            type: Pipe,
            args: [{
                    standalone: true,
                    name: 'tuiToCountryCode',
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TuiToCountryCodePipe };
//# sourceMappingURL=taiga-ui-legacy-pipes-to-country-code.mjs.map
