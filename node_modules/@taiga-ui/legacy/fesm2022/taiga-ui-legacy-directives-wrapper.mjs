import * as i0 from '@angular/core';
import { Directive, Input, NgModule } from '@angular/core';

/**
 * @deprecated: drop in v5.0
 */
class TuiWrapperDirective {
    constructor() {
        this.disabled = false;
        this.readOnly = false;
        this.hover = null;
        this.active = null;
        this.focus = false;
        this.invalid = false;
        this.appearance = '';
    }
    get computedInvalid() {
        return !this.disabled && !this.readOnly && this.invalid;
    }
    get computedFocused() {
        return this.focus && !this.disabled;
    }
    get interactiveState() {
        if (this.disabled) {
            return 'disabled';
        }
        if (this.readOnly) {
            return 'readonly';
        }
        if (this.active) {
            return 'active';
        }
        if (this.hover) {
            return 'hover';
        }
        return null;
    }
    get noHover() {
        return this.readOnly || this.hover === false;
    }
    get noActive() {
        return this.readOnly || this.active === false;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiWrapperDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiWrapperDirective, selector: "[tuiWrapper]", inputs: { disabled: "disabled", readOnly: "readOnly", hover: "hover", active: "active", focus: "focus", invalid: "invalid", appearance: "appearance" }, host: { properties: { "attr.data-appearance": "appearance", "class._invalid": "computedInvalid", "class._focused": "computedFocused", "attr.data-state": "interactiveState", "class._no-hover": "noHover", "class._no-active": "noActive" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiWrapperDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiWrapper]',
                    host: {
                        '[attr.data-appearance]': 'appearance',
                        '[class._invalid]': 'computedInvalid',
                        '[class._focused]': 'computedFocused',
                        '[attr.data-state]': 'interactiveState',
                        '[class._no-hover]': 'noHover',
                        '[class._no-active]': 'noActive',
                    },
                }]
        }], propDecorators: { disabled: [{
                type: Input
            }], readOnly: [{
                type: Input
            }], hover: [{
                type: Input
            }], active: [{
                type: Input
            }], focus: [{
                type: Input
            }], invalid: [{
                type: Input
            }], appearance: [{
                type: Input
            }] } });

/**
 * @deprecated: drop in v5.0
 */
class TuiWrapperModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiWrapperModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.2.12", ngImport: i0, type: TuiWrapperModule, declarations: [TuiWrapperDirective], exports: [TuiWrapperDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiWrapperModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiWrapperModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [TuiWrapperDirective],
                    exports: [TuiWrapperDirective],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TuiWrapperDirective, TuiWrapperModule };
//# sourceMappingURL=taiga-ui-legacy-directives-wrapper.mjs.map
