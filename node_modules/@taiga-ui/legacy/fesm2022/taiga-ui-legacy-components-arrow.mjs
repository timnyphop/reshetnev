import { NgIf, AsyncPipe } from '@angular/common';
import * as i0 from '@angular/core';
import { inject, Component, ChangeDetectionStrategy } from '@angular/core';
import { TuiIcon } from '@taiga-ui/core/components/icon';
import { TuiDropdownOpen } from '@taiga-ui/core/directives/dropdown';
import { tuiSizeBigger } from '@taiga-ui/core/utils/miscellaneous';
import { AbstractTuiControl } from '@taiga-ui/legacy/classes';
import { TUI_TEXTFIELD_SIZE } from '@taiga-ui/legacy/directives';
import { PolymorpheusOutlet, PolymorpheusTemplate, PolymorpheusComponent } from '@taiga-ui/polymorpheus';
import { tuiCreateToken, tuiProvideOptions } from '@taiga-ui/cdk/utils/miscellaneous';

/**
 * @deprecated: drop in v5.0 use {@link TuiChevron}
 */
const TUI_ARROW_DEFAULT_OPTIONS = {
    iconSmall: '@tui.chevron-down',
    iconLarge: '@tui.chevron-down',
};
/**
 * @deprecated: drop in v5.0
 * Default parameters for arrow component
 */
const TUI_ARROW_OPTIONS = tuiCreateToken(TUI_ARROW_DEFAULT_OPTIONS);
function tuiArrowOptionsProvider(options) {
    return tuiProvideOptions(TUI_ARROW_OPTIONS, options, TUI_ARROW_DEFAULT_OPTIONS);
}

/**
 * @deprecated: drop in v5.0 use {@link TuiChevron}
 */
class TuiArrowComponent {
    constructor() {
        this.control = inject(AbstractTuiControl, { optional: true });
        this.textfieldSize = inject(TUI_TEXTFIELD_SIZE);
        this.options = inject(TUI_ARROW_OPTIONS);
        this.directive = inject(TuiDropdownOpen, { optional: true });
    }
    get rotated() {
        return this.directive?.tuiDropdownOpen || !!this.control.pseudoOpen || false;
    }
    get small() {
        return !tuiSizeBigger(this.textfieldSize.size);
    }
    get arrowIcon() {
        return !this.small ? this.options.iconLarge : this.options.iconSmall;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiArrowComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiArrowComponent, isStandalone: true, selector: "tui-arrow", host: { properties: { "class._rotated": "rotated", "class._small": "small" } }, ngImport: i0, template: "<tui-icon\n    *polymorpheusOutlet=\"arrowIcon as src\"\n    [icon]=\"src\"\n/>\n<ng-container *ngIf=\"directive?.tuiDropdownOpenChange | async\" />\n", styles: [":host{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;display:block;cursor:pointer;pointer-events:none}:host._rotated{transform:rotate(180deg)}tui-icon{border:.25rem solid transparent}\n"], dependencies: [{ kind: "directive", type: PolymorpheusOutlet, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "pipe", type: AsyncPipe, name: "async" }, { kind: "component", type: TuiIcon, selector: "tui-icon", inputs: ["icon", "background"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiArrowComponent, decorators: [{
            type: Component,
            args: [{ standalone: true, selector: 'tui-arrow', imports: [PolymorpheusOutlet, PolymorpheusTemplate, NgIf, AsyncPipe, TuiIcon], changeDetection: ChangeDetectionStrategy.OnPush, host: {
                        '[class._rotated]': 'rotated',
                        '[class._small]': 'small',
                    }, template: "<tui-icon\n    *polymorpheusOutlet=\"arrowIcon as src\"\n    [icon]=\"src\"\n/>\n<ng-container *ngIf=\"directive?.tuiDropdownOpenChange | async\" />\n", styles: [":host{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;display:block;cursor:pointer;pointer-events:none}:host._rotated{transform:rotate(180deg)}tui-icon{border:.25rem solid transparent}\n"] }]
        }] });
const TUI_ARROW = new PolymorpheusComponent(TuiArrowComponent);

/**
 * @deprecated: drop in v5.0 use {@link TuiChevron}
 */
const TUI_ARROW_DEFAULT_MODE = {
    interactive: TUI_ARROW,
    disabled: TUI_ARROW,
};
/**
 * @deprecated: drop in v5.0 use {@link TuiChevron}
 */
const TUI_ARROW_MODE = tuiCreateToken(TUI_ARROW_DEFAULT_MODE);
/**
 * @deprecated: drop in v5.0 use {@link TuiChevron}
 */
function tuiArrowModeProvider(options) {
    return tuiProvideOptions(TUI_ARROW_MODE, options, TUI_ARROW_DEFAULT_MODE);
}

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_ARROW, TUI_ARROW_DEFAULT_MODE, TUI_ARROW_DEFAULT_OPTIONS, TUI_ARROW_MODE, TUI_ARROW_OPTIONS, TuiArrowComponent, tuiArrowModeProvider, tuiArrowOptionsProvider };
//# sourceMappingURL=taiga-ui-legacy-components-arrow.mjs.map
