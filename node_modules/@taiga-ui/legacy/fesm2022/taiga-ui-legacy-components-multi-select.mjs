import { __decorate } from 'tslib';
import * as i0 from '@angular/core';
import { Directive, inject, EventEmitter, TemplateRef, Component, ChangeDetectionStrategy, ContentChild, ViewChild, Input, Output, Pipe, ContentChildren, Optional, forwardRef, NgModule } from '@angular/core';
import { tuiCreateToken, tuiProvideOptions, tuiIsString, tuiArrayToggle, tuiPure, tuiIsPresent, tuiGetOriginalArrayFromQueryList, tuiProvide } from '@taiga-ui/cdk/utils/miscellaneous';
import { tuiIsFlat } from '@taiga-ui/kit/utils';
import { TUI_TRUE_HANDLER, EMPTY_ARRAY, EMPTY_QUERY, TUI_DEFAULT_IDENTITY_MATCHER, EMPTY_FUNCTION } from '@taiga-ui/cdk/constants';
import { TUI_IS_MOBILE } from '@taiga-ui/cdk/tokens';
import { tuiIsNativeFocused } from '@taiga-ui/cdk/utils/focus';
import * as i2$2 from '@taiga-ui/core/components/data-list';
import { tuiAsDataListHost, TUI_DATA_LIST_ACCESSOR, TuiDataListDirective, TUI_DATA_LIST_HOST, TuiOption, tuiAsOptionContent, tuiAsDataList, TuiDataList } from '@taiga-ui/core/components/data-list';
import * as i1$1 from '@taiga-ui/core/directives/dropdown';
import { TuiDropdownOpen, TuiDropdown } from '@taiga-ui/core/directives/dropdown';
import { TUI_ITEMS_HANDLERS, TUI_MULTI_SELECT_TEXTS } from '@taiga-ui/kit/tokens';
import { AbstractTuiNativeSelect, AbstractTuiMultipleControl, TuiStringifiableItem, tuiAsControl, AbstractTuiTextfieldHost } from '@taiga-ui/legacy/classes';
import { TUI_ARROW_MODE, TuiArrowComponent } from '@taiga-ui/legacy/components/arrow';
import * as i5 from '@taiga-ui/legacy/components/input-tag';
import { TuiInputTagComponent, TuiInputTagModule } from '@taiga-ui/legacy/components/input-tag';
import * as i4 from '@taiga-ui/legacy/directives';
import { TUI_TEXTFIELD_WATCHED_CONTROLLER, TEXTFIELD_CONTROLLER_PROVIDER, TuiWrapperModule, TuiTextfieldControllerModule, TuiLegacyDropdownOpenMonitorDirective } from '@taiga-ui/legacy/directives';
import { tuiAsFocusableItemAccessor, tuiAsTextfieldHost } from '@taiga-ui/legacy/tokens';
import { FIXED_DROPDOWN_CONTROLLER_PROVIDER } from '@taiga-ui/legacy/utils';
import * as i1 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i2 from '@angular/forms';
import { NgControl, NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import * as i3 from '@taiga-ui/polymorpheus';
import { PolymorpheusComponent, PolymorpheusOutlet, PolymorpheusTemplate } from '@taiga-ui/polymorpheus';
import * as i6 from '@taiga-ui/cdk/pipes/mapper';
import { TuiMapperPipe } from '@taiga-ui/cdk/pipes/mapper';
import * as i2$1 from '@taiga-ui/cdk/directives/let';
import { TuiLet } from '@taiga-ui/cdk/directives/let';
import * as i3$1 from '@taiga-ui/core/components/link';
import { TuiLink } from '@taiga-ui/core/components/link';
import * as i3$2 from '@taiga-ui/kit/components/data-list-wrapper';
import { TuiDataListWrapper } from '@taiga-ui/kit/components/data-list-wrapper';
import * as i7 from '@taiga-ui/kit/pipes/stringify-content';
import { TuiStringifyContentPipe } from '@taiga-ui/kit/pipes/stringify-content';
import { TuiMultiSelectOptionComponent, TuiMultiSelectOptionModule } from '@taiga-ui/legacy/components/multi-select-option';
import { tuiQueryListChanges, tuiControlValue } from '@taiga-ui/cdk/observables';
import { map, combineLatest } from 'rxjs';

const TUI_MULTI_SELECT_DEFAULT_OPTIONS = {
    rows: Infinity,
    valueContent: '',
};
/**
 * @deprecated: drop in v5.0
 * Default parameters for MultiSelect component
 */
const TUI_MULTI_SELECT_OPTIONS = tuiCreateToken(TUI_MULTI_SELECT_DEFAULT_OPTIONS);
function tuiMultiSelectOptionsProvider(options) {
    return tuiProvideOptions(TUI_MULTI_SELECT_OPTIONS, options, TUI_MULTI_SELECT_DEFAULT_OPTIONS);
}

class AbstractTuiNativeMultiSelect extends AbstractTuiNativeSelect {
    constructor() {
        super(...arguments);
        this.selectedMapper = (option, value) => value.includes(option);
    }
    get stringify() {
        return this.host.stringify;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: AbstractTuiNativeMultiSelect, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: AbstractTuiNativeMultiSelect, usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: AbstractTuiNativeMultiSelect, decorators: [{
            type: Directive
        }] });

class TuiMultiSelectComponent extends AbstractTuiMultipleControl {
    constructor() {
        super(...arguments);
        this.arrowMode = inject(TUI_ARROW_MODE);
        this.itemsHandlers = inject(TUI_ITEMS_HANDLERS);
        this.options = inject(TUI_MULTI_SELECT_OPTIONS);
        this.open = false;
        this.controller = inject(TUI_TEXTFIELD_WATCHED_CONTROLLER);
        this.isMobile = inject(TUI_IS_MOBILE);
        this.stringify = this.itemsHandlers.stringify;
        this.identityMatcher = this.itemsHandlers.identityMatcher;
        this.search = '';
        this.placeholder = '';
        this.editable = true;
        this.disabledItemHandler = this.itemsHandlers.disabledItemHandler;
        this.valueContent = this.options.valueContent;
        this.tagValidator = TUI_TRUE_HANDLER;
        this.rows = this.options.rows;
        this.autoColor = false;
        this.searchChange = new EventEmitter();
        this.valueMapper = (value, stringify, group) => group
            ? EMPTY_ARRAY
            : value.map((item) => new TuiStringifiableItem(item, stringify));
        this.disabledItemHandlerWrapper = (handler) => (stringifiable) => tuiIsString(stringifiable) || handler(stringifiable.item);
    }
    get size() {
        return this.controller.size;
    }
    get nativeFocusableElement() {
        return this.input?.nativeFocusableElement ?? null;
    }
    get focused() {
        return !!this.input?.focused || !!this.dropdown?.tuiDropdownOpen;
    }
    onValueChange(value) {
        this.value = value;
    }
    onSearch(search) {
        // Clearing sets the empty value, the dropdown should not be opened on clear.
        if (search !== '') {
            this.open = true;
        }
        this.updateSearch(search);
    }
    setDisabledState() {
        super.setDisabledState();
        this.open = false;
    }
    handleOption(option) {
        const { value, identityMatcher } = this;
        const index = value.findIndex((item) => identityMatcher(item, option));
        this.value =
            index === -1 ? [...value, option] : value.filter((_, i) => i !== index);
        this.updateSearch(null);
    }
    get arrow() {
        return this.interactive ? this.arrowMode.interactive : this.arrowMode.disabled;
    }
    get nativeDropdownMode() {
        return !!this.nativeSelect && this.isMobile && !this.editable;
    }
    get computedValue() {
        return this.computedGroup ? EMPTY_ARRAY : this.value;
    }
    // @bad TODO: think of a better way
    get searchOrSpace() {
        return this.computedGroup ? ' ' : this.searchString;
    }
    get searchString() {
        return this.search === null ? '' : this.search;
    }
    get computedGroup() {
        return (!!this.valueContent &&
            this.value.length > 0 &&
            (!this.focused || !this.editable));
    }
    getStringifier(stringify) {
        return ({ $implicit }) => stringify($implicit);
    }
    onSpace(event) {
        if (!this.editable) {
            event.preventDefault();
        }
        if (!this.readOnly) {
            this.open = true;
        }
    }
    onEnter(event) {
        const { value } = this;
        const options = this.accessor ? this.accessor.getOptions() : [];
        if (options.length !== 1) {
            return;
        }
        event.preventDefault();
        this.value = options[0] ? tuiArrayToggle(value, options[0]) : value;
        this.updateSearch(null);
    }
    onClick({ nativeFocusableElement }) {
        if (this.interactive &&
            nativeFocusableElement &&
            tuiIsNativeFocused(nativeFocusableElement)) {
            this.open = !this.open;
        }
    }
    onInput(value) {
        this.value = value.map(({ item }) => item);
    }
    onActiveZone(active) {
        this.updateFocused(active);
    }
    updateSearch(search) {
        if (this.search === search) {
            return;
        }
        this.search = search;
        this.searchChange.emit(search);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiMultiSelectComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiMultiSelectComponent, selector: "tui-multi-select", inputs: { stringify: "stringify", identityMatcher: "identityMatcher", search: "search", placeholder: "placeholder", editable: "editable", disabledItemHandler: "disabledItemHandler", valueContent: "valueContent", tagValidator: "tagValidator", rows: "rows", autoColor: "autoColor" }, outputs: { searchChange: "searchChange" }, host: { properties: { "attr.data-size": "size", "class._editable": "editable", "class._expandable": "rows > 1" } }, providers: [
            tuiAsFocusableItemAccessor(TuiMultiSelectComponent),
            tuiAsControl(TuiMultiSelectComponent),
            tuiAsDataListHost(TuiMultiSelectComponent),
            TEXTFIELD_CONTROLLER_PROVIDER,
        ], queries: [{ propertyName: "accessor", first: true, predicate: TUI_DATA_LIST_ACCESSOR, descendants: true }, { propertyName: "nativeSelect", first: true, predicate: AbstractTuiNativeMultiSelect, descendants: true, static: true }, { propertyName: "datalist", first: true, predicate: TuiDataListDirective, descendants: true, read: TemplateRef }], viewQueries: [{ propertyName: "dropdown", first: true, predicate: TuiDropdownOpen, descendants: true }, { propertyName: "input", first: true, predicate: TuiInputTagComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<div\n    tuiDropdownOpenMonitor\n    class=\"t-hosted\"\n    [tuiDropdown]=\"datalist || ''\"\n    [tuiDropdownEnabled]=\"interactive && !nativeDropdownMode\"\n    [(tuiDropdownOpen)]=\"open\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n>\n    <tui-input-tag\n        #inputTag\n        automation-id=\"tui-multi-select__input\"\n        class=\"t-input\"\n        [autoColor]=\"autoColor\"\n        [disabled]=\"disabled\"\n        [disabledItemHandler]=\"disabledItemHandler | tuiMapper: disabledItemHandlerWrapper\"\n        [editable]=\"false\"\n        [inputHidden]=\"!editable\"\n        [nativeId]=\"nativeId\"\n        [ngModel]=\"computedValue | tuiMapper: valueMapper : stringify\"\n        [ngModelOptions]=\"{standalone: true}\"\n        [placeholder]=\"placeholder\"\n        [pseudoFocus]=\"computedFocused\"\n        [pseudoHover]=\"pseudoHover\"\n        [pseudoInvalid]=\"computedInvalid\"\n        [pseudoOpen]=\"open\"\n        [readOnly]=\"readOnly\"\n        [removable]=\"!nativeDropdownMode\"\n        [rows]=\"rows\"\n        [search]=\"searchOrSpace\"\n        [tagValidator]=\"tagValidator | tuiMapper: disabledItemHandlerWrapper\"\n        [tuiTextfieldIcon]=\"arrow ? icon : ''\"\n        (click.prevent)=\"onClick(inputTag)\"\n        (keydown.enter)=\"onEnter($event)\"\n        (keydown.space)=\"onSpace($event)\"\n        (ngModelChange)=\"onInput($event)\"\n        (searchChange)=\"onSearch($event)\"\n    >\n        <ng-content />\n        <ng-template #select>\n            <ng-content\n                *ngIf=\"isMobile\"\n                select=\"select\"\n            />\n        </ng-template>\n\n        <ng-container\n            *ngTemplateOutlet=\"select\"\n            ngProjectAs=\"select\"\n        />\n\n        <div\n            *ngIf=\"computedGroup\"\n            ngProjectAs=\"tuiContent\"\n            class=\"t-content\"\n            [class.t-content_fullsize]=\"inputTag.labelOutside\"\n        >\n            <span\n                *polymorpheusOutlet=\"valueContent as text; context: {$implicit: value}\"\n                class=\"t-primitive\"\n            >\n                {{ text }}\n            </span>\n        </div>\n    </tui-input-tag>\n\n    <ng-template #icon>\n        <div\n            appearance=\"icon\"\n            automation-id=\"tui-multi-select__arrow\"\n            tuiWrapper\n            class=\"t-arrow\"\n            [class.t-arrow_native-dropdown]=\"nativeDropdownMode\"\n            (mousedown.prevent.silent)=\"(0)\"\n        >\n            <ng-container *polymorpheusOutlet=\"arrow as text\">\n                {{ text }}\n            </ng-container>\n        </div>\n    </ng-template>\n</div>\n", styles: [":host{position:relative;display:block;border-radius:var(--tui-radius-m)}:host._disabled{pointer-events:none}.t-hosted{display:block;border-radius:inherit}.t-input{border-radius:inherit}:host:not(._editable):not(._readonly) .t-input{cursor:pointer}.t-content{display:flex;align-items:center;pointer-events:none;box-sizing:border-box}.t-primitive{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.t-arrow{pointer-events:auto;cursor:pointer}.t-arrow_native-dropdown{pointer-events:none}\n"], dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i3.PolymorpheusOutlet, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { kind: "directive", type: i4.TuiWrapperDirective, selector: "[tuiWrapper]", inputs: ["disabled", "readOnly", "hover", "active", "focus", "invalid", "appearance"] }, { kind: "component", type: i5.TuiInputTagComponent, selector: "tui-input-tag", inputs: ["separator", "search", "editable", "tagValidator", "rows", "inputHidden", "uniqueTags", "autoColor", "maxLength", "placeholder", "removable", "pseudoOpen", "disabledItemHandler", "pseudoFocused"], outputs: ["searchChange"] }, { kind: "directive", type: i1$1.TuiDropdownDirective, selector: "[tuiDropdown]:not(ng-container):not(ng-template)", inputs: ["tuiDropdown"], exportAs: ["tuiDropdown"] }, { kind: "directive", type: i1$1.TuiDropdownOpen, selector: "[tuiDropdown][tuiDropdownOpen],[tuiDropdown][tuiDropdownOpenChange]", inputs: ["tuiDropdownEnabled", "tuiDropdownOpen"], outputs: ["tuiDropdownOpenChange"] }, { kind: "directive", type: i4.TuiTextfieldIconDirective, selector: "[tuiTextfieldIcon]", inputs: ["tuiTextfieldIcon"] }, { kind: "directive", type: i4.TuiLegacyDropdownOpenMonitorDirective, selector: "[tuiDropdownOpenMonitor]" }, { kind: "pipe", type: i6.TuiMapperPipe, name: "tuiMapper" }], viewProviders: [FIXED_DROPDOWN_CONTROLLER_PROVIDER], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
__decorate([
    tuiPure
], TuiMultiSelectComponent.prototype, "getStringifier", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiMultiSelectComponent, decorators: [{
            type: Component,
            args: [{ standalone: false, selector: 'tui-multi-select', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        tuiAsFocusableItemAccessor(TuiMultiSelectComponent),
                        tuiAsControl(TuiMultiSelectComponent),
                        tuiAsDataListHost(TuiMultiSelectComponent),
                        TEXTFIELD_CONTROLLER_PROVIDER,
                    ], viewProviders: [FIXED_DROPDOWN_CONTROLLER_PROVIDER], host: {
                        '[attr.data-size]': 'size',
                        '[class._editable]': 'editable',
                        '[class._expandable]': 'rows > 1',
                    }, template: "<div\n    tuiDropdownOpenMonitor\n    class=\"t-hosted\"\n    [tuiDropdown]=\"datalist || ''\"\n    [tuiDropdownEnabled]=\"interactive && !nativeDropdownMode\"\n    [(tuiDropdownOpen)]=\"open\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n>\n    <tui-input-tag\n        #inputTag\n        automation-id=\"tui-multi-select__input\"\n        class=\"t-input\"\n        [autoColor]=\"autoColor\"\n        [disabled]=\"disabled\"\n        [disabledItemHandler]=\"disabledItemHandler | tuiMapper: disabledItemHandlerWrapper\"\n        [editable]=\"false\"\n        [inputHidden]=\"!editable\"\n        [nativeId]=\"nativeId\"\n        [ngModel]=\"computedValue | tuiMapper: valueMapper : stringify\"\n        [ngModelOptions]=\"{standalone: true}\"\n        [placeholder]=\"placeholder\"\n        [pseudoFocus]=\"computedFocused\"\n        [pseudoHover]=\"pseudoHover\"\n        [pseudoInvalid]=\"computedInvalid\"\n        [pseudoOpen]=\"open\"\n        [readOnly]=\"readOnly\"\n        [removable]=\"!nativeDropdownMode\"\n        [rows]=\"rows\"\n        [search]=\"searchOrSpace\"\n        [tagValidator]=\"tagValidator | tuiMapper: disabledItemHandlerWrapper\"\n        [tuiTextfieldIcon]=\"arrow ? icon : ''\"\n        (click.prevent)=\"onClick(inputTag)\"\n        (keydown.enter)=\"onEnter($event)\"\n        (keydown.space)=\"onSpace($event)\"\n        (ngModelChange)=\"onInput($event)\"\n        (searchChange)=\"onSearch($event)\"\n    >\n        <ng-content />\n        <ng-template #select>\n            <ng-content\n                *ngIf=\"isMobile\"\n                select=\"select\"\n            />\n        </ng-template>\n\n        <ng-container\n            *ngTemplateOutlet=\"select\"\n            ngProjectAs=\"select\"\n        />\n\n        <div\n            *ngIf=\"computedGroup\"\n            ngProjectAs=\"tuiContent\"\n            class=\"t-content\"\n            [class.t-content_fullsize]=\"inputTag.labelOutside\"\n        >\n            <span\n                *polymorpheusOutlet=\"valueContent as text; context: {$implicit: value}\"\n                class=\"t-primitive\"\n            >\n                {{ text }}\n            </span>\n        </div>\n    </tui-input-tag>\n\n    <ng-template #icon>\n        <div\n            appearance=\"icon\"\n            automation-id=\"tui-multi-select__arrow\"\n            tuiWrapper\n            class=\"t-arrow\"\n            [class.t-arrow_native-dropdown]=\"nativeDropdownMode\"\n            (mousedown.prevent.silent)=\"(0)\"\n        >\n            <ng-container *polymorpheusOutlet=\"arrow as text\">\n                {{ text }}\n            </ng-container>\n        </div>\n    </ng-template>\n</div>\n", styles: [":host{position:relative;display:block;border-radius:var(--tui-radius-m)}:host._disabled{pointer-events:none}.t-hosted{display:block;border-radius:inherit}.t-input{border-radius:inherit}:host:not(._editable):not(._readonly) .t-input{cursor:pointer}.t-content{display:flex;align-items:center;pointer-events:none;box-sizing:border-box}.t-primitive{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.t-arrow{pointer-events:auto;cursor:pointer}.t-arrow_native-dropdown{pointer-events:none}\n"] }]
        }], propDecorators: { accessor: [{
                type: ContentChild,
                args: [TUI_DATA_LIST_ACCESSOR]
            }], nativeSelect: [{
                type: ContentChild,
                args: [AbstractTuiNativeMultiSelect, { static: true }]
            }], dropdown: [{
                type: ViewChild,
                args: [TuiDropdownOpen]
            }], input: [{
                type: ViewChild,
                args: [TuiInputTagComponent]
            }], datalist: [{
                type: ContentChild,
                args: [TuiDataListDirective, { read: TemplateRef }]
            }], stringify: [{
                type: Input
            }], identityMatcher: [{
                type: Input
            }], search: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], editable: [{
                type: Input
            }], disabledItemHandler: [{
                type: Input
            }], valueContent: [{
                type: Input
            }], tagValidator: [{
                type: Input
            }], rows: [{
                type: Input
            }], autoColor: [{
                type: Input
            }], searchChange: [{
                type: Output
            }], getStringifier: [] } });

class TuiHideSelectedPipe {
    constructor() {
        this.component = inject(TuiMultiSelectComponent);
    }
    transform(items) {
        const { value, identityMatcher } = this.component;
        if (!items) {
            return null;
        }
        return tuiIsFlat(items)
            ? this.filter(items, value, identityMatcher)
            : this.filter2d(items, value, identityMatcher);
    }
    filter2d(items, value, matcher) {
        return items.map((subItems) => this.filter(subItems, value, matcher));
    }
    filter(items, value, matcher) {
        return items.filter((item) => value.every((selected) => !matcher(selected, item)));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiHideSelectedPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "16.2.12", ngImport: i0, type: TuiHideSelectedPipe, name: "tuiHideSelected", pure: false }); }
}
__decorate([
    tuiPure
], TuiHideSelectedPipe.prototype, "filter2d", null);
__decorate([
    tuiPure
], TuiHideSelectedPipe.prototype, "filter", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiHideSelectedPipe, decorators: [{
            type: Pipe,
            args: [{
                    standalone: false,
                    name: 'tuiHideSelected',
                    pure: false,
                }]
        }], propDecorators: { filter2d: [], filter: [] } });

class TuiMultiSelectDirective extends AbstractTuiTextfieldHost {
    constructor() {
        super(...arguments);
        this.disableItemHandler = (item) => this.host.disabledItemHandler(item);
    }
    get readOnly() {
        return true;
    }
    get stringify() {
        return this.host.stringify;
    }
    onValueChange() { }
    onSelectionChange(value) {
        this.host.onValueChange(value);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiMultiSelectDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiMultiSelectDirective, selector: "tui-multi-select", providers: [tuiAsTextfieldHost(TuiMultiSelectDirective)], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiMultiSelectDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: false,
                    selector: 'tui-multi-select',
                    providers: [tuiAsTextfieldHost(TuiMultiSelectDirective)],
                }]
        }] });

class TuiMultiSelectGroupComponent {
    constructor() {
        this.options = EMPTY_QUERY;
        this.host = inject(TUI_DATA_LIST_HOST);
        this.control = inject(NgControl);
        this.multiSelectTexts$ = inject(TUI_MULTI_SELECT_TEXTS);
        this.label = '';
    }
    get empty$() {
        return tuiQueryListChanges(this.options).pipe(map(({ length }) => !length));
    }
    get disabled$() {
        return tuiQueryListChanges(this.options).pipe(map((items) => items.every(({ disabled }) => disabled)));
    }
    get value$() {
        return combineLatest([this.items$, this.valueChanges$]).pipe(map(([items, current]) => {
            let result = false;
            for (let i = 0; i < items.length; i++) {
                const selected = current.some((selected) => this.matcher(selected, items[i]));
                if ((!selected && result) || (selected && !result && i)) {
                    return null;
                }
                result = selected;
            }
            return result;
        }));
    }
    onClick(checked) {
        if (!this.control.control) {
            return;
        }
        const controlValue = this.control.value || [];
        const { values } = this;
        const filtered = controlValue.filter((current) => values.every((item) => !this.matcher(current, item)));
        this.control.control.setValue(checked ? filtered : [...filtered, ...values]);
    }
    get items$() {
        return tuiQueryListChanges(this.options).pipe(map((options) => options.map(({ value }) => value).filter(tuiIsPresent)));
    }
    get valueChanges$() {
        return tuiControlValue(this.control).pipe(map((value) => value || []));
    }
    get values() {
        return this.filter(tuiGetOriginalArrayFromQueryList(this.options));
    }
    get matcher() {
        return this.host.identityMatcher || TUI_DEFAULT_IDENTITY_MATCHER;
    }
    filter(items) {
        return items.map(({ value }) => value).filter(tuiIsPresent);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiMultiSelectGroupComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiMultiSelectGroupComponent, selector: "tui-opt-group[tuiMultiSelectGroup]", inputs: { label: "label" }, host: { properties: { "class._label": "label" } }, queries: [{ propertyName: "options", predicate: TuiOption }], ngImport: i0, template: "<span\n    *tuiLet=\"value$ | async as value\"\n    class=\"t-wrapper\"\n>\n    <span class=\"t-label\">{{ label }}</span>\n    <button\n        *ngIf=\"label && !(empty$ | async)\"\n        tuiLink\n        type=\"button\"\n        class=\"t-button\"\n        [disabled]=\"!!(disabled$ | async)\"\n        (click)=\"onClick(value)\"\n    >\n        {{ (multiSelectTexts$ | async)?.[value ? 'none' : 'all'] }}\n    </button>\n</span>\n<ng-content />\n", styles: [":host._label:before{display:none}:host:not(:first-of-type) .t-label:not(:empty){padding-top:1.25rem}:host:not(:first-of-type) .t-button{margin-top:1.25rem}.t-wrapper{display:flex;align-items:flex-start}.t-label:not(:empty){flex:1;padding:.75rem 1rem .25rem .625rem}.t-button{margin:.75rem 1rem 0 auto}\n"], dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2$1.TuiLet, selector: "[tuiLet]", inputs: ["tuiLet"] }, { kind: "directive", type: i3$1.TuiLink, selector: "a[tuiLink], button[tuiLink]", inputs: ["pseudo"] }, { kind: "pipe", type: i1.AsyncPipe, name: "async" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
__decorate([
    tuiPure
], TuiMultiSelectGroupComponent.prototype, "empty$", null);
__decorate([
    tuiPure
], TuiMultiSelectGroupComponent.prototype, "disabled$", null);
__decorate([
    tuiPure
], TuiMultiSelectGroupComponent.prototype, "value$", null);
__decorate([
    tuiPure
], TuiMultiSelectGroupComponent.prototype, "items$", null);
__decorate([
    tuiPure
], TuiMultiSelectGroupComponent.prototype, "valueChanges$", null);
__decorate([
    tuiPure
], TuiMultiSelectGroupComponent.prototype, "filter", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiMultiSelectGroupComponent, decorators: [{
            type: Component,
            args: [{ standalone: false, selector: 'tui-opt-group[tuiMultiSelectGroup]', changeDetection: ChangeDetectionStrategy.OnPush, host: {
                        '[class._label]': 'label',
                    }, template: "<span\n    *tuiLet=\"value$ | async as value\"\n    class=\"t-wrapper\"\n>\n    <span class=\"t-label\">{{ label }}</span>\n    <button\n        *ngIf=\"label && !(empty$ | async)\"\n        tuiLink\n        type=\"button\"\n        class=\"t-button\"\n        [disabled]=\"!!(disabled$ | async)\"\n        (click)=\"onClick(value)\"\n    >\n        {{ (multiSelectTexts$ | async)?.[value ? 'none' : 'all'] }}\n    </button>\n</span>\n<ng-content />\n", styles: [":host._label:before{display:none}:host:not(:first-of-type) .t-label:not(:empty){padding-top:1.25rem}:host:not(:first-of-type) .t-button{margin-top:1.25rem}.t-wrapper{display:flex;align-items:flex-start}.t-label:not(:empty){flex:1;padding:.75rem 1rem .25rem .625rem}.t-button{margin:.75rem 1rem 0 auto}\n"] }]
        }], propDecorators: { options: [{
                type: ContentChildren,
                args: [TuiOption]
            }], label: [{
                type: Input
            }], empty$: [], disabled$: [], value$: [], items$: [], valueChanges$: [], filter: [] } });

const TUI_MULTI_SELECT_OPTION = new PolymorpheusComponent(TuiMultiSelectOptionComponent);
class TuiMultiSelectGroupDirective {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiMultiSelectGroupDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiMultiSelectGroupDirective, selector: "[tuiMultiSelectGroup]", providers: [
            tuiAsOptionContent(TUI_MULTI_SELECT_OPTION),
            {
                provide: TUI_DATA_LIST_HOST,
                deps: [
                    NgControl,
                    [new Optional(), forwardRef(() => TuiMultiSelectComponent)],
                ],
                useFactory: (control, host) => host || {
                    handleOption: (option) => control.control?.setValue(tuiArrayToggle(control.value || [], option)),
                },
            },
            {
                provide: NG_VALUE_ACCESSOR,
                multi: true,
                useValue: {
                    writeValue: EMPTY_FUNCTION,
                    registerOnChange: EMPTY_FUNCTION,
                    registerOnTouched: EMPTY_FUNCTION,
                },
            },
        ], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiMultiSelectGroupDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: false,
                    selector: '[tuiMultiSelectGroup]',
                    providers: [
                        tuiAsOptionContent(TUI_MULTI_SELECT_OPTION),
                        {
                            provide: TUI_DATA_LIST_HOST,
                            deps: [
                                NgControl,
                                [new Optional(), forwardRef(() => TuiMultiSelectComponent)],
                            ],
                            useFactory: (control, host) => host || {
                                handleOption: (option) => control.control?.setValue(tuiArrayToggle(control.value || [], option)),
                            },
                        },
                        {
                            provide: NG_VALUE_ACCESSOR,
                            multi: true,
                            useValue: {
                                writeValue: EMPTY_FUNCTION,
                                registerOnChange: EMPTY_FUNCTION,
                                registerOnTouched: EMPTY_FUNCTION,
                            },
                        },
                    ],
                }]
        }] });

class TuiNativeMultiSelectComponent extends AbstractTuiNativeMultiSelect {
    constructor() {
        super(...arguments);
        this.items = [];
    }
    onValueChange(selectedOptions) {
        const selected = Array.from(selectedOptions).map((option) => option.index);
        const value = this.items?.filter((_, index) => selected.includes(index)) || [];
        this.host.onSelectionChange(value);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiNativeMultiSelectComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiNativeMultiSelectComponent, selector: "select[multiple][tuiSelect]:not([labels])", inputs: { items: "items" }, host: { listeners: { "change": "onValueChange($event.target.selectedOptions)", "click.stop.silent": "0", "mousedown.stop.silent": "0" }, properties: { "attr.aria-invalid": "host.invalid", "disabled": "host.disabled || control.readOnly", "tabIndex": "host.focusable ? 0 : -1" } }, providers: [
            tuiAsDataList(TuiNativeMultiSelectComponent),
            tuiProvide(AbstractTuiNativeMultiSelect, TuiNativeMultiSelectComponent),
            {
                provide: TemplateRef,
                deps: [TuiNativeMultiSelectComponent],
                useFactory: ({ datalist }) => datalist,
            },
        ], usesInheritance: true, ngImport: i0, template: "<ng-container *ngIf=\"control.control?.valueChanges | async\" />\n\n<tui-data-list-wrapper\n    *tuiDataList\n    tuiMultiSelectGroup\n    [disabledItemHandler]=\"disabledItemHandler || host.disableItemHandler\"\n    [itemContent]=\"stringify | tuiStringifyContent\"\n    [items]=\"items\"\n/>\n<option\n    *ngFor=\"let option of items\"\n    [disabled]=\"disabledItemHandler ? disabledItemHandler(option) : host.disableItemHandler(option)\"\n    [selected]=\"option | tuiMapper: selectedMapper : control.value\"\n    [value]=\"stringify(option)\"\n>\n    {{ stringify(option) }}\n</option>\n", styles: [":host{position:absolute;top:0;left:0;inline-size:100%;block-size:100%;opacity:0}\n"], dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i2.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i2$2.TuiDataListDirective, selector: "ng-template[tuiDataList]" }, { kind: "component", type: i3$2.TuiDataListWrapperComponent, selector: "tui-data-list-wrapper:not([labels])", inputs: ["items", "disabledItemHandler", "emptyContent", "size", "itemContent"], outputs: ["itemClick"] }, { kind: "directive", type: TuiMultiSelectGroupDirective, selector: "[tuiMultiSelectGroup]" }, { kind: "pipe", type: i1.AsyncPipe, name: "async" }, { kind: "pipe", type: i6.TuiMapperPipe, name: "tuiMapper" }, { kind: "pipe", type: i7.TuiStringifyContentPipe, name: "tuiStringifyContent" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiNativeMultiSelectComponent, decorators: [{
            type: Component,
            args: [{ standalone: false, selector: 'select[multiple][tuiSelect]:not([labels])', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        tuiAsDataList(TuiNativeMultiSelectComponent),
                        tuiProvide(AbstractTuiNativeMultiSelect, TuiNativeMultiSelectComponent),
                        {
                            provide: TemplateRef,
                            deps: [TuiNativeMultiSelectComponent],
                            useFactory: ({ datalist }) => datalist,
                        },
                    ], host: {
                        '[attr.aria-invalid]': 'host.invalid',
                        '[disabled]': 'host.disabled || control.readOnly',
                        '[tabIndex]': 'host.focusable ? 0 : -1',
                        '(change)': 'onValueChange($event.target.selectedOptions)',
                        '(click.stop.silent)': '0',
                        '(mousedown.stop.silent)': '0',
                    }, template: "<ng-container *ngIf=\"control.control?.valueChanges | async\" />\n\n<tui-data-list-wrapper\n    *tuiDataList\n    tuiMultiSelectGroup\n    [disabledItemHandler]=\"disabledItemHandler || host.disableItemHandler\"\n    [itemContent]=\"stringify | tuiStringifyContent\"\n    [items]=\"items\"\n/>\n<option\n    *ngFor=\"let option of items\"\n    [disabled]=\"disabledItemHandler ? disabledItemHandler(option) : host.disableItemHandler(option)\"\n    [selected]=\"option | tuiMapper: selectedMapper : control.value\"\n    [value]=\"stringify(option)\"\n>\n    {{ stringify(option) }}\n</option>\n", styles: [":host{position:absolute;top:0;left:0;inline-size:100%;block-size:100%;opacity:0}\n"] }]
        }], propDecorators: { items: [{
                type: Input
            }] } });

class TuiNativeMultiSelectGroupComponent extends AbstractTuiNativeMultiSelect {
    constructor() {
        super(...arguments);
        this.items = [];
        this.labels = [];
    }
    onValueChange(selectedOptions) {
        const selected = Array.from(selectedOptions).map((option) => option.index);
        const flatItems = this.items?.reduce((acc, val) => acc.concat(val), []) || [];
        const value = flatItems.filter((_, index) => selected.includes(index));
        this.host.onSelectionChange(value);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiNativeMultiSelectGroupComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiNativeMultiSelectGroupComponent, selector: "select[multiple][tuiSelect][labels]", inputs: { items: "items", labels: "labels" }, host: { listeners: { "change": "onValueChange($event.target.selectedOptions)", "click.stop.silent": "0", "mousedown.stop.silent": "0" }, properties: { "attr.aria-invalid": "host.invalid", "disabled": "host.disabled || control.readOnly", "tabIndex": "host.focusable ? 0 : -1" } }, providers: [
            tuiAsDataList(TuiNativeMultiSelectGroupComponent),
            tuiProvide(AbstractTuiNativeMultiSelect, TuiNativeMultiSelectGroupComponent),
            {
                provide: TemplateRef,
                deps: [TuiNativeMultiSelectGroupComponent],
                useFactory: ({ datalist }) => datalist,
            },
        ], usesInheritance: true, ngImport: i0, template: "<ng-container *ngIf=\"control.control?.valueChanges | async\" />\n\n<tui-data-list-wrapper\n    *tuiDataList\n    tuiMultiSelectGroup\n    [disabledItemHandler]=\"disabledItemHandler || host.disableItemHandler\"\n    [itemContent]=\"stringify | tuiStringifyContent\"\n    [items]=\"items\"\n    [labels]=\"labels\"\n/>\n<optgroup\n    *ngFor=\"let group of items; let index = index\"\n    [label]=\"labels[index]\"\n>\n    <option\n        *ngFor=\"let option of group\"\n        [disabled]=\"disabledItemHandler ? disabledItemHandler(option) : host.disableItemHandler(option)\"\n        [selected]=\"option | tuiMapper: selectedMapper : control.value\"\n        [value]=\"stringify(option)\"\n    >\n        {{ stringify(option) }}\n    </option>\n</optgroup>\n", styles: [":host{position:absolute;top:0;left:0;inline-size:100%;block-size:100%;opacity:0}\n"], dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i2.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i2$2.TuiDataListDirective, selector: "ng-template[tuiDataList]" }, { kind: "component", type: i3$2.TuiDataListGroupWrapperComponent, selector: "tui-data-list-wrapper[labels]", inputs: ["labels"] }, { kind: "directive", type: TuiMultiSelectGroupDirective, selector: "[tuiMultiSelectGroup]" }, { kind: "pipe", type: i1.AsyncPipe, name: "async" }, { kind: "pipe", type: i6.TuiMapperPipe, name: "tuiMapper" }, { kind: "pipe", type: i7.TuiStringifyContentPipe, name: "tuiStringifyContent" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiNativeMultiSelectGroupComponent, decorators: [{
            type: Component,
            args: [{ standalone: false, selector: 'select[multiple][tuiSelect][labels]', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        tuiAsDataList(TuiNativeMultiSelectGroupComponent),
                        tuiProvide(AbstractTuiNativeMultiSelect, TuiNativeMultiSelectGroupComponent),
                        {
                            provide: TemplateRef,
                            deps: [TuiNativeMultiSelectGroupComponent],
                            useFactory: ({ datalist }) => datalist,
                        },
                    ], host: {
                        '[attr.aria-invalid]': 'host.invalid',
                        '[disabled]': 'host.disabled || control.readOnly',
                        '[tabIndex]': 'host.focusable ? 0 : -1',
                        '(change)': 'onValueChange($event.target.selectedOptions)',
                        '(click.stop.silent)': '0',
                        '(mousedown.stop.silent)': '0',
                    }, template: "<ng-container *ngIf=\"control.control?.valueChanges | async\" />\n\n<tui-data-list-wrapper\n    *tuiDataList\n    tuiMultiSelectGroup\n    [disabledItemHandler]=\"disabledItemHandler || host.disableItemHandler\"\n    [itemContent]=\"stringify | tuiStringifyContent\"\n    [items]=\"items\"\n    [labels]=\"labels\"\n/>\n<optgroup\n    *ngFor=\"let group of items; let index = index\"\n    [label]=\"labels[index]\"\n>\n    <option\n        *ngFor=\"let option of group\"\n        [disabled]=\"disabledItemHandler ? disabledItemHandler(option) : host.disableItemHandler(option)\"\n        [selected]=\"option | tuiMapper: selectedMapper : control.value\"\n        [value]=\"stringify(option)\"\n    >\n        {{ stringify(option) }}\n    </option>\n</optgroup>\n", styles: [":host{position:absolute;top:0;left:0;inline-size:100%;block-size:100%;opacity:0}\n"] }]
        }], propDecorators: { items: [{
                type: Input
            }], labels: [{
                type: Input
            }] } });

class TuiMultiSelectModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiMultiSelectModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.2.12", ngImport: i0, type: TuiMultiSelectModule, declarations: [TuiMultiSelectComponent,
            TuiMultiSelectGroupComponent,
            TuiMultiSelectGroupDirective,
            TuiHideSelectedPipe,
            TuiNativeMultiSelectComponent,
            TuiNativeMultiSelectGroupComponent,
            TuiMultiSelectDirective], imports: [CommonModule,
            FormsModule,
            PolymorpheusOutlet,
            PolymorpheusTemplate,
            TuiWrapperModule,
            TuiArrowComponent,
            TuiLet,
            TuiMapperPipe,
            TuiInputTagModule,
            TuiMultiSelectOptionModule,
            TuiMapperPipe,
            TuiLink,
            TuiTextfieldControllerModule,
            TuiStringifyContentPipe,
            TuiLegacyDropdownOpenMonitorDirective, i1$1.TuiDropdownOptionsDirective, i1$1.TuiDropdownDriverDirective, i1$1.TuiDropdownDirective, i1$1.TuiDropdownComponent, i1$1.TuiDropdownOpen, i1$1.TuiDropdownOpenLegacy, i1$1.TuiDropdownPortal, i1$1.TuiDropdownManual, i1$1.TuiDropdownHover, i1$1.TuiDropdownContext, i1$1.TuiDropdownPosition, i1$1.TuiDropdownPositionSided, i1$1.TuiDropdownSelection, i2$2.TuiDataListComponent, i2$2.TuiDataListDirective, i2$2.TuiOption, i2$2.TuiOptGroup, i3$2.TuiDataListWrapperComponent, i3$2.TuiDataListGroupWrapperComponent, i2$2.TuiDataListDirective], exports: [TuiMultiSelectComponent,
            TuiMultiSelectGroupComponent,
            TuiMultiSelectGroupDirective,
            TuiHideSelectedPipe,
            TuiMultiSelectDirective,
            TuiNativeMultiSelectComponent,
            TuiNativeMultiSelectGroupComponent, i1$1.TuiDropdownOptionsDirective, i1$1.TuiDropdownDriverDirective, i1$1.TuiDropdownDirective, i1$1.TuiDropdownComponent, i1$1.TuiDropdownOpen, i1$1.TuiDropdownOpenLegacy, i1$1.TuiDropdownPortal, i1$1.TuiDropdownManual, i1$1.TuiDropdownHover, i1$1.TuiDropdownContext, i1$1.TuiDropdownPosition, i1$1.TuiDropdownPositionSided, i1$1.TuiDropdownSelection, i2$2.TuiDataListComponent, i2$2.TuiDataListDirective, i2$2.TuiOption, i2$2.TuiOptGroup, i3$2.TuiDataListWrapperComponent, i3$2.TuiDataListGroupWrapperComponent, i2$2.TuiDataListDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiMultiSelectModule, imports: [CommonModule,
            FormsModule,
            TuiWrapperModule,
            TuiArrowComponent,
            TuiInputTagModule,
            TuiMultiSelectOptionModule,
            TuiTextfieldControllerModule, i1$1.TuiDropdownComponent, i2$2.TuiDataListComponent, i2$2.TuiOption, i3$2.TuiDataListWrapperComponent, i3$2.TuiDataListGroupWrapperComponent] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiMultiSelectModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        FormsModule,
                        PolymorpheusOutlet,
                        PolymorpheusTemplate,
                        TuiWrapperModule,
                        TuiArrowComponent,
                        TuiLet,
                        TuiMapperPipe,
                        TuiInputTagModule,
                        TuiMultiSelectOptionModule,
                        TuiMapperPipe,
                        TuiLink,
                        TuiTextfieldControllerModule,
                        TuiStringifyContentPipe,
                        TuiLegacyDropdownOpenMonitorDirective,
                        ...TuiDropdown,
                        ...TuiDataList,
                        ...TuiDataListWrapper,
                    ],
                    declarations: [
                        TuiMultiSelectComponent,
                        TuiMultiSelectGroupComponent,
                        TuiMultiSelectGroupDirective,
                        TuiHideSelectedPipe,
                        TuiNativeMultiSelectComponent,
                        TuiNativeMultiSelectGroupComponent,
                        TuiMultiSelectDirective,
                    ],
                    exports: [
                        TuiMultiSelectComponent,
                        TuiMultiSelectGroupComponent,
                        TuiMultiSelectGroupDirective,
                        TuiHideSelectedPipe,
                        TuiMultiSelectDirective,
                        TuiNativeMultiSelectComponent,
                        TuiNativeMultiSelectGroupComponent,
                        ...TuiDropdown,
                        ...TuiDataList,
                        ...TuiDataListWrapper,
                    ],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { AbstractTuiNativeMultiSelect, TUI_MULTI_SELECT_DEFAULT_OPTIONS, TUI_MULTI_SELECT_OPTION, TUI_MULTI_SELECT_OPTIONS, TuiHideSelectedPipe, TuiMultiSelectComponent, TuiMultiSelectDirective, TuiMultiSelectGroupComponent, TuiMultiSelectGroupDirective, TuiMultiSelectModule, TuiNativeMultiSelectComponent, TuiNativeMultiSelectGroupComponent, tuiMultiSelectOptionsProvider };
//# sourceMappingURL=taiga-ui-legacy-components-multi-select.mjs.map
