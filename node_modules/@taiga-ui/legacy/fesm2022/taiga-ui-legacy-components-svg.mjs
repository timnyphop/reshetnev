import { tuiIsString, tuiCreateTokenFromFactory, tuiPure } from '@taiga-ui/cdk/utils/miscellaneous';
import { __decorate } from 'tslib';
import { DOCUMENT, AsyncPipe, NgIf } from '@angular/common';
import * as i0 from '@angular/core';
import { inject, SecurityContext, Injectable, InjectionToken, SkipSelf, Optional, Component, ChangeDetectionStrategy, Input } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { WA_WINDOW } from '@ng-web-apis/common';
import { TuiLet } from '@taiga-ui/cdk/directives/let';
import { TUI_BASE_HREF } from '@taiga-ui/cdk/tokens';
import { tuiInjectElement, tuiGetDocumentOrShadowRoot } from '@taiga-ui/cdk/utils/dom';
import { TuiStaticRequestService } from '@taiga-ui/legacy/services';
import { TUI_SANITIZER, TUI_ICON_STARTS } from '@taiga-ui/legacy/tokens';
import { tuiProcessIcon, tuiIconsPathFactory, TUI_CACHE_BUSTING_PAYLOAD, tuiIsPresumedHTMLString } from '@taiga-ui/legacy/utils';
import { BehaviorSubject, identity, ReplaySubject, switchMap, of, startWith, catchError, map } from 'rxjs';

function makeRandomSalt() {
    return Math.floor(Math.random() * Date.now());
}
function extractLinearGradientIdsFromSvg(svg) {
    const ids = (svg.match(/url\(("?)('*)#(.*?)('*)\)/g) ?? []).map((url) => url.slice(4, url.length - 1).replaceAll(/['"#]+/g, ''));
    return Array.from(new Set(ids));
}
/**
 * @deprecated: drop in v5.0 use {@link TuiIcon}
 * https://taiga-ui.dev/components/icon
 *
 * @description:
 * Any ‘linearGradient’ attributes which are defined on the referenced
 * element which are not defined on this element are inherited by this element.
 * If this element has no defined gradient stops, and the referenced element does
 * (possibly due to its own ‘xlink:href’ attribute), then this element inherits
 * the gradient stop from the referenced element. Inheritance can be indirect
 * to an arbitrary level; thus, if the referenced element inherits attribute
 * or gradient stops due to its own ‘xlink:href’ attribute, then the current
 * element can inherit those attributes or gradient stops.
 *
 * Documentation: https://www.w3.org/TR/SVG11/pservers.html
 *
 */
function tuiSvgLinearGradientProcessor(svg, salt = makeRandomSalt()) {
    if (tuiIsString(svg)) {
        const uniqueIds = extractLinearGradientIdsFromSvg(svg);
        return uniqueIds.reduce((newSvg, previousId) => {
            const newId = `id_${salt}_${previousId}`;
            return newSvg
                .replaceAll(`"${previousId}"`, `"${newId}"`)
                .replaceAll(`'${previousId}'`, `'${newId}'`)
                .replaceAll(`url('#${previousId}')`, `url('#${newId}')`)
                .replaceAll(`url("#${previousId}")`, `url("#${newId}")`)
                .replaceAll(`url(#${previousId})`, `url(#${newId})`);
        }, svg);
    }
    return svg;
}

/**
 * @deprecated: drop in v5.0 use {@link TuiIcon}
 * https://taiga-ui.dev/components/icon
 */
const TUI_DEPRECATED_ICONS = {
    tuiIconAttach: 'tuiIconPaperclip',
    tuiIconAttention: 'tuiIconAlertCircle',
    tuiIconBackCircle: 'tuiIconArrowLeftCircle',
    tuiIconCall: 'tuiIconPhone',
    tuiIconCallIn: 'tuiIconPhoneIncoming',
    tuiIconCallOut: 'tuiIconPhoneOutgoing',
    tuiIconCallTransfer: 'tuiIconPhoneForwarded',
    tuiIconCancel: 'tuiIconXCircle',
    tuiIconCancelCircle: 'tuiIconSlash',
    tuiIconCard: 'tuiIconCreditCard',
    tuiIconCards: 'tuiIconCreditCard',
    tuiIconChartBar: 'tuiIconBarChart',
    tuiIconChart: 'tuiIconBarChart',
    tuiIconCheckList: 'tuiIconClipboard',
    tuiIconCloseCircle: 'tuiIconXCircle',
    tuiIconCollapse: 'tuiIconMinimize',
    tuiIconComment: 'tuiIconMessageSquare',
    tuiIconCommentFw: 'tuiIconMessageForward',
    tuiIconCompany: 'tuiIconBriefcase',
    tuiIconDefaultDoc: 'tuiIconFile',
    tuiIconDesktop: 'tuiIconMonitor',
    tuiIconDesktopOff: 'tuiIconMonitorOff',
    tuiIconDislike: 'tuiIconThumbsDown',
    tuiIconDone: 'tuiIconCheckCircle',
    tuiIconDraft: 'tuiIconEdit2',
    tuiIconEyeOpen: 'tuiIconEye',
    tuiIconEyeClosed: 'tuiIconEyeOff',
    tuiIconExpand: 'tuiIconMaximize',
    tuiIconExternal: 'tuiIconExternalLink',
    tuiIconFrame: 'tuiIconLayout',
    tuiIconGeo: 'tuiIconMapPin',
    tuiIconHeartFilled: 'tuiIconHeart',
    tuiIconHide: 'tuiIconEyeOff',
    tuiIconImg: 'tuiIconImage',
    tuiIconInfoCircle: 'tuiIconInfo',
    tuiIconLike: 'tuiIconThumbsUp',
    tuiIconLockOpen: 'tuiIconUnlock',
    tuiIconMobile: 'tuiIconSmartphone',
    tuiIconMoreHor: 'tuiIconMoreHorizontal',
    tuiIconMoreVer: 'tuiIconMoreVertical',
    tuiIconMoreVert: 'tuiIconMoreVertical',
    tuiIconPicture: 'tuiIconImage',
    tuiIconPin: 'tuiIconMapPin',
    tuiIconPrint: 'tuiIconPrinter',
    tuiIconRefresh: 'tuiIconRefreshCw',
    tuiIconRemove: 'tuiIconX',
    tuiIconShow: 'tuiIconEye',
    tuiIconSound: 'tuiIconVolume',
    tuiIconSoundOff: 'tuiIconVolumeX',
    tuiIconStarFilled: 'tuiIconStar',
    tuiIconStop: 'tuiIconSquare',
    tuiIconStructure: 'tuiIconLayoutGrid',
    tuiIconTime: 'tuiIconClock',
    tuiIconTooltip: 'tuiIconHelpCircle',
    tuiIconViewList: 'tuiIconList',
    tuiIconWifiOn: 'tuiIconWifi',
};

/// <reference types="@taiga-ui/tsconfig/ng-dev-mode" />
/// <reference types="@taiga-ui/tsconfig/ng-dev-mode" />
/**
 * @deprecated: drop in v5.0 use {@link TuiIcon}
 * Service for reusing SVGs without inlining each instance
 */
class TuiSvgService {
    constructor() {
        this.tuiSanitizer = inject(TUI_SANITIZER, { optional: true });
        this.sanitizer = inject(DomSanitizer);
        this.originals = {};
        this.items$ = new BehaviorSubject(new Map());
        this.define(inject(TUI_ICON_STARTS));
    }
    define(icons) {
        const { value } = this.items$;
        Object.keys(icons).forEach((key) => {
            this.defineIcon(key, icons[key] ?? '', value);
        });
        this.items$.next(value);
    }
    getOriginal(name) {
        return this.originals[name] || null;
    }
    defineIcon(name, src, map) {
        if (map.has(name)) {
            return;
        }
        const parsed = this.parseSrc(name, src);
        if (!parsed) {
            ngDevMode && console.assert(false, 'Unable to parse given SVG src');
            return;
        }
        map.set(name, parsed);
        this.originals = {
            ...this.originals,
            [name]: src,
        };
    }
    parseSrc(name, src) {
        return this.sanitize(tuiProcessIcon(src, name));
    }
    sanitize(src) {
        return this.sanitizer.bypassSecurityTrustHtml((this.tuiSanitizer
            ? this.tuiSanitizer.sanitize(SecurityContext.HTML, src)
            : this.sanitizer.sanitize(SecurityContext.HTML, src)) || '');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSvgService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSvgService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSvgService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return []; } });

/**
 * @deprecated: drop in v5.0 use {@link TuiIcon}
 * https://taiga-ui.dev/components/icon
 */
const TUI_DEFAULT_ICONS_PLACE = 'assets/taiga-ui/icons';
/**
 * @deprecated: drop in v5.0 use {@link TuiIcon}
 * https://taiga-ui.dev/components/icon
 */
const TUI_SVG_DEFAULT_OPTIONS = {
    iconsPlace: TUI_DEFAULT_ICONS_PLACE,
    path: tuiIconsPathFactory(TUI_DEFAULT_ICONS_PLACE),
    srcProcessor: identity,
    contentProcessor: tuiSvgLinearGradientProcessor,
    deprecated: (src) => {
        const oldIcon = src.replace('Large', '').replace('Outline', '');
        const newIcon = TUI_DEPRECATED_ICONS[oldIcon];
        return newIcon
            ? `${oldIcon}/(Large|Outline) is deprecated, use ${newIcon}/(Large|Outline) instead`
            : '';
    },
};
/**
 * @deprecated: drop in v5.0 use {@link TuiIcon}
 * https://taiga-ui.dev/components/icon
 */
const TUI_SVG_OPTIONS = tuiCreateTokenFromFactory(() => ({
    iconsPlace: TUI_DEFAULT_ICONS_PLACE,
    path: tuiIconsPathFactory(TUI_DEFAULT_ICONS_PLACE),
    deprecated: TUI_SVG_DEFAULT_OPTIONS.deprecated,
    srcProcessor: identity,
    contentProcessor: tuiSvgLinearGradientProcessor,
}));
/**
 * @deprecated: drop in v5.0 use {@link TuiIcon}
 * https://taiga-ui.dev/components/icon
 */
const TUI_SVG_SRC_INTERCEPTORS = new InjectionToken('[TUI_SVG_SRC_INTERCEPTORS]');
/**
 * @deprecated: drop in v5.0 use {@link TuiIcon}
 * https://taiga-ui.dev/components/icon
 */
function tuiSvgSrcInterceptors(interceptor) {
    return {
        provide: TUI_SVG_SRC_INTERCEPTORS,
        useValue: interceptor,
        multi: true,
    };
}
/**
 * @deprecated: drop in v5.0 use {@link TuiIcon}
 * https://taiga-ui.dev/components/icon
 */
const tuiSvgOptionsProvider = (options) => ({
    provide: TUI_SVG_OPTIONS,
    deps: [[new SkipSelf(), new Optional(), TUI_SVG_OPTIONS]],
    useFactory: (fallback) => ({
        iconsPlace: options.iconsPlace ??
            fallback?.iconsPlace ??
            TUI_SVG_DEFAULT_OPTIONS.iconsPlace,
        path: tuiIsString(options.path)
            ? tuiIconsPathFactory(options.path)
            : (options.path ?? fallback?.path ?? TUI_SVG_DEFAULT_OPTIONS.path),
        deprecated: options.deprecated ??
            fallback?.deprecated ??
            TUI_SVG_DEFAULT_OPTIONS.deprecated,
        srcProcessor: options.srcProcessor ??
            fallback?.srcProcessor ??
            TUI_SVG_DEFAULT_OPTIONS.srcProcessor,
        contentProcessor: options.contentProcessor ??
            fallback?.contentProcessor ??
            TUI_SVG_DEFAULT_OPTIONS.contentProcessor,
    }),
});

const UNDEFINED_NAMED_ICON = 'Attempted to use undefined named icon';
const MISSING_EXTERNAL_ICON = 'External icon is missing on the given URL';
const FAILED_EXTERNAL_ICON = 'Failed to load external SVG';
/**
 * @deprecated: drop in v5.0 use {@link TuiIcon}
 * https://taiga-ui.dev/components/icon
 */
class TuiSvgComponent {
    constructor() {
        this.icon = '';
        this.doc = inject(DOCUMENT);
        this.win = inject(WA_WINDOW);
        this.options = inject(TUI_SVG_OPTIONS);
        this.tuiSanitizer = inject(TUI_SANITIZER, { optional: true });
        this.svgService = inject(TuiSvgService);
        this.staticRequestService = inject(TuiStaticRequestService);
        this.sanitizer = inject(DomSanitizer);
        this.el = tuiInjectElement();
        this.baseHref = inject(TUI_BASE_HREF);
        this.src$ = new ReplaySubject(1);
        this.srcInterceptors = inject(TUI_SVG_SRC_INTERCEPTORS, {
            optional: true,
        });
        this.innerHTML$ = this.src$.pipe(switchMap(() => {
            if (tuiIsString(this.icon)) {
                return this.isExternal
                    ? this.getExternalIcon(this.icon)
                    : of(this.getSafeHtml(this.icon));
            }
            return of(this.icon);
        }), startWith(''));
    }
    set src(src) {
        const deprecated = this.options.deprecated(String(src));
        ngDevMode && console.assert(!deprecated, deprecated);
        this.icon = (this.srcInterceptors ?? []).reduce((newSrc, interceptor) => interceptor(newSrc, this.options), this.options.srcProcessor(src || ''));
        this.src$.next();
    }
    get src() {
        return this.icon;
    }
    get use() {
        if (tuiIsString(this.icon)) {
            return this.icon.includes('.svg#')
                ? this.icon
                : this.resolveName(this.icon, this.options.path);
        }
        return '';
    }
    get isInnerHTML() {
        return (!tuiIsString(this.icon) ||
            this.isSrc ||
            this.isExternal ||
            (this.isName && this.isShadowDOM));
    }
    onError(message = MISSING_EXTERNAL_ICON) {
        const { icon } = this;
        const event = new CustomEvent('tui-icon-error', {
            bubbles: true,
            detail: {
                message,
                icon: icon,
            },
        });
        ngDevMode && console.assert(false, message, icon);
        this.el.dispatchEvent(event);
    }
    get isShadowDOM() {
        return tuiGetDocumentOrShadowRoot(this.el) !== this.doc;
    }
    get isUse() {
        return this.use.replace(TUI_CACHE_BUSTING_PAYLOAD, '').includes('.svg#');
    }
    get isExternal() {
        return (this.isUrl ||
            this.isCrossDomain ||
            (!this.isSrc && !this.svgService.getOriginal(String(this.icon))));
    }
    get isUrl() {
        return (tuiIsString(this.icon) &&
            this.icon.replace(TUI_CACHE_BUSTING_PAYLOAD, '').endsWith('.svg'));
    }
    get isSrc() {
        return tuiIsString(this.icon) && tuiIsPresumedHTMLString(this.icon);
    }
    get isName() {
        return !this.isUrl && !this.isUse && !this.isSrc;
    }
    get isCrossDomain() {
        const { use, isUse, win } = this;
        return (isUse && use.startsWith('http') && !!win.origin && !use.startsWith(win.origin));
    }
    resolveName(name, iconsPath) {
        return iconsPath(name, this.baseHref);
    }
    getSafeHtml(src) {
        return this.isSrc ? this.sanitize(src) : this.process(src);
    }
    process(src) {
        const icon = this.svgService.getOriginal(src);
        if (this.isName && !icon && !!src) {
            this.onError(UNDEFINED_NAMED_ICON);
        }
        return this.sanitize(icon || '');
    }
    sanitize(src) {
        src = this.options.contentProcessor(src);
        return this.tuiSanitizer && tuiIsString(src)
            ? this.sanitizer.bypassSecurityTrustHtml(this.tuiSanitizer.sanitize(SecurityContext.HTML, src) || '')
            : src;
    }
    getExternalIcon(src) {
        const url = src.includes('.svg') ? src : this.use;
        return this.staticRequestService.request(url).pipe(catchError(() => {
            this.onError(FAILED_EXTERNAL_ICON);
            return of('');
        }), map((response) => this.sanitize(response.replace('<svg', '<svg focusable="false"'))));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSvgComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiSvgComponent, isStandalone: true, selector: "tui-svg", inputs: { src: "src" }, ngImport: i0, template: "<div\n    class=\"t-src\"\n    [innerHTML]=\"innerHTML$ | async\"\n></div>\n", styles: [":host{display:inline-flex;vertical-align:middle;flex-shrink:0;align-items:center;justify-content:center;line-height:0;block-size:1.5rem;inline-size:1.5rem;fill:transparent;stroke:transparent;font-size:1rem}.t-src{display:flex;inline-size:100%;block-size:100%;align-items:center;justify-content:center}.t-svg{overflow:visible}\n"], dependencies: [{ kind: "pipe", type: AsyncPipe, name: "async" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
__decorate([
    tuiPure
], TuiSvgComponent.prototype, "resolveName", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSvgComponent, decorators: [{
            type: Component,
            args: [{ standalone: true, selector: 'tui-svg', imports: [TuiLet, AsyncPipe, NgIf], changeDetection: ChangeDetectionStrategy.OnPush, template: "<div\n    class=\"t-src\"\n    [innerHTML]=\"innerHTML$ | async\"\n></div>\n", styles: [":host{display:inline-flex;vertical-align:middle;flex-shrink:0;align-items:center;justify-content:center;line-height:0;block-size:1.5rem;inline-size:1.5rem;fill:transparent;stroke:transparent;font-size:1rem}.t-src{display:flex;inline-size:100%;block-size:100%;align-items:center;justify-content:center}.t-svg{overflow:visible}\n"] }]
        }], ctorParameters: function () { return []; }, propDecorators: { src: [{
                type: Input
            }], resolveName: [] } });

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_DEFAULT_ICONS_PLACE, TUI_DEPRECATED_ICONS, TUI_SVG_DEFAULT_OPTIONS, TUI_SVG_OPTIONS, TUI_SVG_SRC_INTERCEPTORS, TuiSvgComponent, TuiSvgService, tuiSvgLinearGradientProcessor, tuiSvgOptionsProvider, tuiSvgSrcInterceptors };
//# sourceMappingURL=taiga-ui-legacy-components-svg.mjs.map
