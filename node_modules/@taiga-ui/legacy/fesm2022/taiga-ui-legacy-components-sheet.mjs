import { __decorate } from 'tslib';
import * as i0 from '@angular/core';
import { InjectionToken, inject, Component, ChangeDetectionStrategy, ElementRef, NgZone, forwardRef, Directive, Input, DestroyRef, ViewChild, ViewChildren, Injectable, ContentChild, Output, ChangeDetectorRef, NgModule, NO_ERRORS_SCHEMA } from '@angular/core';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { TUI_TRUE_HANDLER, TUI_FALSE_HANDLER, EMPTY_QUERY } from '@taiga-ui/cdk/constants';
import { tuiTypedFromEvent, tuiZonefree, tuiZonefull, tuiIfMap } from '@taiga-ui/cdk/observables';
import { TUI_IS_IOS, TUI_WINDOW_SIZE } from '@taiga-ui/cdk/tokens';
import { tuiInjectElement, tuiIsHTMLElement } from '@taiga-ui/cdk/utils/dom';
import { tuiProvide, tuiPure, tuiCreateToken, tuiIsFalsy } from '@taiga-ui/cdk/utils/miscellaneous';
import { tuiSlideInTop, tuiFadeIn } from '@taiga-ui/core/animations';
import { TUI_MORE_WORD } from '@taiga-ui/kit/tokens';
import { merge, map, share, delay, switchMap, concat, zip, takeUntil, take, distinctUntilChanged, withLatestFrom, filter, throttleTime, timer, BehaviorSubject, Observable, EMPTY, race, debounceTime, startWith, Subject, ignoreElements, endWith } from 'rxjs';
import { tuiInjectId } from '@taiga-ui/cdk/services';
import { TUI_CLOSE_WORD, TUI_COMMON_ICONS, TUI_SCROLL_REF, TUI_ANIMATIONS_SPEED } from '@taiga-ui/core/tokens';
import * as i1 from '@taiga-ui/core/components/button';
import { TuiButton } from '@taiga-ui/core/components/button';
import * as i1$1 from '@angular/common';
import { DOCUMENT, CommonModule } from '@angular/common';
import * as i2$1 from '@taiga-ui/polymorpheus';
import { PolymorpheusTemplate, PolymorpheusOutlet } from '@taiga-ui/polymorpheus';
import { tuiClamp } from '@taiga-ui/cdk/utils/math';
import * as i2 from '@taiga-ui/cdk/directives/let';
import { TuiLet } from '@taiga-ui/cdk/directives/let';
import { WA_WINDOW } from '@ng-web-apis/common';
import { tuiToAnimationOptions } from '@taiga-ui/core/utils/miscellaneous';
import { tuiGetNativeFocused } from '@taiga-ui/cdk/utils/focus';
import { TuiScrollbar } from '@taiga-ui/core/components/scrollbar';

/**
 * @deprecated: drop in v5.0 use {@link TuiSheetDialog}
 * https://taiga-ui.dev/components/sheet-dialog
 */
const TUI_SHEET = new InjectionToken('[TUI_SHEET]');
/**
 * @deprecated: drop in v5.0 use {@link TuiSheetDialog}
 * https://taiga-ui.dev/components/sheet-dialog
 */
const TUI_SHEET_SCROLL = new InjectionToken('[TUI_SHEET_SCROLL]');
/**
 * @deprecated: drop in v5.0 use {@link TuiSheetDialog}
 * https://taiga-ui.dev/components/sheet-dialog
 */
const TUI_SHEET_DRAGGED = new InjectionToken('[TUI_SHEET_DRAGGED]');

const TUI_SHEET_CLOSE = 'tui-sheet-close';
const TUI_SHEET_ID = 'tui-sheet-id';
class TuiSheetHeadingComponent {
    constructor() {
        this.el = tuiInjectElement();
        this.closeWord$ = inject(TUI_CLOSE_WORD);
        this.icons = inject(TUI_COMMON_ICONS);
        this.autoId = tuiInjectId();
    }
    ngAfterViewInit() {
        this.el.dispatchEvent(new CustomEvent(TUI_SHEET_ID, { bubbles: true, detail: this.autoId }));
    }
    onClick() {
        this.el.dispatchEvent(new CustomEvent(TUI_SHEET_CLOSE, { bubbles: true }));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSheetHeadingComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiSheetHeadingComponent, selector: "[tuiSheetHeading]", ngImport: i0, template: "<button\n    appearance=\"icon\"\n    size=\"xs\"\n    tuiIconButton\n    type=\"button\"\n    class=\"t-close\"\n    [iconStart]=\"icons.close\"\n    (click)=\"onClick()\"\n>\n    {{ closeWord$ | async }}\n</button>\n<span [id]=\"autoId\">\n    <ng-content />\n</span>\n", styles: [":host{position:sticky;top:0;z-index:1;min-block-size:2rem;box-sizing:border-box;margin:-1.25rem -1rem 0;padding:1.5rem 1rem 1rem;background:var(--tui-background-elevation-1);border-radius:.75rem .75rem 0 0;font:var(--tui-font-heading-6);box-shadow:inset 0 1px #ffffff40}:host:after{content:\"\";position:absolute;top:100%;left:0;right:0;block-size:1px;background:var(--tui-border-normal);opacity:0}:host :host-context(._stuck):after{opacity:1}.t-close{display:none;float:inline-end;margin-right:-.25rem}:host-context(.t-wrapper_closeable) .t-close{display:block}\n"], dependencies: [{ kind: "directive", type: i1.TuiButton, selector: "a[tuiButton],button[tuiButton],a[tuiIconButton],button[tuiIconButton]", inputs: ["size"] }, { kind: "pipe", type: i1$1.AsyncPipe, name: "async" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSheetHeadingComponent, decorators: [{
            type: Component,
            args: [{ standalone: false, selector: '[tuiSheetHeading]', changeDetection: ChangeDetectionStrategy.OnPush, template: "<button\n    appearance=\"icon\"\n    size=\"xs\"\n    tuiIconButton\n    type=\"button\"\n    class=\"t-close\"\n    [iconStart]=\"icons.close\"\n    (click)=\"onClick()\"\n>\n    {{ closeWord$ | async }}\n</button>\n<span [id]=\"autoId\">\n    <ng-content />\n</span>\n", styles: [":host{position:sticky;top:0;z-index:1;min-block-size:2rem;box-sizing:border-box;margin:-1.25rem -1rem 0;padding:1.5rem 1rem 1rem;background:var(--tui-background-elevation-1);border-radius:.75rem .75rem 0 0;font:var(--tui-font-heading-6);box-shadow:inset 0 1px #ffffff40}:host:after{content:\"\";position:absolute;top:100%;left:0;right:0;block-size:1px;background:var(--tui-border-normal);opacity:0}:host :host-context(._stuck):after{opacity:1}.t-close{display:none;float:inline-end;margin-right:-.25rem}:host-context(.t-wrapper_closeable) .t-close{display:block}\n"] }]
        }] });

const TUI_SHEET_PROVIDERS = [
    {
        provide: TUI_SHEET_DRAGGED,
        deps: [ElementRef],
        useFactory: ({ nativeElement }) => merge(tuiTypedFromEvent(nativeElement, 'touchstart', { passive: true }).pipe(map(TUI_TRUE_HANDLER)), tuiTypedFromEvent(nativeElement, 'touchend').pipe(map(TUI_FALSE_HANDLER))),
    },
    {
        provide: TUI_SHEET_SCROLL,
        deps: [ElementRef, NgZone, DOCUMENT, TUI_IS_IOS],
        useFactory: ({ nativeElement }, zone, doc, isIos) => isIos
            ? iosScrollFactory(nativeElement, doc, zone)
            : merge(tuiTypedFromEvent(nativeElement, 'scroll'), tuiTypedFromEvent(nativeElement, 'load', { capture: true })).pipe(map(() => nativeElement.scrollTop), tuiZonefree(zone), share()),
    },
    tuiProvide(TUI_SCROLL_REF, ElementRef),
    tuiProvide(TUI_SHEET, forwardRef(() => TuiSheetComponent)),
];
function iosScrollFactory(element, doc, zone) {
    const load$ = tuiTypedFromEvent(element, 'load', { capture: true });
    const touchstart$ = tuiTypedFromEvent(element, 'touchstart', { passive: true });
    const touchmove$ = tuiTypedFromEvent(doc, 'touchmove', { passive: true });
    const touchend$ = tuiTypedFromEvent(doc, 'touchend');
    const scroll$ = tuiTypedFromEvent(element, 'scroll').pipe(map(() => element.scrollTop));
    const result$ = merge(load$.pipe(delay(0), map(() => element.scrollTop)), touchstart$.pipe(switchMap(({ touches }) => {
        const { screenY = 0 } = touches[0] ?? {};
        const { scrollTop } = element;
        return concat(
        // Sometimes touch is triggered without scroll in iOS, filter that
        zip(touchmove$, scroll$).pipe(map(([{ touches }]) => scrollTop + screenY - (touches[0]?.screenY ?? 0)), takeUntil(touchend$)), scroll$);
    })));
    return concat(scroll$.pipe(take(1)), result$).pipe(tuiZonefree(zone), share());
}

class TuiSheetBarComponent {
    constructor() {
        this.sheet = inject(TUI_SHEET);
        this.scroll$ = inject(TUI_SHEET_SCROLL);
        this.zone = inject(NgZone);
        this.rotate$ = this.scroll$.pipe(map((y) => tuiClamp(10 - (y - this.stop) / 5, 0, 10)), distinctUntilChanged(), tuiZonefull(this.zone));
    }
    get stop() {
        return this.sheet.stops[0] || 0;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSheetBarComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiSheetBarComponent, selector: "tui-sheet-bar", ngImport: i0, template: "<ng-container *tuiLet=\"rotate$ | async as deg\">\n    <div\n        class=\"t-bar\"\n        [ngStyle]=\"{transform: 'rotate(-' + deg + 'deg)'}\"\n    ></div>\n    <ng-content *ngIf=\"deg\" />\n    <div\n        class=\"t-bar\"\n        [ngStyle]=\"{transform: 'rotate(' + deg + 'deg)'}\"\n    ></div>\n</ng-container>\n", styles: [":host{transition-property:border-radius;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;position:sticky;top:0;z-index:2;display:flex;block-size:1.25rem;align-items:center;justify-content:center;opacity:.3}.t-bar{content:\"\";block-size:.25rem;inline-size:1rem;background:var(--tui-text-primary);pointer-events:none}:host-context(._ios:not(._dragged)) .t-bar{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out}.t-bar:first-child{border-radius:1rem 0 0 1rem;transform-origin:top right}.t-bar:last-child{border-radius:0 1rem 1rem 0;transform-origin:top left}\n"], dependencies: [{ kind: "directive", type: i1$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1$1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "directive", type: i2.TuiLet, selector: "[tuiLet]", inputs: ["tuiLet"] }, { kind: "pipe", type: i1$1.AsyncPipe, name: "async" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSheetBarComponent, decorators: [{
            type: Component,
            args: [{ standalone: false, selector: 'tui-sheet-bar', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-container *tuiLet=\"rotate$ | async as deg\">\n    <div\n        class=\"t-bar\"\n        [ngStyle]=\"{transform: 'rotate(-' + deg + 'deg)'}\"\n    ></div>\n    <ng-content *ngIf=\"deg\" />\n    <div\n        class=\"t-bar\"\n        [ngStyle]=\"{transform: 'rotate(' + deg + 'deg)'}\"\n    ></div>\n</ng-container>\n", styles: [":host{transition-property:border-radius;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;position:sticky;top:0;z-index:2;display:flex;block-size:1.25rem;align-items:center;justify-content:center;opacity:.3}.t-bar{content:\"\";block-size:.25rem;inline-size:1rem;background:var(--tui-text-primary);pointer-events:none}:host-context(._ios:not(._dragged)) .t-bar{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out}.t-bar:first-child{border-radius:1rem 0 0 1rem;transform-origin:top right}.t-bar:last-child{border-radius:0 1rem 1rem 0;transform-origin:top left}\n"] }]
        }] });

// So that borders get rounded when image is visible for at least 10px
const OFFSET$1 = 10;
class TuiSheetTopDirective {
    constructor() {
        this.scroll$ = inject(TUI_SHEET_SCROLL);
        this.component = inject(TUI_SHEET);
        this.win = inject(WA_WINDOW);
        this.el = tuiInjectElement();
        this.rounded$ = this.scroll$
            .pipe(map((y) => y < this.stop + OFFSET$1))
            .pipe(takeUntilDestroyed())
            .subscribe((add) => add
            ? this.el.classList.add('_rounded')
            : this.el.classList.remove('_rounded'));
        this.transform$ = this.scroll$
            .pipe(map((y) => `translateY(${this.getY(y)}%) scaleX(-1)`), takeUntilDestroyed())
            .subscribe((transform) => this.el.style.setProperty('transform', transform));
        this.clickthrough$ = this.scroll$
            .pipe(map((y) => !!Math.round(this.getY(y))), takeUntilDestroyed())
            .subscribe((add) => add
            ? this.el.classList.add('_clickthrough')
            : this.el.classList.remove('_clickthrough'));
        this.stop = 0;
    }
    getY(scrollTop) {
        const value = scrollTop - this.stop;
        const total = this.win.innerHeight - this.component.item.offset - this.stop;
        return this.stop && tuiClamp(100 - (value / total) * 100, 0, 100);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSheetTopDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiSheetTopDirective, selector: "[tuiSheetTop]", inputs: { stop: ["tuiSheetTop", "stop"] }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSheetTopDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: false,
                    selector: '[tuiSheetTop]',
                }]
        }], propDecorators: { stop: [{
                type: Input,
                args: ['tuiSheetTop']
            }] } });

class TuiSheetStopDirective {
    constructor() {
        const scrollRef = inject(TUI_SCROLL_REF).nativeElement;
        const destroyRef = inject(DestroyRef);
        const el = tuiInjectElement();
        inject(TUI_SHEET_SCROLL)
            .pipe(map((y) => Math.floor(y) > el.offsetTop), distinctUntilChanged(), withLatestFrom(inject(TUI_SHEET_DRAGGED)), map(([above, dragged]) => !above && !dragged), filter(Boolean), throttleTime(100), takeUntilDestroyed(destroyRef))
            .subscribe(() => {
            scrollRef.style.overflow = 'hidden';
            scrollRef.classList.remove('_stuck'); // iOS
            scrollRef.scrollTop = el.offsetTop;
            timer(100)
                .pipe(takeUntilDestroyed(destroyRef))
                // eslint-disable-next-line rxjs/no-nested-subscribe
                .subscribe(() => {
                scrollRef.style.overflow = '';
            });
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSheetStopDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiSheetStopDirective, selector: "[tuiSheetStop]", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSheetStopDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: false,
                    selector: '[tuiSheetStop]',
                }]
        }], ctorParameters: function () { return []; } });

class TuiSheetComponent {
    constructor() {
        this.stopsRefs = EMPTY_QUERY;
        this.destroyRef = inject(DestroyRef);
        this.scroll$ = inject(TUI_SHEET_SCROLL);
        this.el = tuiInjectElement();
        this.zone = inject(NgZone);
        this.id = '';
        this.isIos = inject(TUI_IS_IOS);
        this.moreWord$ = inject(TUI_MORE_WORD);
        this.stuck$ = this.scroll$.pipe(map((y) => Math.floor(y) > this.contentTop));
        this.stuck$$ = this.stuck$
            .pipe(takeUntilDestroyed())
            .subscribe((add) => add ? this.el.classList.add('_stuck') : this.el.classList.remove('_stuck'));
    }
    get context() {
        return {
            ...this.item,
            scroll$: this.scroll$.pipe(tuiZonefull(this.zone)),
        };
    }
    get stops() {
        return this.getStops(this.stopsRefs);
    }
    get imageStop() {
        return (this.item.imageSlide && this.stops[this.stops.length - 1]) || 0;
    }
    get imageHeight() {
        return this.contentTop - this.sheetTop;
    }
    ngAfterViewInit() {
        this.el.scrollTop =
            [...this.stops, this.sheetTop, this.contentTop][this.item.initial] ?? 0;
    }
    onId(id) {
        this.id = id;
    }
    scrollTo(top = this.sheetTop) {
        if (this.isIos) {
            const offset = top - this.el.scrollTop - 16;
            this.el.style.transition = 'none';
            this.el.style.transform = `scaleX(-1) translate3d(0, ${offset}px, 0)`;
            timer(0)
                .pipe(takeUntilDestroyed(this.destroyRef))
                .subscribe(() => {
                this.el.style.transition = '';
                this.el.style.transform = '';
            });
        }
        this.el.scrollTo({ top, behavior: 'smooth' });
    }
    close() {
        if (this.context.closeable) {
            this.context.$implicit.complete();
        }
    }
    get contentTop() {
        return this.content?.nativeElement.offsetTop ?? Infinity;
    }
    get sheetTop() {
        return this.sheet?.nativeElement.offsetTop ?? Infinity;
    }
    getStops(stops) {
        return stops.map(({ nativeElement }) => nativeElement.offsetTop + nativeElement.clientHeight);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSheetComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiSheetComponent, selector: "tui-sheet", inputs: { item: "item" }, host: { attributes: { "role": "dialog" }, listeners: { "tui-sheet-id": "onId($event.detail)" }, properties: { "attr.aria-labelledby": "id", "class._ios": "isIos" } }, providers: TUI_SHEET_PROVIDERS, viewQueries: [{ propertyName: "sheet", first: true, predicate: ["sheet"], descendants: true }, { propertyName: "content", first: true, predicate: ["content"], descendants: true }, { propertyName: "stopsRefs", predicate: ["stops"], descendants: true }], ngImport: i0, template: "<div\n    class=\"t-bumpers\"\n    (click)=\"close()\"\n>\n    <div\n        *ngFor=\"let stop of item.stops\"\n        #stops\n        class=\"t-bumper\"\n        [style.marginTop]=\"stop\"\n    ></div>\n</div>\n<div\n    #sheet\n    class=\"t-wrapper\"\n    [class.t-wrapper_shadow]=\"!item.image\"\n>\n    <header\n        *ngIf=\"item.image\"\n        class=\"t-top\"\n        [tuiSheetTop]=\"imageStop\"\n    >\n        <img\n            *polymorpheusOutlet=\"item.image as src; context: context\"\n            alt=\"\"\n            class=\"t-image\"\n            [src]=\"src\"\n        />\n    </header>\n    <section\n        #content\n        tuiSheetStop\n        class=\"t-sheet\"\n    >\n        <div class=\"t-bar\"></div>\n        <tui-sheet-bar>\n            <button\n                type=\"button\"\n                class=\"t-button\"\n                [title]=\"moreWord$ | async\"\n                (click)=\"scrollTo(stops[1])\"\n            ></button>\n        </tui-sheet-bar>\n        <div class=\"t-content\">\n            <h2\n                *polymorpheusOutlet=\"item.content as text; context: context\"\n                tuiSheetHeading\n                class=\"t-heading\"\n            >\n                {{ text }}\n            </h2>\n        </div>\n    </section>\n</div>\n", styles: [":host{scrollbar-width:none;-ms-overflow-style:none;position:absolute;left:0;bottom:0;right:0;transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;top:auto;border-radius:.75rem .75rem 0 0;overflow-y:auto;overflow-x:hidden;scroll-snap-type:y mandatory;box-shadow:0 50vh var(--tui-background-elevation-1);padding-right:1rem;margin-left:-1rem;transform:scaleX(-1);clip-path:inset(0 1rem 0 0 round .75rem .75rem 0 0);overscroll-behavior:none}:host::-webkit-scrollbar,:host::-webkit-scrollbar-thumb{display:none}:host._stuck{scroll-snap-type:none}@supports (-moz-appearance: none){:host{scroll-snap-type:none}}.t-bumpers{display:flex;block-size:100%}:host-context(.t-wrapper_closeable) .t-bumpers{scroll-snap-stop:always;scroll-snap-align:start;scroll-margin:-1px}.t-bumper{scroll-snap-stop:always;scroll-snap-align:start;block-size:1rem;inline-size:1rem}.t-wrapper{border-radius:inherit;scroll-snap-stop:always;scroll-snap-align:start}.t-wrapper_shadow{box-shadow:var(--tui-shadow-small)}.t-top{position:sticky;top:0;border-radius:.8rem .8rem 0 0;box-shadow:var(--tui-shadow-small);transform:scaleX(-1);overflow:hidden}.t-top._clickthrough{pointer-events:none}:host-context(._overlay:not(._visible)) .t-top{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;transform:scaleX(-1)!important}.t-image{display:block;inline-size:100%}.t-sheet{position:relative;border-radius:inherit;scroll-snap-stop:always;scroll-snap-align:start;transform:scaleX(-1)}.t-top:not(._rounded)~.t-sheet .t-bar{border-radius:0}.t-bar{transition-property:border-radius;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;position:sticky;top:0;z-index:1;block-size:1.5rem;margin-bottom:-1.5rem;border-radius:inherit;background:var(--tui-background-elevation-1);box-shadow:inset 0 1px #ffffff40}.t-button{position:absolute;top:0;block-size:1.5rem;inline-size:3rem;padding:0;border:0;opacity:0}.t-content{padding:1rem;margin-top:-1rem;border-radius:inherit;background:var(--tui-background-elevation-1)}.t-heading{padding-bottom:.5rem;background:var(--tui-background-elevation-1)}\n"], dependencies: [{ kind: "directive", type: i1$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2$1.PolymorpheusOutlet, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { kind: "component", type: TuiSheetBarComponent, selector: "tui-sheet-bar" }, { kind: "component", type: TuiSheetHeadingComponent, selector: "[tuiSheetHeading]" }, { kind: "directive", type: TuiSheetTopDirective, selector: "[tuiSheetTop]", inputs: ["tuiSheetTop"] }, { kind: "directive", type: TuiSheetStopDirective, selector: "[tuiSheetStop]" }, { kind: "pipe", type: i1$1.AsyncPipe, name: "async" }], animations: [tuiSlideInTop], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
__decorate([
    tuiPure
], TuiSheetComponent.prototype, "context", null);
__decorate([
    tuiPure
], TuiSheetComponent.prototype, "getStops", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSheetComponent, decorators: [{
            type: Component,
            args: [{ standalone: false, selector: 'tui-sheet', changeDetection: ChangeDetectionStrategy.OnPush, providers: TUI_SHEET_PROVIDERS, animations: [tuiSlideInTop], host: {
                        role: 'dialog',
                        '[attr.aria-labelledby]': 'id',
                        '[class._ios]': 'isIos',
                        [`(${TUI_SHEET_ID})`]: 'onId($event.detail)',
                    }, template: "<div\n    class=\"t-bumpers\"\n    (click)=\"close()\"\n>\n    <div\n        *ngFor=\"let stop of item.stops\"\n        #stops\n        class=\"t-bumper\"\n        [style.marginTop]=\"stop\"\n    ></div>\n</div>\n<div\n    #sheet\n    class=\"t-wrapper\"\n    [class.t-wrapper_shadow]=\"!item.image\"\n>\n    <header\n        *ngIf=\"item.image\"\n        class=\"t-top\"\n        [tuiSheetTop]=\"imageStop\"\n    >\n        <img\n            *polymorpheusOutlet=\"item.image as src; context: context\"\n            alt=\"\"\n            class=\"t-image\"\n            [src]=\"src\"\n        />\n    </header>\n    <section\n        #content\n        tuiSheetStop\n        class=\"t-sheet\"\n    >\n        <div class=\"t-bar\"></div>\n        <tui-sheet-bar>\n            <button\n                type=\"button\"\n                class=\"t-button\"\n                [title]=\"moreWord$ | async\"\n                (click)=\"scrollTo(stops[1])\"\n            ></button>\n        </tui-sheet-bar>\n        <div class=\"t-content\">\n            <h2\n                *polymorpheusOutlet=\"item.content as text; context: context\"\n                tuiSheetHeading\n                class=\"t-heading\"\n            >\n                {{ text }}\n            </h2>\n        </div>\n    </section>\n</div>\n", styles: [":host{scrollbar-width:none;-ms-overflow-style:none;position:absolute;left:0;bottom:0;right:0;transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;top:auto;border-radius:.75rem .75rem 0 0;overflow-y:auto;overflow-x:hidden;scroll-snap-type:y mandatory;box-shadow:0 50vh var(--tui-background-elevation-1);padding-right:1rem;margin-left:-1rem;transform:scaleX(-1);clip-path:inset(0 1rem 0 0 round .75rem .75rem 0 0);overscroll-behavior:none}:host::-webkit-scrollbar,:host::-webkit-scrollbar-thumb{display:none}:host._stuck{scroll-snap-type:none}@supports (-moz-appearance: none){:host{scroll-snap-type:none}}.t-bumpers{display:flex;block-size:100%}:host-context(.t-wrapper_closeable) .t-bumpers{scroll-snap-stop:always;scroll-snap-align:start;scroll-margin:-1px}.t-bumper{scroll-snap-stop:always;scroll-snap-align:start;block-size:1rem;inline-size:1rem}.t-wrapper{border-radius:inherit;scroll-snap-stop:always;scroll-snap-align:start}.t-wrapper_shadow{box-shadow:var(--tui-shadow-small)}.t-top{position:sticky;top:0;border-radius:.8rem .8rem 0 0;box-shadow:var(--tui-shadow-small);transform:scaleX(-1);overflow:hidden}.t-top._clickthrough{pointer-events:none}:host-context(._overlay:not(._visible)) .t-top{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;transform:scaleX(-1)!important}.t-image{display:block;inline-size:100%}.t-sheet{position:relative;border-radius:inherit;scroll-snap-stop:always;scroll-snap-align:start;transform:scaleX(-1)}.t-top:not(._rounded)~.t-sheet .t-bar{border-radius:0}.t-bar{transition-property:border-radius;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;position:sticky;top:0;z-index:1;block-size:1.5rem;margin-bottom:-1.5rem;border-radius:inherit;background:var(--tui-background-elevation-1);box-shadow:inset 0 1px #ffffff40}.t-button{position:absolute;top:0;block-size:1.5rem;inline-size:3rem;padding:0;border:0;opacity:0}.t-content{padding:1rem;margin-top:-1rem;border-radius:inherit;background:var(--tui-background-elevation-1)}.t-heading{padding-bottom:.5rem;background:var(--tui-background-elevation-1)}\n"] }]
        }], propDecorators: { sheet: [{
                type: ViewChild,
                args: ['sheet']
            }], content: [{
                type: ViewChild,
                args: ['content']
            }], stopsRefs: [{
                type: ViewChildren,
                args: ['stops']
            }], item: [{
                type: Input
            }], context: [], getStops: [] } });

/**
 * @deprecated: drop in v5.0 use {@link TuiSheetDialog}
 * https://taiga-ui.dev/components/sheet-dialog
 */
const TUI_SHEET_DEFAULT_OPTIONS = {
    image: '',
    imageSlide: true,
    stops: [],
    initial: 0,
    offset: 16,
    closeable: true,
    overlay: false,
};
/**
 * @deprecated: drop in v5.0 use {@link TuiSheetDialog}
 * https://taiga-ui.dev/components/sheet-dialog
 */
const TUI_SHEET_OPTIONS = tuiCreateToken({
    ...TUI_SHEET_DEFAULT_OPTIONS,
});

/**
 * @deprecated: use {@link TuiSheetDialogService}
 * https://taiga-ui.dev/components/sheet-dialog
 */
class TuiSheetService {
    constructor() {
        this.doc = inject(DOCUMENT);
        this.options = inject(TUI_SHEET_OPTIONS);
        this.sheets$ = new BehaviorSubject([]);
    }
    open(content, options = {}) {
        return new Observable(($implicit) => {
            const completeWith = (result) => {
                $implicit.next(result);
                $implicit.complete();
            };
            const sheet = {
                ...this.options,
                ...options,
                content,
                completeWith,
                $implicit,
                scroll$: EMPTY,
            };
            const focused = tuiGetNativeFocused(this.doc);
            if (tuiIsHTMLElement(focused) && sheet.overlay) {
                focused.blur();
            }
            this.sheets$.next([...this.sheets$.value, sheet]);
            return () => {
                this.sheets$.next(this.sheets$.value.filter((item) => item !== sheet));
            };
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSheetService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSheetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSheetService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });

// Safety offset for shadow
const OFFSET = 16;
function processDragged(dragged$, scroll$) {
    const touchstart$ = dragged$.pipe(filter(Boolean));
    const touchend$ = dragged$.pipe(filter(tuiIsFalsy));
    const race$ = race(scroll$, timer(100)).pipe(debounceTime(200), take(1), map(TUI_FALSE_HANDLER));
    return touchstart$.pipe(switchMap(() => touchend$.pipe(switchMap(() => race$), startWith(true))), startWith(false));
}
class TuiSheetWrapperDirective {
    constructor() {
        this.zone = inject(NgZone);
        this.win = inject(WA_WINDOW);
        this.tuiSheetWrapper = 16;
    }
    get overlay$() {
        return this.scroll$.pipe(map((y) => y + 16 > this.win.innerHeight - this.tuiSheetWrapper), distinctUntilChanged(), tuiZonefull(this.zone));
    }
    get visible$() {
        return processDragged(this.dragged$, this.scroll$).pipe(distinctUntilChanged(), tuiZonefull(this.zone));
    }
    get height$() {
        return this.scroll$.pipe(map(this.getHeight.bind(this)));
    }
    getHeight(value) {
        return this.sheet?.context.overlay
            ? null
            : tuiClamp(this.withImage(value) + OFFSET, OFFSET, this.win.innerHeight);
    }
    withImage(value) {
        return !this.sheet?.imageStop || Math.floor(value) > this.sheet.imageStop
            ? value
            : value - this.sheet.imageHeight;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSheetWrapperDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiSheetWrapperDirective, selector: "[tuiSheetWrapper]", inputs: { tuiSheetWrapper: "tuiSheetWrapper" }, queries: [{ propertyName: "sheet", first: true, predicate: TuiSheetComponent, descendants: true }, { propertyName: "dragged$", first: true, predicate: TuiSheetComponent, descendants: true, read: TUI_SHEET_DRAGGED, static: true }, { propertyName: "scroll$", first: true, predicate: TuiSheetComponent, descendants: true, read: TUI_SHEET_SCROLL, static: true }], exportAs: ["tuiSheetWrapper"], ngImport: i0 }); }
}
__decorate([
    tuiPure
], TuiSheetWrapperDirective.prototype, "overlay$", null);
__decorate([
    tuiPure
], TuiSheetWrapperDirective.prototype, "visible$", null);
__decorate([
    tuiPure
], TuiSheetWrapperDirective.prototype, "height$", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSheetWrapperDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: false,
                    selector: '[tuiSheetWrapper]',
                    exportAs: 'tuiSheetWrapper',
                }]
        }], propDecorators: { sheet: [{
                type: ContentChild,
                args: [TuiSheetComponent]
            }], dragged$: [{
                type: ContentChild,
                args: [TuiSheetComponent, { read: TUI_SHEET_DRAGGED, static: true }]
            }], scroll$: [{
                type: ContentChild,
                args: [TuiSheetComponent, { read: TUI_SHEET_SCROLL, static: true }]
            }], tuiSheetWrapper: [{
                type: Input
            }], overlay$: [], visible$: [], height$: [] } });

class TuiSheetCloseDirective {
    constructor() {
        this.zone = inject(NgZone);
        this.dragged$ = inject(TUI_SHEET_DRAGGED);
        this.scroll$ = inject(TUI_SHEET_SCROLL);
        this.win = inject(WA_WINDOW);
        this.el = tuiInjectElement();
        this.sheet = inject(TuiSheetComponent);
        this.close = merge(tuiTypedFromEvent(this.el, TUI_SHEET_CLOSE), this.dragged$.pipe(tuiIfMap(() => this.scroll$.pipe(startWith(this.el.scrollTop)), tuiIsFalsy), filter((y) => this.sheet.item?.closeable && this.shouldClose(y)), distinctUntilChanged(), tuiZonefull(this.zone)));
    }
    shouldClose(scrollTop) {
        const height = Math.min(this.win.innerHeight, this.el.scrollHeight - this.win.innerHeight);
        const min = Math.min(height, this.sheet.stops[0] || Infinity);
        return scrollTop < min / 2;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSheetCloseDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiSheetCloseDirective, selector: "tui-sheet[close]", outputs: { close: "close" }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSheetCloseDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: false,
                    selector: 'tui-sheet[close]',
                }]
        }], propDecorators: { close: [{
                type: Output
            }] } });

class TuiSheetsHostComponent {
    constructor() {
        this.service = inject(TuiSheetService);
        this.destroyRef = inject(DestroyRef);
        this.cdr = inject(ChangeDetectorRef);
        this.height$ = inject(TUI_WINDOW_SIZE).pipe(map(({ height }) => height));
        this.sheets = [];
        this.options = tuiToAnimationOptions(inject(TUI_ANIMATIONS_SPEED));
    }
    ngOnInit() {
        // Due to this view being parallel to app content, `markForCheck` from `async` pipe
        // can happen after view was checked, so calling `detectChanges` instead
        this.service.sheets$
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe((sheets) => {
            this.sheets = sheets;
            this.cdr.detectChanges();
        });
    }
    close({ closeable, $implicit }) {
        if (closeable) {
            $implicit.complete();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSheetsHostComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiSheetsHostComponent, selector: "tui-sheets-host", ngImport: i0, template: "<div\n    *ngFor=\"let item of sheets\"\n    #wrapper=\"tuiSheetWrapper\"\n    class=\"t-wrapper\"\n    [@tuiFadeIn]=\"options\"\n    [@tuiSlideInTop]=\"options\"\n    [class.t-wrapper_closeable]=\"item.closeable\"\n    [class.t-wrapper_overlay]=\"item.overlay || (wrapper.overlay$ | async)\"\n    [class.t-wrapper_visible]=\"wrapper.visible$ | async\"\n    [style.height.px]=\"wrapper.height$ | async\"\n    [tuiSheetWrapper]=\"item.offset\"\n    (click.self)=\"close(item)\"\n>\n    <tui-sheet\n        tuiScrollRef\n        [item]=\"item\"\n        [style.height.px]=\"((height$ | async) || 0) - item.offset\"\n        (close)=\"close(item)\"\n    />\n</div>\n<div\n    class=\"t-overlay\"\n    (click)=\"sheets[0] && close(sheets[0])\"\n></div>\n", styles: [":host{position:sticky;bottom:0;display:block;block-size:0}.t-overlay{transition-property:opacity;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;position:fixed;top:0;left:0;inline-size:100%;z-index:-1;block-size:100%;background:#000;opacity:.001;pointer-events:none}.t-wrapper_overlay~.t-overlay{opacity:.8;pointer-events:auto;touch-action:none}.t-wrapper{position:absolute;bottom:0;z-index:0;inline-size:100%;block-size:100vh;overflow:hidden}.t-wrapper_visible{overflow:visible}\n"], dependencies: [{ kind: "directive", type: i1$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: TuiSheetComponent, selector: "tui-sheet", inputs: ["item"] }, { kind: "directive", type: TuiSheetWrapperDirective, selector: "[tuiSheetWrapper]", inputs: ["tuiSheetWrapper"], exportAs: ["tuiSheetWrapper"] }, { kind: "directive", type: TuiSheetCloseDirective, selector: "tui-sheet[close]", outputs: ["close"] }, { kind: "pipe", type: i1$1.AsyncPipe, name: "async" }], animations: [tuiSlideInTop, tuiFadeIn], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSheetsHostComponent, decorators: [{
            type: Component,
            args: [{ standalone: false, selector: 'tui-sheets-host', changeDetection: ChangeDetectionStrategy.OnPush, animations: [tuiSlideInTop, tuiFadeIn], template: "<div\n    *ngFor=\"let item of sheets\"\n    #wrapper=\"tuiSheetWrapper\"\n    class=\"t-wrapper\"\n    [@tuiFadeIn]=\"options\"\n    [@tuiSlideInTop]=\"options\"\n    [class.t-wrapper_closeable]=\"item.closeable\"\n    [class.t-wrapper_overlay]=\"item.overlay || (wrapper.overlay$ | async)\"\n    [class.t-wrapper_visible]=\"wrapper.visible$ | async\"\n    [style.height.px]=\"wrapper.height$ | async\"\n    [tuiSheetWrapper]=\"item.offset\"\n    (click.self)=\"close(item)\"\n>\n    <tui-sheet\n        tuiScrollRef\n        [item]=\"item\"\n        [style.height.px]=\"((height$ | async) || 0) - item.offset\"\n        (close)=\"close(item)\"\n    />\n</div>\n<div\n    class=\"t-overlay\"\n    (click)=\"sheets[0] && close(sheets[0])\"\n></div>\n", styles: [":host{position:sticky;bottom:0;display:block;block-size:0}.t-overlay{transition-property:opacity;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;position:fixed;top:0;left:0;inline-size:100%;z-index:-1;block-size:100%;background:#000;opacity:.001;pointer-events:none}.t-wrapper_overlay~.t-overlay{opacity:.8;pointer-events:auto;touch-action:none}.t-wrapper{position:absolute;bottom:0;z-index:0;inline-size:100%;block-size:100vh;overflow:hidden}.t-wrapper_visible{overflow:visible}\n"] }]
        }] });

/**
 * @deprecated: use {@link TuiSheetDialog}
 * https://taiga-ui.dev/components/sheet-dialog
 */
class TuiSheetDirective extends PolymorpheusTemplate {
    constructor() {
        super(...arguments);
        this.service = inject(TuiSheetService);
        this.open$ = new Subject();
        this.options = {};
        this.tuiSheetChange = this.open$.pipe(tuiIfMap(() => this.service.open(this, this.options).pipe(ignoreElements(), endWith(false))), share());
    }
    set tuiSheet(open) {
        this.open$.next(open);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSheetDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiSheetDirective, selector: "ng-template[tuiSheet]", inputs: { options: ["tuiSheetOptions", "options"], tuiSheet: "tuiSheet" }, outputs: { tuiSheetChange: "tuiSheetChange" }, usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSheetDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: false,
                    selector: 'ng-template[tuiSheet]',
                }]
        }], propDecorators: { options: [{
                type: Input,
                args: ['tuiSheetOptions']
            }], tuiSheetChange: [{
                type: Output
            }], tuiSheet: [{
                type: Input
            }] } });

/**
 * @deprecated: use {@link TuiSheetDialog}
 * https://taiga-ui.dev/components/sheet-dialog
 */
class TuiSheetModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSheetModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.2.12", ngImport: i0, type: TuiSheetModule, declarations: [TuiSheetsHostComponent,
            TuiSheetComponent,
            TuiSheetBarComponent,
            TuiSheetHeadingComponent,
            TuiSheetTopDirective,
            TuiSheetDirective,
            TuiSheetWrapperDirective,
            TuiSheetCloseDirective,
            TuiSheetStopDirective], imports: [CommonModule,
            PolymorpheusOutlet,
            PolymorpheusTemplate,
            TuiLet,
            TuiButton,
            TuiScrollbar], exports: [TuiSheetsHostComponent,
            TuiSheetComponent,
            TuiSheetHeadingComponent,
            TuiSheetDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSheetModule, imports: [CommonModule,
            TuiScrollbar] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSheetModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        PolymorpheusOutlet,
                        PolymorpheusTemplate,
                        TuiLet,
                        TuiButton,
                        TuiScrollbar,
                    ],
                    declarations: [
                        TuiSheetsHostComponent,
                        TuiSheetComponent,
                        TuiSheetBarComponent,
                        TuiSheetHeadingComponent,
                        TuiSheetTopDirective,
                        TuiSheetDirective,
                        TuiSheetWrapperDirective,
                        TuiSheetCloseDirective,
                        TuiSheetStopDirective,
                    ],
                    exports: [
                        TuiSheetsHostComponent,
                        TuiSheetComponent,
                        TuiSheetHeadingComponent,
                        TuiSheetDirective,
                    ],
                    schemas: [NO_ERRORS_SCHEMA],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_SHEET_CLOSE, TUI_SHEET_DEFAULT_OPTIONS, TUI_SHEET_ID, TUI_SHEET_OPTIONS, TUI_SHEET_PROVIDERS, TuiSheetBarComponent, TuiSheetCloseDirective, TuiSheetComponent, TuiSheetDirective, TuiSheetHeadingComponent, TuiSheetModule, TuiSheetService, TuiSheetStopDirective, TuiSheetTopDirective, TuiSheetWrapperDirective, TuiSheetsHostComponent };
//# sourceMappingURL=taiga-ui-legacy-components-sheet.mjs.map
