import { tuiCreateToken, tuiProvideOptions, tuiCreateTokenFromFactory, tuiProvide } from '@taiga-ui/cdk/utils/miscellaneous';
import * as i0 from '@angular/core';
import { Directive, Input, NgModule, InjectionToken, ChangeDetectorRef } from '@angular/core';
import { AbstractTuiController } from '@taiga-ui/legacy/classes';
import { PolymorpheusOutlet, PolymorpheusTemplate } from '@taiga-ui/polymorpheus';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { tuiWatch } from '@taiga-ui/cdk/observables';
import { TUI_TEXTFIELD_APPEARANCE } from '@taiga-ui/legacy/tokens';
import { merge, NEVER } from 'rxjs';

class TuiTextfieldController {
    constructor(change$, options, legacyAppearance, appearanceDirective, cleanerDirective, customContentDirective, iconDirective, iconLeftDirective, labelOutsideDirective, sizeDirective, prefixDirective, postfixDirective, fillerDirective) {
        this.change$ = change$;
        this.options = options;
        this.legacyAppearance = legacyAppearance;
        this.appearanceDirective = appearanceDirective;
        this.cleanerDirective = cleanerDirective;
        this.customContentDirective = customContentDirective;
        this.iconDirective = iconDirective;
        this.iconLeftDirective = iconLeftDirective;
        this.labelOutsideDirective = labelOutsideDirective;
        this.sizeDirective = sizeDirective;
        this.prefixDirective = prefixDirective;
        this.postfixDirective = postfixDirective;
        this.fillerDirective = fillerDirective;
    }
    get appearance() {
        return this.appearanceDirective.appearance || this.legacyAppearance;
    }
    get cleaner() {
        return this.cleanerDirective.cleaner;
    }
    get customContent() {
        return this.customContentDirective.customContent || '';
    }
    get icon() {
        return this.iconDirective.icon;
    }
    get iconStart() {
        return this.iconLeftDirective.iconStart;
    }
    get labelOutside() {
        return this.labelOutsideDirective.labelOutside;
    }
    get size() {
        return this.sizeDirective.size;
    }
    get prefix() {
        return this.prefixDirective.prefix;
    }
    get postfix() {
        return this.postfixDirective.postfix;
    }
    get filler() {
        return this.fillerDirective.filler;
    }
}

/**
 * @deprecated: drop in v5.0
 * Default values for primitive textfield options
 */
const TUI_TEXTFIELD_DEFAULT_OPTIONS = {
    iconCleaner: '@tui.x',
    hintOnDisabled: false,
};
/**
 * @deprecated: drop in v5.0
 * Default parameters for textfield
 */
const TUI_TEXTFIELD_OPTIONS = tuiCreateToken(TUI_TEXTFIELD_DEFAULT_OPTIONS);
function tuiTextfieldOptionsProvider(options) {
    return tuiProvideOptions(TUI_TEXTFIELD_OPTIONS, options, TUI_TEXTFIELD_DEFAULT_OPTIONS);
}

const TUI_TEXTFIELD_APPEARANCE_DIRECTIVE = tuiCreateTokenFromFactory(() => new TuiTextfieldAppearanceDirective());
class TuiTextfieldAppearanceDirective extends AbstractTuiController {
    constructor() {
        super(...arguments);
        // it's an empty string by default for backward compatibility
        // (see comment https://github.com/taiga-family/taiga-ui/pull/3007#issuecomment-1315179508)
        this.appearance = '';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiTextfieldAppearanceDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiTextfieldAppearanceDirective, selector: "[tuiTextfieldAppearance]", inputs: { appearance: ["tuiTextfieldAppearance", "appearance"] }, providers: [
            tuiProvide(TUI_TEXTFIELD_APPEARANCE_DIRECTIVE, TuiTextfieldAppearanceDirective),
        ], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiTextfieldAppearanceDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiTextfieldAppearance]',
                    providers: [
                        tuiProvide(TUI_TEXTFIELD_APPEARANCE_DIRECTIVE, TuiTextfieldAppearanceDirective),
                    ],
                }]
        }], propDecorators: { appearance: [{
                type: Input,
                args: ['tuiTextfieldAppearance']
            }] } });

const TUI_TEXTFIELD_CLEANER = tuiCreateTokenFromFactory(() => new TuiTextfieldCleanerDirective());
class TuiTextfieldCleanerDirective extends AbstractTuiController {
    constructor() {
        super(...arguments);
        this.cleaner = false;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiTextfieldCleanerDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiTextfieldCleanerDirective, selector: "[tuiTextfieldCleaner]", inputs: { cleaner: ["tuiTextfieldCleaner", "cleaner"] }, providers: [tuiProvide(TUI_TEXTFIELD_CLEANER, TuiTextfieldCleanerDirective)], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiTextfieldCleanerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiTextfieldCleaner]',
                    providers: [tuiProvide(TUI_TEXTFIELD_CLEANER, TuiTextfieldCleanerDirective)],
                }]
        }], propDecorators: { cleaner: [{
                type: Input,
                args: ['tuiTextfieldCleaner']
            }] } });

const TUI_TEXTFIELD_CUSTOM_CONTENT = tuiCreateTokenFromFactory(() => new TuiTextfieldCustomContentDirective());
class TuiTextfieldCustomContentDirective extends AbstractTuiController {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiTextfieldCustomContentDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiTextfieldCustomContentDirective, selector: "[tuiTextfieldCustomContent]", inputs: { customContent: ["tuiTextfieldCustomContent", "customContent"] }, providers: [
            tuiProvide(TUI_TEXTFIELD_CUSTOM_CONTENT, TuiTextfieldCustomContentDirective),
        ], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiTextfieldCustomContentDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiTextfieldCustomContent]',
                    providers: [
                        tuiProvide(TUI_TEXTFIELD_CUSTOM_CONTENT, TuiTextfieldCustomContentDirective),
                    ],
                }]
        }], propDecorators: { customContent: [{
                type: Input,
                args: ['tuiTextfieldCustomContent']
            }] } });

const TUI_TEXTFIELD_FILLER = tuiCreateTokenFromFactory(() => new TuiTextfieldFillerDirective());
class TuiTextfieldFillerDirective extends AbstractTuiController {
    constructor() {
        super(...arguments);
        this.filler = '';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiTextfieldFillerDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiTextfieldFillerDirective, selector: "[tuiTextfieldFiller]", inputs: { filler: ["tuiTextfieldFiller", "filler"] }, providers: [tuiProvide(TUI_TEXTFIELD_FILLER, TuiTextfieldFillerDirective)], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiTextfieldFillerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiTextfieldFiller]',
                    providers: [tuiProvide(TUI_TEXTFIELD_FILLER, TuiTextfieldFillerDirective)],
                }]
        }], propDecorators: { filler: [{
                type: Input,
                args: ['tuiTextfieldFiller']
            }] } });

const TUI_TEXTFIELD_ICON = tuiCreateTokenFromFactory(() => new TuiTextfieldIconDirective());
class TuiTextfieldIconDirective extends AbstractTuiController {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiTextfieldIconDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiTextfieldIconDirective, selector: "[tuiTextfieldIcon]", inputs: { icon: ["tuiTextfieldIcon", "icon"] }, providers: [tuiProvide(TUI_TEXTFIELD_ICON, TuiTextfieldIconDirective)], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiTextfieldIconDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiTextfieldIcon]',
                    providers: [tuiProvide(TUI_TEXTFIELD_ICON, TuiTextfieldIconDirective)],
                }]
        }], propDecorators: { icon: [{
                type: Input,
                args: ['tuiTextfieldIcon']
            }] } });

const TUI_TEXTFIELD_ICON_LEFT = tuiCreateTokenFromFactory(() => new TuiTextfieldIconLeftDirective());
class TuiTextfieldIconLeftDirective extends AbstractTuiController {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiTextfieldIconLeftDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiTextfieldIconLeftDirective, selector: "[tuiTextfieldIconLeft]", inputs: { iconStart: ["tuiTextfieldIconLeft", "iconStart"] }, providers: [tuiProvide(TUI_TEXTFIELD_ICON_LEFT, TuiTextfieldIconLeftDirective)], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiTextfieldIconLeftDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiTextfieldIconLeft]',
                    providers: [tuiProvide(TUI_TEXTFIELD_ICON_LEFT, TuiTextfieldIconLeftDirective)],
                }]
        }], propDecorators: { iconStart: [{
                type: Input,
                args: ['tuiTextfieldIconLeft']
            }] } });

const TUI_TEXTFIELD_LABEL_OUTSIDE = tuiCreateTokenFromFactory(() => new TuiTextfieldLabelOutsideDirective());
class TuiTextfieldLabelOutsideDirective extends AbstractTuiController {
    constructor() {
        super(...arguments);
        this.labelOutside = false;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiTextfieldLabelOutsideDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiTextfieldLabelOutsideDirective, selector: "[tuiTextfieldLabelOutside]", inputs: { labelOutside: ["tuiTextfieldLabelOutside", "labelOutside"] }, providers: [
            tuiProvide(TUI_TEXTFIELD_LABEL_OUTSIDE, TuiTextfieldLabelOutsideDirective),
        ], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiTextfieldLabelOutsideDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiTextfieldLabelOutside]',
                    providers: [
                        tuiProvide(TUI_TEXTFIELD_LABEL_OUTSIDE, TuiTextfieldLabelOutsideDirective),
                    ],
                }]
        }], propDecorators: { labelOutside: [{
                type: Input,
                args: ['tuiTextfieldLabelOutside']
            }] } });

const TUI_TEXTFIELD_POSTFIX = tuiCreateTokenFromFactory(() => new TuiTextfieldPostfixDirective());
class TuiTextfieldPostfixDirective extends AbstractTuiController {
    constructor() {
        super(...arguments);
        this.postfix = '';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiTextfieldPostfixDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiTextfieldPostfixDirective, selector: "[tuiTextfieldPostfix]", inputs: { postfix: ["tuiTextfieldPostfix", "postfix"] }, providers: [tuiProvide(TUI_TEXTFIELD_POSTFIX, TuiTextfieldPostfixDirective)], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiTextfieldPostfixDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiTextfieldPostfix]',
                    providers: [tuiProvide(TUI_TEXTFIELD_POSTFIX, TuiTextfieldPostfixDirective)],
                }]
        }], propDecorators: { postfix: [{
                type: Input,
                args: ['tuiTextfieldPostfix']
            }] } });

const TUI_TEXTFIELD_PREFIX = tuiCreateTokenFromFactory(() => new TuiTextfieldPrefixDirective());
class TuiTextfieldPrefixDirective extends AbstractTuiController {
    constructor() {
        super(...arguments);
        this.prefix = '';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiTextfieldPrefixDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiTextfieldPrefixDirective, selector: "[tuiTextfieldPrefix]", inputs: { prefix: ["tuiTextfieldPrefix", "prefix"] }, providers: [tuiProvide(TUI_TEXTFIELD_PREFIX, TuiTextfieldPrefixDirective)], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiTextfieldPrefixDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiTextfieldPrefix]',
                    providers: [tuiProvide(TUI_TEXTFIELD_PREFIX, TuiTextfieldPrefixDirective)],
                }]
        }], propDecorators: { prefix: [{
                type: Input,
                args: ['tuiTextfieldPrefix']
            }] } });

const TUI_TEXTFIELD_SIZE = tuiCreateTokenFromFactory(() => new TuiTextfieldSizeDirective());
class TuiTextfieldSizeDirective extends AbstractTuiController {
    constructor() {
        super(...arguments);
        this.size = 'l';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiTextfieldSizeDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiTextfieldSizeDirective, selector: "[tuiTextfieldSize]", inputs: { size: ["tuiTextfieldSize", "size"] }, providers: [tuiProvide(TUI_TEXTFIELD_SIZE, TuiTextfieldSizeDirective)], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiTextfieldSizeDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiTextfieldSize]',
                    providers: [tuiProvide(TUI_TEXTFIELD_SIZE, TuiTextfieldSizeDirective)],
                }]
        }], propDecorators: { size: [{
                type: Input,
                args: ['tuiTextfieldSize']
            }] } });

class TuiTextfieldControllerModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiTextfieldControllerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.2.12", ngImport: i0, type: TuiTextfieldControllerModule, declarations: [TuiTextfieldAppearanceDirective,
            TuiTextfieldCleanerDirective,
            TuiTextfieldCustomContentDirective,
            TuiTextfieldLabelOutsideDirective,
            TuiTextfieldSizeDirective,
            TuiTextfieldIconDirective,
            TuiTextfieldIconLeftDirective,
            TuiTextfieldPrefixDirective,
            TuiTextfieldPostfixDirective,
            TuiTextfieldFillerDirective], imports: [PolymorpheusOutlet, PolymorpheusTemplate], exports: [TuiTextfieldAppearanceDirective,
            TuiTextfieldCleanerDirective,
            TuiTextfieldCustomContentDirective,
            TuiTextfieldLabelOutsideDirective,
            TuiTextfieldSizeDirective,
            TuiTextfieldIconDirective,
            TuiTextfieldIconLeftDirective,
            TuiTextfieldPrefixDirective,
            TuiTextfieldPostfixDirective,
            TuiTextfieldFillerDirective,
            PolymorpheusOutlet,
            PolymorpheusTemplate] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiTextfieldControllerModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiTextfieldControllerModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [PolymorpheusOutlet, PolymorpheusTemplate],
                    declarations: [
                        TuiTextfieldAppearanceDirective,
                        TuiTextfieldCleanerDirective,
                        TuiTextfieldCustomContentDirective,
                        TuiTextfieldLabelOutsideDirective,
                        TuiTextfieldSizeDirective,
                        TuiTextfieldIconDirective,
                        TuiTextfieldIconLeftDirective,
                        TuiTextfieldPrefixDirective,
                        TuiTextfieldPostfixDirective,
                        TuiTextfieldFillerDirective,
                    ],
                    exports: [
                        TuiTextfieldAppearanceDirective,
                        TuiTextfieldCleanerDirective,
                        TuiTextfieldCustomContentDirective,
                        TuiTextfieldLabelOutsideDirective,
                        TuiTextfieldSizeDirective,
                        TuiTextfieldIconDirective,
                        TuiTextfieldIconLeftDirective,
                        TuiTextfieldPrefixDirective,
                        TuiTextfieldPostfixDirective,
                        TuiTextfieldFillerDirective,
                        PolymorpheusOutlet,
                        PolymorpheusTemplate,
                    ],
                }]
        }] });

const TUI_TEXTFIELD_WATCHED_CONTROLLER = new InjectionToken('[TUI_TEXTFIELD_WATCHED_CONTROLLER]');
const TEXTFIELD_CONTROLLER_PROVIDER = [
    {
        provide: TUI_TEXTFIELD_WATCHED_CONTROLLER,
        deps: [
            ChangeDetectorRef,
            TUI_TEXTFIELD_OPTIONS,
            TUI_TEXTFIELD_APPEARANCE,
            TUI_TEXTFIELD_APPEARANCE_DIRECTIVE,
            TUI_TEXTFIELD_CLEANER,
            TUI_TEXTFIELD_CUSTOM_CONTENT,
            TUI_TEXTFIELD_ICON,
            TUI_TEXTFIELD_ICON_LEFT,
            TUI_TEXTFIELD_LABEL_OUTSIDE,
            TUI_TEXTFIELD_SIZE,
            TUI_TEXTFIELD_PREFIX,
            TUI_TEXTFIELD_POSTFIX,
            TUI_TEXTFIELD_FILLER,
        ],
        useFactory: (cdr, options, legacyAppearance, ...controllers) => {
            const change$ = merge(...controllers.map(({ change$ }) => change$ || NEVER)).pipe(tuiWatch(cdr), takeUntilDestroyed());
            change$.subscribe();
            return new TuiTextfieldController(change$, options, legacyAppearance, ...controllers);
        },
    },
];

/**
 * Generated bundle index. Do not edit.
 */

export { TEXTFIELD_CONTROLLER_PROVIDER, TUI_TEXTFIELD_APPEARANCE_DIRECTIVE, TUI_TEXTFIELD_CLEANER, TUI_TEXTFIELD_CUSTOM_CONTENT, TUI_TEXTFIELD_DEFAULT_OPTIONS, TUI_TEXTFIELD_FILLER, TUI_TEXTFIELD_ICON, TUI_TEXTFIELD_ICON_LEFT, TUI_TEXTFIELD_LABEL_OUTSIDE, TUI_TEXTFIELD_OPTIONS, TUI_TEXTFIELD_POSTFIX, TUI_TEXTFIELD_PREFIX, TUI_TEXTFIELD_SIZE, TUI_TEXTFIELD_WATCHED_CONTROLLER, TuiTextfieldAppearanceDirective, TuiTextfieldCleanerDirective, TuiTextfieldController, TuiTextfieldControllerModule, TuiTextfieldCustomContentDirective, TuiTextfieldFillerDirective, TuiTextfieldIconDirective, TuiTextfieldIconLeftDirective, TuiTextfieldLabelOutsideDirective, TuiTextfieldPostfixDirective, TuiTextfieldPrefixDirective, TuiTextfieldSizeDirective, tuiTextfieldOptionsProvider };
//# sourceMappingURL=taiga-ui-legacy-directives-textfield-controller.mjs.map
