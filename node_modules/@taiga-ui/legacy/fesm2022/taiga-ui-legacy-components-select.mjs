import * as i0 from '@angular/core';
import { TemplateRef, Component, ChangeDetectionStrategy, Input, inject, ViewChild, ContentChild, Directive, NgModule } from '@angular/core';
import { tuiProvide, tuiCreateToken, tuiProvideOptions } from '@taiga-ui/cdk/utils/miscellaneous';
import * as i2 from '@taiga-ui/core/components/data-list';
import { tuiAsDataList, tuiAsDataListHost, tuiAsOptionContent, TuiDataListDirective, TuiDataList } from '@taiga-ui/core/components/data-list';
import { AbstractTuiNativeSelect, AbstractTuiNullableControl, tuiAsControl, AbstractTuiTextfieldHost } from '@taiga-ui/legacy/classes';
import * as i1 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i3 from '@taiga-ui/kit/components/data-list-wrapper';
import { TuiDataListWrapper } from '@taiga-ui/kit/components/data-list-wrapper';
import * as i4 from '@taiga-ui/kit/pipes/stringify-content';
import { TuiStringifyContentPipe } from '@taiga-ui/kit/pipes/stringify-content';
import { TUI_IS_MOBILE } from '@taiga-ui/cdk/tokens';
import { tuiIsNativeFocused } from '@taiga-ui/cdk/utils/focus';
import * as i1$1 from '@taiga-ui/core/directives/dropdown';
import { TuiDropdownOpen, TuiDropdown } from '@taiga-ui/core/directives/dropdown';
import { TUI_ITEMS_HANDLERS } from '@taiga-ui/kit/tokens';
import { TUI_ARROW_MODE, TuiArrowComponent } from '@taiga-ui/legacy/components/arrow';
import * as i3$1 from '@taiga-ui/legacy/components/primitive-textfield';
import { TuiPrimitiveTextfieldComponent, TuiPrimitiveTextfieldModule, TuiTextfieldComponent } from '@taiga-ui/legacy/components/primitive-textfield';
import { TUI_SELECT_OPTION, TuiSelectOptionModule } from '@taiga-ui/legacy/components/select-option';
import * as i4$1 from '@taiga-ui/legacy/directives';
import { TUI_TEXTFIELD_CLEANER, TUI_TEXTFIELD_SIZE, TuiWrapperModule, TuiTextfieldControllerModule, TuiLegacyDropdownOpenMonitorDirective } from '@taiga-ui/legacy/directives';
import { tuiAsFocusableItemAccessor, tuiAsTextfieldHost } from '@taiga-ui/legacy/tokens';
import { FIXED_DROPDOWN_CONTROLLER_PROVIDER } from '@taiga-ui/legacy/utils';
import * as i2$1 from '@taiga-ui/polymorpheus';
import { PolymorpheusOutlet, PolymorpheusTemplate } from '@taiga-ui/polymorpheus';

class TuiNativeSelectComponent extends AbstractTuiNativeSelect {
    constructor() {
        super(...arguments);
        this.items = [];
    }
    get stringify() {
        return this.host.stringify;
    }
    selected(option) {
        return this.control.value === option;
    }
    onValueChange(index) {
        this.host.onValueChange(this.items?.[index] || null);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiNativeSelectComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiNativeSelectComponent, selector: "select[tuiSelect]:not([labels]):not([multiple])", inputs: { items: "items" }, host: { listeners: { "change": "onValueChange($event.target.options.selectedIndex - (emptyOption ? 1 : 0))" }, properties: { "attr.aria-invalid": "host.invalid", "disabled": "host.disabled || control.readOnly", "tabIndex": "host.focusable ? 0 : -1", "value": "host.value" } }, providers: [
            tuiAsDataList(TuiNativeSelectComponent),
            tuiProvide(AbstractTuiNativeSelect, TuiNativeSelectComponent),
            {
                provide: TemplateRef,
                deps: [TuiNativeSelectComponent],
                useFactory: ({ datalist }) => datalist,
            },
        ], usesInheritance: true, ngImport: i0, template: "<tui-data-list-wrapper\n    *tuiDataList\n    [disabledItemHandler]=\"disabledItemHandler || itemsHandlers.disabledItemHandler\"\n    [itemContent]=\"stringify | tuiStringifyContent\"\n    [items]=\"items\"\n/>\n<ng-container *ngIf=\"control.control?.valueChanges | async\" />\n<option\n    *ngIf=\"emptyOption\"\n    disabled\n    selected\n    value=\"\"\n>\n    {{ placeholder }}\n</option>\n<option\n    *ngFor=\"let option of items; let index = index\"\n    [disabled]=\"disabledItemHandler ? disabledItemHandler(option) : itemsHandlers.disabledItemHandler(option)\"\n    [selected]=\"selected(option)\"\n    [value]=\"stringify(option)\"\n>\n    {{ stringify(option) }}\n</option>\n", styles: [":host{position:absolute;top:0;left:0;inline-size:100%;block-size:100%;opacity:0}\n"], dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.TuiDataListDirective, selector: "ng-template[tuiDataList]" }, { kind: "component", type: i3.TuiDataListWrapperComponent, selector: "tui-data-list-wrapper:not([labels])", inputs: ["items", "disabledItemHandler", "emptyContent", "size", "itemContent"], outputs: ["itemClick"] }, { kind: "pipe", type: i1.AsyncPipe, name: "async" }, { kind: "pipe", type: i4.TuiStringifyContentPipe, name: "tuiStringifyContent" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiNativeSelectComponent, decorators: [{
            type: Component,
            args: [{ selector: 'select[tuiSelect]:not([labels]):not([multiple])', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        tuiAsDataList(TuiNativeSelectComponent),
                        tuiProvide(AbstractTuiNativeSelect, TuiNativeSelectComponent),
                        {
                            provide: TemplateRef,
                            deps: [TuiNativeSelectComponent],
                            useFactory: ({ datalist }) => datalist,
                        },
                    ], host: {
                        '[attr.aria-invalid]': 'host.invalid',
                        '[disabled]': 'host.disabled || control.readOnly',
                        '[tabIndex]': 'host.focusable ? 0 : -1',
                        '[value]': 'host.value',
                        '(change)': 'onValueChange($event.target.options.selectedIndex - (emptyOption ? 1 : 0))',
                    }, template: "<tui-data-list-wrapper\n    *tuiDataList\n    [disabledItemHandler]=\"disabledItemHandler || itemsHandlers.disabledItemHandler\"\n    [itemContent]=\"stringify | tuiStringifyContent\"\n    [items]=\"items\"\n/>\n<ng-container *ngIf=\"control.control?.valueChanges | async\" />\n<option\n    *ngIf=\"emptyOption\"\n    disabled\n    selected\n    value=\"\"\n>\n    {{ placeholder }}\n</option>\n<option\n    *ngFor=\"let option of items; let index = index\"\n    [disabled]=\"disabledItemHandler ? disabledItemHandler(option) : itemsHandlers.disabledItemHandler(option)\"\n    [selected]=\"selected(option)\"\n    [value]=\"stringify(option)\"\n>\n    {{ stringify(option) }}\n</option>\n", styles: [":host{position:absolute;top:0;left:0;inline-size:100%;block-size:100%;opacity:0}\n"] }]
        }], propDecorators: { items: [{
                type: Input
            }] } });

class TuiNativeSelectGroupComponent extends AbstractTuiNativeSelect {
    constructor() {
        super(...arguments);
        this.items = [];
        this.labels = [];
    }
    get stringify() {
        return this.host.stringify;
    }
    selected(option) {
        return this.control.value === option;
    }
    onValueChange(index) {
        const flatItems = this.items?.reduce((acc, val) => acc.concat(val), []);
        this.host.onValueChange(flatItems?.[index] || null);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiNativeSelectGroupComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiNativeSelectGroupComponent, selector: "select[tuiSelect][labels]:not([multiple])", inputs: { items: "items", labels: "labels" }, host: { listeners: { "change": "onValueChange($event.target.options.selectedIndex - (emptyOption ? 1 : 0))" }, properties: { "attr.aria-invalid": "host.invalid", "disabled": "host.disabled || control.readOnly", "tabIndex": "host.focusable ? 0 : -1", "value": "host.value" } }, providers: [
            tuiAsDataList(TuiNativeSelectGroupComponent),
            tuiProvide(AbstractTuiNativeSelect, TuiNativeSelectGroupComponent),
            {
                provide: TemplateRef,
                deps: [TuiNativeSelectGroupComponent],
                useFactory: ({ datalist }) => datalist,
            },
        ], usesInheritance: true, ngImport: i0, template: "<tui-data-list-wrapper\n    *tuiDataList\n    [disabledItemHandler]=\"disabledItemHandler || itemsHandlers.disabledItemHandler\"\n    [itemContent]=\"stringify | tuiStringifyContent\"\n    [items]=\"items\"\n    [labels]=\"labels\"\n/>\n<ng-container *ngIf=\"control.control?.valueChanges | async\" />\n<option\n    *ngIf=\"emptyOption\"\n    disabled\n    selected\n    value=\"\"\n>\n    {{ placeholder }}\n</option>\n<optgroup\n    *ngFor=\"let group of items; let index = index\"\n    [label]=\"labels[index]\"\n>\n    <option\n        *ngFor=\"let option of group; let i = index\"\n        [disabled]=\"disabledItemHandler ? disabledItemHandler(option) : itemsHandlers.disabledItemHandler(option)\"\n        [selected]=\"selected(option)\"\n        [value]=\"stringify(option)\"\n    >\n        {{ stringify(option) }}\n    </option>\n</optgroup>\n", styles: [":host{position:absolute;top:0;left:0;inline-size:100%;block-size:100%;opacity:0}\n"], dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.TuiDataListDirective, selector: "ng-template[tuiDataList]" }, { kind: "component", type: i3.TuiDataListGroupWrapperComponent, selector: "tui-data-list-wrapper[labels]", inputs: ["labels"] }, { kind: "pipe", type: i1.AsyncPipe, name: "async" }, { kind: "pipe", type: i4.TuiStringifyContentPipe, name: "tuiStringifyContent" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiNativeSelectGroupComponent, decorators: [{
            type: Component,
            args: [{ selector: 'select[tuiSelect][labels]:not([multiple])', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        tuiAsDataList(TuiNativeSelectGroupComponent),
                        tuiProvide(AbstractTuiNativeSelect, TuiNativeSelectGroupComponent),
                        {
                            provide: TemplateRef,
                            deps: [TuiNativeSelectGroupComponent],
                            useFactory: ({ datalist }) => datalist,
                        },
                    ], host: {
                        '[attr.aria-invalid]': 'host.invalid',
                        '[disabled]': 'host.disabled || control.readOnly',
                        '[tabIndex]': 'host.focusable ? 0 : -1',
                        '[value]': 'host.value',
                        '(change)': 'onValueChange($event.target.options.selectedIndex - (emptyOption ? 1 : 0))',
                    }, template: "<tui-data-list-wrapper\n    *tuiDataList\n    [disabledItemHandler]=\"disabledItemHandler || itemsHandlers.disabledItemHandler\"\n    [itemContent]=\"stringify | tuiStringifyContent\"\n    [items]=\"items\"\n    [labels]=\"labels\"\n/>\n<ng-container *ngIf=\"control.control?.valueChanges | async\" />\n<option\n    *ngIf=\"emptyOption\"\n    disabled\n    selected\n    value=\"\"\n>\n    {{ placeholder }}\n</option>\n<optgroup\n    *ngFor=\"let group of items; let index = index\"\n    [label]=\"labels[index]\"\n>\n    <option\n        *ngFor=\"let option of group; let i = index\"\n        [disabled]=\"disabledItemHandler ? disabledItemHandler(option) : itemsHandlers.disabledItemHandler(option)\"\n        [selected]=\"selected(option)\"\n        [value]=\"stringify(option)\"\n    >\n        {{ stringify(option) }}\n    </option>\n</optgroup>\n", styles: [":host{position:absolute;top:0;left:0;inline-size:100%;block-size:100%;opacity:0}\n"] }]
        }], propDecorators: { items: [{
                type: Input
            }], labels: [{
                type: Input
            }] } });

const TUI_SELECT_DEFAULT_OPTIONS = {
    valueContent: '',
};
/**
 * @deprecated: drop in v5.0
 * Default parameters for Select component
 */
const TUI_SELECT_OPTIONS = tuiCreateToken(TUI_SELECT_DEFAULT_OPTIONS);
function tuiSelectOptionsProvider(options) {
    return tuiProvideOptions(TUI_SELECT_OPTIONS, options, TUI_SELECT_DEFAULT_OPTIONS);
}

class TuiSelectComponent extends AbstractTuiNullableControl {
    constructor() {
        super(...arguments);
        this.itemsHandlers = inject(TUI_ITEMS_HANDLERS);
        this.textfieldCleaner = inject(TUI_TEXTFIELD_CLEANER);
        this.textfieldSize = inject(TUI_TEXTFIELD_SIZE);
        this.arrowMode = inject(TUI_ARROW_MODE);
        this.options = inject(TUI_SELECT_OPTIONS);
        this.isMobile = inject(TUI_IS_MOBILE);
        this.open = false;
        this.stringify = this.itemsHandlers.stringify;
        this.identityMatcher = this.itemsHandlers.identityMatcher;
        this.valueContent = this.options.valueContent;
    }
    get size() {
        return this.textfieldSize.size;
    }
    get nativeFocusableElement() {
        return this.textfield?.nativeFocusableElement ?? null;
    }
    get focused() {
        return (tuiIsNativeFocused(this.nativeFocusableElement) ||
            !!this.dropdown?.tuiDropdownOpen);
    }
    get computedValue() {
        return this.value === null ? '' : this.stringify(this.value) || ' ';
    }
    onValueChange(value) {
        this.value = value || null;
    }
    handleOption(option) {
        this.focusInput();
        this.value = option;
        this.open = false;
    }
    get arrow() {
        return !this.interactive ? this.arrowMode.disabled : this.arrowMode.interactive;
    }
    get nativeDropdownMode() {
        return !!this.nativeSelect && this.isMobile;
    }
    get computedContent() {
        return this.valueContent || this.computedValue;
    }
    onActiveZone(active) {
        this.updateFocused(active);
    }
    onKeyDownDelete() {
        if (this.textfieldCleaner.cleaner) {
            this.value = null;
        }
    }
    focusInput(preventScroll = false) {
        if (this.nativeFocusableElement) {
            this.nativeFocusableElement.focus({ preventScroll });
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSelectComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiSelectComponent, selector: "tui-select", inputs: { stringify: "stringify", identityMatcher: "identityMatcher", valueContent: "valueContent" }, host: { properties: { "attr.data-size": "size" } }, providers: [
            tuiAsFocusableItemAccessor(TuiSelectComponent),
            tuiAsControl(TuiSelectComponent),
            tuiAsDataListHost(TuiSelectComponent),
            tuiAsOptionContent(TUI_SELECT_OPTION),
        ], queries: [{ propertyName: "nativeSelect", first: true, predicate: AbstractTuiNativeSelect, descendants: true, static: true }, { propertyName: "datalist", first: true, predicate: TuiDataListDirective, descendants: true, read: TemplateRef }], viewQueries: [{ propertyName: "textfield", first: true, predicate: TuiPrimitiveTextfieldComponent, descendants: true }, { propertyName: "dropdown", first: true, predicate: TuiDropdownOpen, descendants: true }], usesInheritance: true, ngImport: i0, template: "<div\n    tuiDropdownOpenMonitor\n    class=\"t-hosted\"\n    [tuiDropdown]=\"datalist || ''\"\n    [tuiDropdownEnabled]=\"interactive && !nativeDropdownMode\"\n    [(tuiDropdownOpen)]=\"open\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n>\n    <tui-primitive-textfield\n        automation-id=\"tui-select__textfield\"\n        class=\"t-textfield\"\n        [disabled]=\"computedDisabled\"\n        [editable]=\"false\"\n        [focusable]=\"computedFocusable\"\n        [invalid]=\"computedInvalid\"\n        [nativeId]=\"nativeId\"\n        [pseudoActive]=\"pseudoActive\"\n        [pseudoFocus]=\"computedFocused\"\n        [pseudoHover]=\"pseudoHover\"\n        [readOnly]=\"readOnly\"\n        [tuiTextfieldIcon]=\"arrow ? icon : ''\"\n        [value]=\"computedValue\"\n        (keydown.backspace.prevent)=\"onKeyDownDelete()\"\n        (keydown.delete.prevent)=\"onKeyDownDelete()\"\n        (valueChange)=\"onValueChange($any($event))\"\n    >\n        <ng-content />\n        <ng-content\n            ngProjectAs=\"input\"\n            select=\"input\"\n        />\n\n        <ng-template #select>\n            <ng-content\n                *ngIf=\"isMobile\"\n                select=\"select\"\n            />\n        </ng-template>\n\n        <ng-container\n            *ngTemplateOutlet=\"select\"\n            ngProjectAs=\"select\"\n        />\n\n        <div\n            *ngIf=\"value !== null\"\n            automation-id=\"tui-select__value\"\n            ngProjectAs=\"tuiContent\"\n            class=\"t-value\"\n        >\n            <div\n                *polymorpheusOutlet=\"computedContent as text; context: {$implicit: value, active: computedFocused}\"\n                class=\"t-primitive-value\"\n                [textContent]=\"text\"\n            ></div>\n        </div>\n    </tui-primitive-textfield>\n\n    <ng-template #icon>\n        <div\n            appearance=\"icon\"\n            tuiWrapper\n            class=\"t-icon\"\n        >\n            <ng-container *polymorpheusOutlet=\"arrow\" />\n        </div>\n    </ng-template>\n</div>\n", styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:start}:host:not(._readonly) ::ng-deep input:not(:disabled){cursor:pointer}:host._readonly ::ng-deep input{cursor:default}.t-hosted{display:block;border-radius:inherit}.t-textfield{border-radius:inherit;text-align:inherit}.t-value{display:flex;inline-size:100%;align-items:center}.t-primitive-value{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}\n"], dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i2$1.PolymorpheusOutlet, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { kind: "component", type: i3$1.TuiPrimitiveTextfieldComponent, selector: "tui-primitive-textfield", inputs: ["editable", "iconCleaner", "readOnly", "invalid", "disabled", "value"], outputs: ["valueChange"] }, { kind: "directive", type: i3$1.TuiPrimitiveTextfieldDirective, selector: "tui-primitive-textfield" }, { kind: "directive", type: i4$1.TuiWrapperDirective, selector: "[tuiWrapper]", inputs: ["disabled", "readOnly", "hover", "active", "focus", "invalid", "appearance"] }, { kind: "directive", type: i4$1.TuiTextfieldIconDirective, selector: "[tuiTextfieldIcon]", inputs: ["tuiTextfieldIcon"] }, { kind: "directive", type: i4$1.TuiLegacyDropdownOpenMonitorDirective, selector: "[tuiDropdownOpenMonitor]" }, { kind: "directive", type: i1$1.TuiDropdownDirective, selector: "[tuiDropdown]:not(ng-container):not(ng-template)", inputs: ["tuiDropdown"], exportAs: ["tuiDropdown"] }, { kind: "directive", type: i1$1.TuiDropdownOpen, selector: "[tuiDropdown][tuiDropdownOpen],[tuiDropdown][tuiDropdownOpenChange]", inputs: ["tuiDropdownEnabled", "tuiDropdownOpen"], outputs: ["tuiDropdownOpenChange"] }], viewProviders: [FIXED_DROPDOWN_CONTROLLER_PROVIDER], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSelectComponent, decorators: [{
            type: Component,
            args: [{ selector: 'tui-select', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        tuiAsFocusableItemAccessor(TuiSelectComponent),
                        tuiAsControl(TuiSelectComponent),
                        tuiAsDataListHost(TuiSelectComponent),
                        tuiAsOptionContent(TUI_SELECT_OPTION),
                    ], viewProviders: [FIXED_DROPDOWN_CONTROLLER_PROVIDER], host: {
                        '[attr.data-size]': 'size',
                    }, template: "<div\n    tuiDropdownOpenMonitor\n    class=\"t-hosted\"\n    [tuiDropdown]=\"datalist || ''\"\n    [tuiDropdownEnabled]=\"interactive && !nativeDropdownMode\"\n    [(tuiDropdownOpen)]=\"open\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n>\n    <tui-primitive-textfield\n        automation-id=\"tui-select__textfield\"\n        class=\"t-textfield\"\n        [disabled]=\"computedDisabled\"\n        [editable]=\"false\"\n        [focusable]=\"computedFocusable\"\n        [invalid]=\"computedInvalid\"\n        [nativeId]=\"nativeId\"\n        [pseudoActive]=\"pseudoActive\"\n        [pseudoFocus]=\"computedFocused\"\n        [pseudoHover]=\"pseudoHover\"\n        [readOnly]=\"readOnly\"\n        [tuiTextfieldIcon]=\"arrow ? icon : ''\"\n        [value]=\"computedValue\"\n        (keydown.backspace.prevent)=\"onKeyDownDelete()\"\n        (keydown.delete.prevent)=\"onKeyDownDelete()\"\n        (valueChange)=\"onValueChange($any($event))\"\n    >\n        <ng-content />\n        <ng-content\n            ngProjectAs=\"input\"\n            select=\"input\"\n        />\n\n        <ng-template #select>\n            <ng-content\n                *ngIf=\"isMobile\"\n                select=\"select\"\n            />\n        </ng-template>\n\n        <ng-container\n            *ngTemplateOutlet=\"select\"\n            ngProjectAs=\"select\"\n        />\n\n        <div\n            *ngIf=\"value !== null\"\n            automation-id=\"tui-select__value\"\n            ngProjectAs=\"tuiContent\"\n            class=\"t-value\"\n        >\n            <div\n                *polymorpheusOutlet=\"computedContent as text; context: {$implicit: value, active: computedFocused}\"\n                class=\"t-primitive-value\"\n                [textContent]=\"text\"\n            ></div>\n        </div>\n    </tui-primitive-textfield>\n\n    <ng-template #icon>\n        <div\n            appearance=\"icon\"\n            tuiWrapper\n            class=\"t-icon\"\n        >\n            <ng-container *polymorpheusOutlet=\"arrow\" />\n        </div>\n    </ng-template>\n</div>\n", styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:start}:host:not(._readonly) ::ng-deep input:not(:disabled){cursor:pointer}:host._readonly ::ng-deep input{cursor:default}.t-hosted{display:block;border-radius:inherit}.t-textfield{border-radius:inherit;text-align:inherit}.t-value{display:flex;inline-size:100%;align-items:center}.t-primitive-value{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}\n"] }]
        }], propDecorators: { textfield: [{
                type: ViewChild,
                args: [TuiPrimitiveTextfieldComponent]
            }], dropdown: [{
                type: ViewChild,
                args: [TuiDropdownOpen]
            }], nativeSelect: [{
                type: ContentChild,
                args: [AbstractTuiNativeSelect, { static: true }]
            }], datalist: [{
                type: ContentChild,
                args: [TuiDataListDirective, { read: TemplateRef }]
            }], stringify: [{
                type: Input
            }], identityMatcher: [{
                type: Input
            }], valueContent: [{
                type: Input
            }] } });

class TuiSelectDirective extends AbstractTuiTextfieldHost {
    get readOnly() {
        return true;
    }
    get value() {
        return this.host.computedValue;
    }
    get stringify() {
        return this.host.stringify;
    }
    onValueChange(value) {
        this.host.onValueChange(value);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSelectDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiSelectDirective, selector: "tui-select", providers: [tuiAsTextfieldHost(TuiSelectDirective)], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSelectDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'tui-select',
                    providers: [tuiAsTextfieldHost(TuiSelectDirective)],
                }]
        }] });

class TuiSelectModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSelectModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.2.12", ngImport: i0, type: TuiSelectModule, declarations: [TuiSelectComponent,
            TuiSelectDirective,
            TuiNativeSelectComponent,
            TuiNativeSelectGroupComponent], imports: [CommonModule,
            PolymorpheusOutlet,
            PolymorpheusTemplate,
            TuiPrimitiveTextfieldModule,
            TuiSelectOptionModule,
            TuiArrowComponent,
            TuiWrapperModule,
            TuiTextfieldControllerModule,
            TuiStringifyContentPipe,
            TuiLegacyDropdownOpenMonitorDirective, i1$1.TuiDropdownOptionsDirective, i1$1.TuiDropdownDriverDirective, i1$1.TuiDropdownDirective, i1$1.TuiDropdownComponent, i1$1.TuiDropdownOpen, i1$1.TuiDropdownOpenLegacy, i1$1.TuiDropdownPortal, i1$1.TuiDropdownManual, i1$1.TuiDropdownHover, i1$1.TuiDropdownContext, i1$1.TuiDropdownPosition, i1$1.TuiDropdownPositionSided, i1$1.TuiDropdownSelection, i2.TuiDataListComponent, i2.TuiDataListDirective, i2.TuiOption, i2.TuiOptGroup, i3.TuiDataListWrapperComponent, i3.TuiDataListGroupWrapperComponent, i2.TuiDataListDirective], exports: [TuiSelectComponent,
            TuiSelectDirective,
            TuiTextfieldComponent,
            TuiNativeSelectComponent,
            TuiNativeSelectGroupComponent, i1$1.TuiDropdownOptionsDirective, i1$1.TuiDropdownDriverDirective, i1$1.TuiDropdownDirective, i1$1.TuiDropdownComponent, i1$1.TuiDropdownOpen, i1$1.TuiDropdownOpenLegacy, i1$1.TuiDropdownPortal, i1$1.TuiDropdownManual, i1$1.TuiDropdownHover, i1$1.TuiDropdownContext, i1$1.TuiDropdownPosition, i1$1.TuiDropdownPositionSided, i1$1.TuiDropdownSelection, i2.TuiDataListComponent, i2.TuiDataListDirective, i2.TuiOption, i2.TuiOptGroup, i3.TuiDataListWrapperComponent, i3.TuiDataListGroupWrapperComponent, i2.TuiDataListDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSelectModule, imports: [CommonModule,
            TuiPrimitiveTextfieldModule,
            TuiSelectOptionModule,
            TuiArrowComponent,
            TuiWrapperModule,
            TuiTextfieldControllerModule, i1$1.TuiDropdownComponent, i2.TuiDataListComponent, i2.TuiOption, i3.TuiDataListWrapperComponent, i3.TuiDataListGroupWrapperComponent] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSelectModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        PolymorpheusOutlet,
                        PolymorpheusTemplate,
                        TuiPrimitiveTextfieldModule,
                        TuiSelectOptionModule,
                        TuiArrowComponent,
                        TuiWrapperModule,
                        TuiTextfieldControllerModule,
                        TuiStringifyContentPipe,
                        TuiLegacyDropdownOpenMonitorDirective,
                        ...TuiDropdown,
                        ...TuiDataList,
                        ...TuiDataListWrapper,
                    ],
                    declarations: [
                        TuiSelectComponent,
                        TuiSelectDirective,
                        TuiNativeSelectComponent,
                        TuiNativeSelectGroupComponent,
                    ],
                    exports: [
                        TuiSelectComponent,
                        TuiSelectDirective,
                        TuiTextfieldComponent,
                        TuiNativeSelectComponent,
                        TuiNativeSelectGroupComponent,
                        ...TuiDropdown,
                        ...TuiDataList,
                        ...TuiDataListWrapper,
                    ],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_SELECT_DEFAULT_OPTIONS, TUI_SELECT_OPTIONS, TuiNativeSelectComponent, TuiNativeSelectGroupComponent, TuiSelectComponent, TuiSelectDirective, TuiSelectModule, tuiSelectOptionsProvider };
//# sourceMappingURL=taiga-ui-legacy-components-select.mjs.map
