import { __decorate } from 'tslib';
import * as i0 from '@angular/core';
import { inject, Component, ChangeDetectionStrategy, ViewChild, Input, NgModule } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { tuiToGradient, tuiParseGradient, tuiGetGradientData } from '@taiga-ui/cdk/utils/color';
import { tuiPure } from '@taiga-ui/cdk/utils/miscellaneous';
import * as i1$1 from '@taiga-ui/core/directives/dropdown';
import { tuiDropdownOptionsProvider, TuiDropdown } from '@taiga-ui/core/directives/dropdown';
import { AbstractTuiControl } from '@taiga-ui/legacy/classes';
import * as i1 from '@taiga-ui/legacy/components/primitive-textfield';
import { TuiPrimitiveTextfieldComponent, TuiPrimitiveTextfieldModule } from '@taiga-ui/legacy/components/primitive-textfield';
import * as i2 from '@taiga-ui/legacy/directives/textfield-controller';
import { TuiTextfieldControllerModule } from '@taiga-ui/legacy/directives/textfield-controller';
import * as i3 from '@taiga-ui/legacy/components/color-selector';
import { TuiColorSelectorModule } from '@taiga-ui/legacy/components/color-selector';
import * as i4 from '@maskito/angular';
import { MaskitoDirective } from '@maskito/angular';
import { CommonModule } from '@angular/common';

class TuiInputColorComponent extends AbstractTuiControl {
    constructor() {
        super(...arguments);
        this.domSanitizer = inject(DomSanitizer);
        this.colors = new Map();
        this.open = false;
    }
    get focused() {
        return !!this.textfield?.focused;
    }
    get nativeFocusableElement() {
        return this.computedDisabled || !this.textfield
            ? null
            : this.textfield.nativeFocusableElement;
    }
    get background() {
        return this.sanitize(this.value, this.domSanitizer);
    }
    get mode() {
        if (this.value.startsWith('#')) {
            return 'hex';
        }
        return this.value.startsWith('rgb') ? 'rgb' : 'gradient';
    }
    maskitoOptions(mode) {
        return mode === 'hex' ? { mask: ['#', ...new Array(6).fill(/[0-9a-f]/i)] } : null;
    }
    onClick() {
        this.open = !this.open;
    }
    /** deprecated use 'value' setter */
    onValueChange(textValue) {
        this.value = textValue;
    }
    onFocused(focused) {
        this.updateFocused(focused);
    }
    getFallbackValue() {
        return '#000000';
    }
    sanitize(value, domSanitizer) {
        return value.startsWith('linear-gradient(')
            ? domSanitizer.bypassSecurityTrustStyle(tuiToGradient(tuiParseGradient(tuiGetGradientData(value))))
            : value;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputColorComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiInputColorComponent, selector: "tui-input-color", inputs: { colors: "colors" }, host: { listeners: { "click": "onClick()" } }, viewQueries: [{ propertyName: "textfield", first: true, predicate: TuiPrimitiveTextfieldComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<div\n    class=\"t-wrapper\"\n    [tuiDropdown]=\"picker\"\n    [(tuiDropdownOpen)]=\"open\"\n>\n    <tui-primitive-textfield\n        class=\"t-textfield\"\n        [disabled]=\"disabled\"\n        [focusable]=\"focusable\"\n        [invalid]=\"computedInvalid\"\n        [maskito]=\"maskitoOptions(mode)\"\n        [nativeId]=\"nativeId\"\n        [pseudoActive]=\"pseudoActive\"\n        [pseudoFocus]=\"computedFocused\"\n        [pseudoHover]=\"pseudoHover\"\n        [readOnly]=\"readOnly\"\n        [tuiTextfieldIconLeft]=\"color\"\n        [(value)]=\"value\"\n        (focusedChange)=\"onFocused($event)\"\n    >\n        <ng-content />\n    </tui-primitive-textfield>\n</div>\n\n<ng-template #color>\n    <div\n        class=\"t-color\"\n        [style.background]=\"background\"\n    ></div>\n</ng-template>\n\n<ng-template #picker>\n    <tui-color-selector\n        [colors]=\"colors\"\n        [(color)]=\"value\"\n    />\n</ng-template>\n", styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:start}.t-wrapper{display:flex;border-radius:inherit;inline-size:100%}.t-textfield{border-radius:inherit;text-align:inherit;inline-size:inherit}.t-textfield ::ng-deep .t-input{text-transform:lowercase!important}.t-color{inline-size:1.5rem;block-size:1.5rem;box-shadow:inset 0 0 0 1px var(--tui-base-03-dark);border-radius:.125rem;pointer-events:auto!important}\n"], dependencies: [{ kind: "component", type: i1.TuiPrimitiveTextfieldComponent, selector: "tui-primitive-textfield", inputs: ["editable", "iconCleaner", "readOnly", "invalid", "disabled", "value"], outputs: ["valueChange"] }, { kind: "directive", type: i1.TuiPrimitiveTextfieldDirective, selector: "tui-primitive-textfield" }, { kind: "directive", type: i2.TuiTextfieldIconLeftDirective, selector: "[tuiTextfieldIconLeft]", inputs: ["tuiTextfieldIconLeft"] }, { kind: "component", type: i3.TuiColorSelectorComponent, selector: "tui-color-selector", inputs: ["colors", "color"], outputs: ["colorChange"] }, { kind: "directive", type: i4.MaskitoDirective, selector: "[maskito]", inputs: ["maskito", "maskitoElement"] }, { kind: "directive", type: i1$1.TuiDropdownDirective, selector: "[tuiDropdown]:not(ng-container):not(ng-template)", inputs: ["tuiDropdown"], exportAs: ["tuiDropdown"] }, { kind: "directive", type: i1$1.TuiDropdownOpen, selector: "[tuiDropdown][tuiDropdownOpen],[tuiDropdown][tuiDropdownOpenChange]", inputs: ["tuiDropdownEnabled", "tuiDropdownOpen"], outputs: ["tuiDropdownOpenChange"] }], viewProviders: [tuiDropdownOptionsProvider({ maxHeight: 600 })], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
__decorate([
    tuiPure
], TuiInputColorComponent.prototype, "maskitoOptions", null);
__decorate([
    tuiPure
], TuiInputColorComponent.prototype, "sanitize", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputColorComponent, decorators: [{
            type: Component,
            args: [{ standalone: false, selector: 'tui-input-color', changeDetection: ChangeDetectionStrategy.OnPush, viewProviders: [tuiDropdownOptionsProvider({ maxHeight: 600 })], host: {
                        '(click)': 'onClick()',
                    }, template: "<div\n    class=\"t-wrapper\"\n    [tuiDropdown]=\"picker\"\n    [(tuiDropdownOpen)]=\"open\"\n>\n    <tui-primitive-textfield\n        class=\"t-textfield\"\n        [disabled]=\"disabled\"\n        [focusable]=\"focusable\"\n        [invalid]=\"computedInvalid\"\n        [maskito]=\"maskitoOptions(mode)\"\n        [nativeId]=\"nativeId\"\n        [pseudoActive]=\"pseudoActive\"\n        [pseudoFocus]=\"computedFocused\"\n        [pseudoHover]=\"pseudoHover\"\n        [readOnly]=\"readOnly\"\n        [tuiTextfieldIconLeft]=\"color\"\n        [(value)]=\"value\"\n        (focusedChange)=\"onFocused($event)\"\n    >\n        <ng-content />\n    </tui-primitive-textfield>\n</div>\n\n<ng-template #color>\n    <div\n        class=\"t-color\"\n        [style.background]=\"background\"\n    ></div>\n</ng-template>\n\n<ng-template #picker>\n    <tui-color-selector\n        [colors]=\"colors\"\n        [(color)]=\"value\"\n    />\n</ng-template>\n", styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:start}.t-wrapper{display:flex;border-radius:inherit;inline-size:100%}.t-textfield{border-radius:inherit;text-align:inherit;inline-size:inherit}.t-textfield ::ng-deep .t-input{text-transform:lowercase!important}.t-color{inline-size:1.5rem;block-size:1.5rem;box-shadow:inset 0 0 0 1px var(--tui-base-03-dark);border-radius:.125rem;pointer-events:auto!important}\n"] }]
        }], propDecorators: { textfield: [{
                type: ViewChild,
                args: [TuiPrimitiveTextfieldComponent]
            }], colors: [{
                type: Input
            }], maskitoOptions: [], sanitize: [] } });

class TuiInputColorModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputColorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.2.12", ngImport: i0, type: TuiInputColorModule, declarations: [TuiInputColorComponent], imports: [CommonModule,
            TuiPrimitiveTextfieldModule,
            TuiTextfieldControllerModule,
            TuiColorSelectorModule,
            MaskitoDirective, i1$1.TuiDropdownOptionsDirective, i1$1.TuiDropdownDriverDirective, i1$1.TuiDropdownDirective, i1$1.TuiDropdownComponent, i1$1.TuiDropdownOpen, i1$1.TuiDropdownOpenLegacy, i1$1.TuiDropdownPortal, i1$1.TuiDropdownManual, i1$1.TuiDropdownHover, i1$1.TuiDropdownContext, i1$1.TuiDropdownPosition, i1$1.TuiDropdownPositionSided, i1$1.TuiDropdownSelection], exports: [TuiInputColorComponent, i1$1.TuiDropdownOptionsDirective, i1$1.TuiDropdownDriverDirective, i1$1.TuiDropdownDirective, i1$1.TuiDropdownComponent, i1$1.TuiDropdownOpen, i1$1.TuiDropdownOpenLegacy, i1$1.TuiDropdownPortal, i1$1.TuiDropdownManual, i1$1.TuiDropdownHover, i1$1.TuiDropdownContext, i1$1.TuiDropdownPosition, i1$1.TuiDropdownPositionSided, i1$1.TuiDropdownSelection] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputColorModule, imports: [CommonModule,
            TuiPrimitiveTextfieldModule,
            TuiTextfieldControllerModule,
            TuiColorSelectorModule, i1$1.TuiDropdownComponent] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputColorModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        TuiPrimitiveTextfieldModule,
                        TuiTextfieldControllerModule,
                        TuiColorSelectorModule,
                        MaskitoDirective,
                        ...TuiDropdown,
                    ],
                    declarations: [TuiInputColorComponent],
                    exports: [TuiInputColorComponent, ...TuiDropdown],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TuiInputColorComponent, TuiInputColorModule };
//# sourceMappingURL=taiga-ui-legacy-components-input-color.mjs.map
