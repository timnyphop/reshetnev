import { __decorate } from 'tslib';
import * as i1 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { inject, EventEmitter, Component, ChangeDetectionStrategy, ViewChild, Input, Output } from '@angular/core';
import * as i2 from '@angular/forms';
import { FormsModule } from '@angular/forms';
import { TUI_NON_DIGITS_REGEXP, CHAR_PLUS } from '@taiga-ui/cdk/constants';
import { tuiCreateToken, tuiProvideOptions, tuiPure } from '@taiga-ui/cdk/utils/miscellaneous';
import { TuiButton } from '@taiga-ui/core/components/button';
import * as i3 from '@taiga-ui/core/components/data-list';
import { TuiDataList } from '@taiga-ui/core/components/data-list';
import { TuiAppearance } from '@taiga-ui/core/directives/appearance';
import * as i4 from '@taiga-ui/core/directives/dropdown';
import { TuiDropdown } from '@taiga-ui/core/directives/dropdown';
import { TuiGroup } from '@taiga-ui/core/directives/group';
import * as i5 from '@taiga-ui/core/directives/hint';
import { TuiHint } from '@taiga-ui/core/directives/hint';
import { TuiFlagPipe } from '@taiga-ui/core/pipes/flag';
import { TUI_COUNTRIES } from '@taiga-ui/kit/tokens';
import { AbstractTuiControl, tuiAsControl } from '@taiga-ui/legacy/classes';
import { TUI_ARROW, TuiArrowComponent } from '@taiga-ui/legacy/components/arrow';
import * as i6 from '@taiga-ui/legacy/components/input-phone';
import { TuiInputPhoneComponent, TuiInputPhoneModule } from '@taiga-ui/legacy/components/input-phone';
import * as i7 from '@taiga-ui/legacy/components/primitive-textfield';
import { TuiPrimitiveTextfieldComponent, TuiPrimitiveTextfieldModule } from '@taiga-ui/legacy/components/primitive-textfield';
import * as i8 from '@taiga-ui/legacy/directives';
import { TUI_TEXTFIELD_SIZE, TuiLegacyDropdownOpenMonitorDirective, TuiTextfieldControllerModule } from '@taiga-ui/legacy/directives';
import { TuiToCountryCodePipe, TuiIsoToCountryCodePipe } from '@taiga-ui/legacy/pipes';
import { TUI_COUNTRIES_MASKS, tuiAsFocusableItemAccessor } from '@taiga-ui/legacy/tokens';
import { tuiIsoToCountryCode, tuiGetMaxAllowedPhoneLength, FIXED_DROPDOWN_CONTROLLER_PROVIDER } from '@taiga-ui/legacy/utils';
import { PolymorpheusOutlet, PolymorpheusTemplate } from '@taiga-ui/polymorpheus';
import { tuiGetClipboardDataText } from '@taiga-ui/cdk/utils/dom';

/**
 * @deprecated: drop in v5.0 use {@link TuiInputPhoneInternational}
 * https://taiga-ui.dev/components/input-phone-international
 */
const TUI_INPUT_PHONE_INTERNATIONAL_DEFAULT_OPTIONS = {
    countries: [],
    countryIsoCode: 'RU',
};
/**
 * @deprecated: drop in v5.0 use {@link TuiInputPhoneInternational}
 * https://taiga-ui.dev/components/input-phone-international
 */
const TUI_INPUT_PHONE_INTERNATIONAL_OPTIONS = tuiCreateToken(TUI_INPUT_PHONE_INTERNATIONAL_DEFAULT_OPTIONS);
/**
 * @deprecated: drop in v5.0 use {@link TuiInputPhoneInternational}
 * https://taiga-ui.dev/components/input-phone-international
 */
function tuiInputPhoneInternationalOptionsProvider(options) {
    return tuiProvideOptions(TUI_INPUT_PHONE_INTERNATIONAL_OPTIONS, options, TUI_INPUT_PHONE_INTERNATIONAL_DEFAULT_OPTIONS);
}

/**
 * @deprecated: drop in v5.0
 */
function tuiExtractValueFromEvent(event) {
    return 'dataTransfer' in event
        ? event.dataTransfer?.getData('text/plain') || ''
        : tuiGetClipboardDataText(event);
}

const MASK_SYMBOLS = /[ \-_()]/g;
/**
 * @deprecated: drop in v5.0 use {@link TuiInputPhoneInternational}
 * https://taiga-ui.dev/components/input-phone-international
 */
class TuiInputPhoneInternationalComponent extends AbstractTuiControl {
    constructor() {
        super(...arguments);
        this.options = inject(TUI_INPUT_PHONE_INTERNATIONAL_OPTIONS);
        this.extractCountryCodePipe = inject(TuiToCountryCodePipe);
        this.textfieldSize = inject(TUI_TEXTFIELD_SIZE);
        this.open = false;
        this.countriesNames$ = inject(TUI_COUNTRIES);
        this.countriesMasks = inject(TUI_COUNTRIES_MASKS);
        this.arrow = TUI_ARROW;
        this.countries = this.options.countries;
        this.countryIsoCodeChange = new EventEmitter();
        this.countryIsoCode = this.options.countryIsoCode;
    }
    set isoCode(code) {
        if (this.countryIsoCode === code) {
            return;
        }
        this.inputPhoneComponent?.writeValue(this.value);
        this.countryIsoCode = code;
    }
    get nativeFocusableElement() {
        return this.inputPhoneComponent && !this.computedDisabled
            ? this.inputPhoneComponent.nativeFocusableElement
            : null;
    }
    get focused() {
        return ((!!this.primitiveTextfield && this.primitiveTextfield.focused) ||
            (!!this.inputPhoneComponent && this.inputPhoneComponent.focused));
    }
    get inputPhoneCountryCode() {
        return tuiIsoToCountryCode(this.countriesMasks, this.countryIsoCode);
    }
    get phoneMaskAfterCountryCode() {
        const countryCode = this.inputPhoneCountryCode;
        return this.calculateMaskAfterCountryCode(this.countriesMasks[this.countryIsoCode], countryCode);
    }
    onPaste(event) {
        let value = tuiExtractValueFromEvent(event).replace(TUI_NON_DIGITS_REGEXP, '');
        const countryIsoCode = this.extractCountryCodePipe.transform(value, this.countries);
        if (!countryIsoCode) {
            this.value = `${this.inputPhoneCountryCode}${value}`
                .replaceAll(MASK_SYMBOLS, '')
                .slice(0, tuiGetMaxAllowedPhoneLength(this.countriesMasks, this.countryIsoCode));
            return;
        }
        if (countryIsoCode === 'RU') {
            value = value.replace(/^8/, '7');
        }
        this.updateCountryIsoCode(countryIsoCode);
        this.value = `${CHAR_PLUS}${value}`;
    }
    onItemClick(isoCode) {
        this.open = false;
        this.updateCountryIsoCode(isoCode);
        // recalculates mask inside inputPhone to prevent isoCode conflict
        this.cdr.detectChanges();
        const maxLength = tuiGetMaxAllowedPhoneLength(this.countriesMasks, isoCode);
        if (this.value.length > maxLength) {
            this.value = this.value.slice(0, maxLength);
        }
        if (this.nativeFocusableElement) {
            this.nativeFocusableElement.focus();
        }
    }
    setDisabledState() {
        super.setDisabledState();
        this.close();
    }
    get size() {
        return this.textfieldSize.size;
    }
    onActiveZone(active) {
        this.updateFocused(active);
    }
    getFallbackValue() {
        return '';
    }
    calculateMaskAfterCountryCode(mask, countryCode) {
        return mask.replace(countryCode, '').trim();
    }
    close() {
        this.open = false;
    }
    updateCountryIsoCode(code) {
        this.countryIsoCode = code;
        this.countryIsoCodeChange.emit(code);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputPhoneInternationalComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiInputPhoneInternationalComponent, isStandalone: true, selector: "tui-input-phone-international", inputs: { countries: "countries", isoCode: ["countryIsoCode", "isoCode"] }, outputs: { countryIsoCodeChange: "countryIsoCodeChange" }, host: { listeners: { "paste.capture.prevent.stop": "onPaste($event)", "drop.capture.prevent.stop": "onPaste($event)" }, properties: { "attr.data-size": "size" } }, providers: [
            tuiAsFocusableItemAccessor(TuiInputPhoneInternationalComponent),
            tuiAsControl(TuiInputPhoneInternationalComponent),
            TuiToCountryCodePipe,
        ], viewQueries: [{ propertyName: "inputPhoneComponent", first: true, predicate: TuiInputPhoneComponent, descendants: true }, { propertyName: "primitiveTextfield", first: true, predicate: TuiPrimitiveTextfieldComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<div\n    *ngIf=\"countriesNames$ | async as countriesNames\"\n    tuiDropdownOpenMonitor\n    [tuiDropdown]=\"dropdown\"\n    [tuiDropdownEnabled]=\"!readOnly\"\n    [(tuiDropdownOpen)]=\"open\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n>\n    <div tuiGroup>\n        <tui-primitive-textfield\n            tuiHintContent=\"\"\n            tuiTextfieldPostfix=\"\"\n            tuiTextfieldPrefix=\"\"\n            class=\"t-country-select\"\n            [disabled]=\"disabled\"\n            [editable]=\"false\"\n            [focusable]=\"focusable\"\n            [pseudoFocus]=\"open || null\"\n            [readOnly]=\"readOnly\"\n            [style.flex]=\"'0 0 auto'\"\n            [tuiTextfieldCustomContent]=\"countryValueContent\"\n            [tuiTextfieldIcon]=\"icon\"\n            [tuiTextfieldLabelOutside]=\"true\"\n        />\n        <tui-input-phone\n            class=\"t-input-phone\"\n            [countryCode]=\"inputPhoneCountryCode\"\n            [disabled]=\"disabled\"\n            [focusable]=\"focusable\"\n            [ngModelOptions]=\"{standalone: true}\"\n            [phoneMaskAfterCountryCode]=\"phoneMaskAfterCountryCode\"\n            [pseudoFocus]=\"pseudoFocus\"\n            [pseudoHover]=\"pseudoHover\"\n            [pseudoInvalid]=\"computedInvalid\"\n            [readOnly]=\"readOnly\"\n            [style.flex]=\"'0 0 auto'\"\n            [(ngModel)]=\"value\"\n        >\n            <ng-content />\n            <input\n                autocomplete=\"new-password\"\n                tuiTextfieldLegacy\n            />\n        </tui-input-phone>\n    </div>\n\n    <ng-template #dropdown>\n        <tui-data-list>\n            <button\n                *ngFor=\"let item of countries\"\n                tuiOption\n                type=\"button\"\n                (click)=\"onItemClick(item)\"\n            >\n                <img\n                    alt=\"\"\n                    class=\"t-flag\"\n                    [src]=\"item | tuiFlag\"\n                />\n                <span class=\"t-country-item-name\">\n                    {{ countriesNames[item] }}\n                </span>\n                <span class=\"t-country-item-code\">\n                    {{ item | tuiIsoToCountryCode }}\n                </span>\n            </button>\n        </tui-data-list>\n    </ng-template>\n\n    <ng-template #countryValueContent>\n        <img\n            class=\"t-flag t-flag_select\"\n            [alt]=\"countriesNames[countryIsoCode]\"\n            [src]=\"countryIsoCode | tuiFlag\"\n        />\n    </ng-template>\n\n    <ng-template #icon>\n        <div tuiAppearance=\"icon\">\n            <ng-container *polymorpheusOutlet=\"arrow\" />\n        </div>\n    </ng-template>\n</div>\n", styles: [":host{display:block}:host._disabled{pointer-events:none}.t-country-select{inline-size:5.625rem}.t-country-select:not(._readonly) ::ng-deep input:not(:disabled){cursor:pointer}.t-country-select._readonly ::ng-deep input{cursor:default}.t-country-select[data-size=m]{inline-size:5.5rem}.t-country-select[data-size=s]{inline-size:2rem}.t-country-select[data-size=s] .t-flag{margin-left:-1rem}.t-input-phone{flex:1}.t-flag{inline-size:1.75rem;block-size:1.75rem;border-radius:50%}.t-flag_select{margin-left:-.5rem}.t-country-item-name{margin-left:.75rem;margin-right:auto}.t-country-item-code{color:var(--tui-text-secondary);margin-right:.25rem}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "pipe", type: i1.AsyncPipe, name: "async" }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: PolymorpheusOutlet, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { kind: "directive", type: TuiAppearance, selector: "[tuiAppearance]", inputs: ["tuiAppearance", "tuiAppearanceState", "tuiAppearanceFocus", "tuiAppearanceMode"] }, { kind: "component", type: i3.TuiDataListComponent, selector: "tui-data-list", inputs: ["emptyContent", "size"] }, { kind: "component", type: i3.TuiOption, selector: "button[tuiOption], a[tuiOption], label[tuiOption]", inputs: ["disabled", "value"] }, { kind: "directive", type: i4.TuiDropdownDirective, selector: "[tuiDropdown]:not(ng-container):not(ng-template)", inputs: ["tuiDropdown"], exportAs: ["tuiDropdown"] }, { kind: "directive", type: i4.TuiDropdownOpen, selector: "[tuiDropdown][tuiDropdownOpen],[tuiDropdown][tuiDropdownOpenChange]", inputs: ["tuiDropdownEnabled", "tuiDropdownOpen"], outputs: ["tuiDropdownOpenChange"] }, { kind: "pipe", type: TuiFlagPipe, name: "tuiFlag" }, { kind: "directive", type: TuiGroup, selector: "[tuiGroup]:not(ng-container)", inputs: ["orientation", "collapsed", "rounded", "size"] }, { kind: "directive", type: i5.TuiHintOptionsDirective, selector: "[tuiHintContent]", inputs: ["tuiHintContent", "tuiHintDirection", "tuiHintAppearance", "tuiHintShowDelay", "tuiHintHideDelay"] }, { kind: "ngmodule", type: TuiInputPhoneModule }, { kind: "component", type: i6.TuiInputPhoneComponent, selector: "tui-input-phone", inputs: ["phoneMaskAfterCountryCode", "allowText", "search", "countryCode"], outputs: ["searchChange"] }, { kind: "directive", type: i6.TuiInputPhoneDirective, selector: "tui-input-phone" }, { kind: "component", type: i7.TuiTextfieldComponent, selector: "input[tuiTextfieldLegacy], textarea[tuiTextfieldLegacy]" }, { kind: "pipe", type: TuiIsoToCountryCodePipe, name: "tuiIsoToCountryCode" }, { kind: "directive", type: TuiLegacyDropdownOpenMonitorDirective, selector: "[tuiDropdownOpenMonitor]" }, { kind: "ngmodule", type: TuiPrimitiveTextfieldModule }, { kind: "component", type: i7.TuiPrimitiveTextfieldComponent, selector: "tui-primitive-textfield", inputs: ["editable", "iconCleaner", "readOnly", "invalid", "disabled", "value"], outputs: ["valueChange"] }, { kind: "directive", type: i7.TuiPrimitiveTextfieldDirective, selector: "tui-primitive-textfield" }, { kind: "ngmodule", type: TuiTextfieldControllerModule }, { kind: "directive", type: i8.TuiTextfieldCustomContentDirective, selector: "[tuiTextfieldCustomContent]", inputs: ["tuiTextfieldCustomContent"] }, { kind: "directive", type: i8.TuiTextfieldLabelOutsideDirective, selector: "[tuiTextfieldLabelOutside]", inputs: ["tuiTextfieldLabelOutside"] }, { kind: "directive", type: i8.TuiTextfieldIconDirective, selector: "[tuiTextfieldIcon]", inputs: ["tuiTextfieldIcon"] }, { kind: "directive", type: i8.TuiTextfieldPrefixDirective, selector: "[tuiTextfieldPrefix]", inputs: ["tuiTextfieldPrefix"] }, { kind: "directive", type: i8.TuiTextfieldPostfixDirective, selector: "[tuiTextfieldPostfix]", inputs: ["tuiTextfieldPostfix"] }], viewProviders: [FIXED_DROPDOWN_CONTROLLER_PROVIDER], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
__decorate([
    tuiPure
], TuiInputPhoneInternationalComponent.prototype, "calculateMaskAfterCountryCode", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputPhoneInternationalComponent, decorators: [{
            type: Component,
            args: [{ standalone: true, selector: 'tui-input-phone-international', imports: [
                        CommonModule,
                        FormsModule,
                        PolymorpheusOutlet,
                        PolymorpheusTemplate,
                        TuiAppearance,
                        TuiArrowComponent,
                        TuiButton,
                        TuiDataList,
                        TuiDropdown,
                        TuiFlagPipe,
                        TuiGroup,
                        TuiHint,
                        TuiInputPhoneModule,
                        TuiIsoToCountryCodePipe,
                        TuiLegacyDropdownOpenMonitorDirective,
                        TuiPrimitiveTextfieldModule,
                        TuiTextfieldControllerModule,
                    ], changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        tuiAsFocusableItemAccessor(TuiInputPhoneInternationalComponent),
                        tuiAsControl(TuiInputPhoneInternationalComponent),
                        TuiToCountryCodePipe,
                    ], viewProviders: [FIXED_DROPDOWN_CONTROLLER_PROVIDER], host: {
                        '[attr.data-size]': 'size',
                        '(paste.capture.prevent.stop)': 'onPaste($event)',
                        '(drop.capture.prevent.stop)': 'onPaste($event)',
                    }, template: "<div\n    *ngIf=\"countriesNames$ | async as countriesNames\"\n    tuiDropdownOpenMonitor\n    [tuiDropdown]=\"dropdown\"\n    [tuiDropdownEnabled]=\"!readOnly\"\n    [(tuiDropdownOpen)]=\"open\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n>\n    <div tuiGroup>\n        <tui-primitive-textfield\n            tuiHintContent=\"\"\n            tuiTextfieldPostfix=\"\"\n            tuiTextfieldPrefix=\"\"\n            class=\"t-country-select\"\n            [disabled]=\"disabled\"\n            [editable]=\"false\"\n            [focusable]=\"focusable\"\n            [pseudoFocus]=\"open || null\"\n            [readOnly]=\"readOnly\"\n            [style.flex]=\"'0 0 auto'\"\n            [tuiTextfieldCustomContent]=\"countryValueContent\"\n            [tuiTextfieldIcon]=\"icon\"\n            [tuiTextfieldLabelOutside]=\"true\"\n        />\n        <tui-input-phone\n            class=\"t-input-phone\"\n            [countryCode]=\"inputPhoneCountryCode\"\n            [disabled]=\"disabled\"\n            [focusable]=\"focusable\"\n            [ngModelOptions]=\"{standalone: true}\"\n            [phoneMaskAfterCountryCode]=\"phoneMaskAfterCountryCode\"\n            [pseudoFocus]=\"pseudoFocus\"\n            [pseudoHover]=\"pseudoHover\"\n            [pseudoInvalid]=\"computedInvalid\"\n            [readOnly]=\"readOnly\"\n            [style.flex]=\"'0 0 auto'\"\n            [(ngModel)]=\"value\"\n        >\n            <ng-content />\n            <input\n                autocomplete=\"new-password\"\n                tuiTextfieldLegacy\n            />\n        </tui-input-phone>\n    </div>\n\n    <ng-template #dropdown>\n        <tui-data-list>\n            <button\n                *ngFor=\"let item of countries\"\n                tuiOption\n                type=\"button\"\n                (click)=\"onItemClick(item)\"\n            >\n                <img\n                    alt=\"\"\n                    class=\"t-flag\"\n                    [src]=\"item | tuiFlag\"\n                />\n                <span class=\"t-country-item-name\">\n                    {{ countriesNames[item] }}\n                </span>\n                <span class=\"t-country-item-code\">\n                    {{ item | tuiIsoToCountryCode }}\n                </span>\n            </button>\n        </tui-data-list>\n    </ng-template>\n\n    <ng-template #countryValueContent>\n        <img\n            class=\"t-flag t-flag_select\"\n            [alt]=\"countriesNames[countryIsoCode]\"\n            [src]=\"countryIsoCode | tuiFlag\"\n        />\n    </ng-template>\n\n    <ng-template #icon>\n        <div tuiAppearance=\"icon\">\n            <ng-container *polymorpheusOutlet=\"arrow\" />\n        </div>\n    </ng-template>\n</div>\n", styles: [":host{display:block}:host._disabled{pointer-events:none}.t-country-select{inline-size:5.625rem}.t-country-select:not(._readonly) ::ng-deep input:not(:disabled){cursor:pointer}.t-country-select._readonly ::ng-deep input{cursor:default}.t-country-select[data-size=m]{inline-size:5.5rem}.t-country-select[data-size=s]{inline-size:2rem}.t-country-select[data-size=s] .t-flag{margin-left:-1rem}.t-input-phone{flex:1}.t-flag{inline-size:1.75rem;block-size:1.75rem;border-radius:50%}.t-flag_select{margin-left:-.5rem}.t-country-item-name{margin-left:.75rem;margin-right:auto}.t-country-item-code{color:var(--tui-text-secondary);margin-right:.25rem}\n"] }]
        }], propDecorators: { inputPhoneComponent: [{
                type: ViewChild,
                args: [TuiInputPhoneComponent]
            }], primitiveTextfield: [{
                type: ViewChild,
                args: [TuiPrimitiveTextfieldComponent]
            }], countries: [{
                type: Input
            }], countryIsoCodeChange: [{
                type: Output
            }], isoCode: [{
                type: Input,
                args: ['countryIsoCode']
            }], calculateMaskAfterCountryCode: [] } });

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_INPUT_PHONE_INTERNATIONAL_DEFAULT_OPTIONS, TUI_INPUT_PHONE_INTERNATIONAL_OPTIONS, TuiInputPhoneInternationalComponent, tuiExtractValueFromEvent, tuiInputPhoneInternationalOptionsProvider };
//# sourceMappingURL=taiga-ui-legacy-components-input-phone-international.mjs.map
