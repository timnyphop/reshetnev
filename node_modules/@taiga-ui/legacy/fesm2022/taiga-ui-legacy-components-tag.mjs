import * as i0 from '@angular/core';
import { inject, EventEmitter, ElementRef, Component, ChangeDetectionStrategy, Input, Output, ViewChild, NgModule } from '@angular/core';
import { tuiInjectElement } from '@taiga-ui/cdk/utils/dom';
import { TUI_COMMON_ICONS } from '@taiga-ui/core/tokens';
import { tuiStringHashToHsl } from '@taiga-ui/core/utils/format';
import { tuiSizeBigger } from '@taiga-ui/core/utils/miscellaneous';
import { tuiCreateToken, tuiProvideOptions } from '@taiga-ui/cdk/utils/miscellaneous';
import * as i1 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i2 from '@angular/forms';
import { FormsModule } from '@angular/forms';
import * as i3 from '@taiga-ui/core/components/icon';
import { TuiIcon } from '@taiga-ui/core/components/icon';
import * as i4 from '@taiga-ui/core/components/loader';
import { TuiLoader } from '@taiga-ui/core/components/loader';
import * as i5 from '@taiga-ui/polymorpheus';
import { PolymorpheusOutlet, PolymorpheusTemplate } from '@taiga-ui/polymorpheus';

/**
 * @deprecated: drop in v5.0 use {@link TuiChip}
 * https://taiga-ui.dev/components/chip
 */
const TUI_TAG_DEFAULT_OPTIONS = {
    size: 'm',
    status: 'default',
    autoColor: false,
};
/**
 * @deprecated: drop in v5.0 use {@link TuiChip}
 * https://taiga-ui.dev/components/chip
 */
const TUI_TAG_OPTIONS = tuiCreateToken(TUI_TAG_DEFAULT_OPTIONS);
/**
 * @deprecated: drop in v5.0 use {@link TuiChip}
 * https://taiga-ui.dev/components/chip
 */
function tuiTagOptionsProvider(options) {
    return tuiProvideOptions(TUI_TAG_OPTIONS, options, TUI_TAG_DEFAULT_OPTIONS);
}

/**
 * @deprecated: drop in v5.0 use {@link TuiChip}
 * https://taiga-ui.dev/components/chip
 */
class TuiTagComponent {
    constructor() {
        this.el = tuiInjectElement();
        this.options = inject(TUI_TAG_OPTIONS);
        this.editing = false;
        this.icons = inject(TUI_COMMON_ICONS);
        this.editedText = null;
        this.value = '';
        this.editable = false;
        this.separator = ',';
        this.maxLength = null;
        this.size = this.options.size;
        this.showLoader = false;
        this.status = this.options.status;
        this.hoverable = false;
        this.removable = false;
        this.disabled = false;
        this.autoColor = this.options.autoColor;
        this.edited = new EventEmitter();
    }
    set input(input) {
        if (input) {
            input.nativeElement.focus();
        }
    }
    get backgroundColor() {
        return this.autoColor ? tuiStringHashToHsl(this.value) : null;
    }
    get canRemove() {
        return this.removable && !this.disabled && !this.showLoader;
    }
    get displayText() {
        return this.editedText === null ? this.value : this.editedText;
    }
    get loaderSize() {
        return tuiSizeBigger(this.size) ? 's' : 'xs';
    }
    edit(event) {
        if (!this.canEdit) {
            return;
        }
        event.preventDefault();
        this.editing = true;
        this.editedText = this.value;
    }
    remove(event) {
        if (!this.canRemove) {
            return;
        }
        event.preventDefault();
        event.stopPropagation();
        this.edited.emit('');
    }
    onInput(value) {
        const newTags = value.split(this.separator);
        if (newTags.length > 1) {
            this.save(String(newTags));
            return;
        }
        this.editedText = value;
    }
    onKeyDown(event) {
        event.stopPropagation();
        switch (event.key.toLowerCase()) {
            case 'enter':
                event.preventDefault();
                this.save(this.editedText || '');
                break;
            case 'escape':
            case 'esc':
                event.preventDefault();
                this.stopEditing();
                this.el.focus();
                break;
            default:
                break;
        }
    }
    onBlur() {
        if (this.editedText !== null) {
            this.save(this.editedText);
        }
    }
    get canEdit() {
        return this.editable && !this.disabled && !this.showLoader;
    }
    stopEditing() {
        this.editing = false;
        this.editedText = null;
    }
    save(value) {
        this.stopEditing();
        this.edited.emit(value.trim());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiTagComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiTagComponent, selector: "tui-tag, a[tuiTag], button[tuiTag]", inputs: { value: "value", editable: "editable", separator: "separator", maxLength: "maxLength", size: "size", showLoader: "showLoader", status: "status", hoverable: "hoverable", removable: "removable", disabled: "disabled", autoColor: "autoColor", leftContent: "leftContent" }, outputs: { edited: "edited" }, host: { listeners: { "keydown.delete": "remove($event)", "keydown.backspace": "remove($event)", "keydown.enter": "edit($event)" }, properties: { "attr.data-size": "size", "attr.data-status": "status", "class._editing": "editing", "class._hoverable": "hoverable", "class._autocolor": "autoColor", "class._disabled": "disabled" } }, viewQueries: [{ propertyName: "input", first: true, predicate: ["input"], descendants: true, read: ElementRef }], ngImport: i0, template: "<div\n    class=\"t-tag\"\n    [style.backgroundColor]=\"backgroundColor\"\n    (dblclick)=\"edit($event)\"\n>\n    <div\n        *ngIf=\"leftContent\"\n        class=\"t-content\"\n    >\n        <ng-container *polymorpheusOutlet=\"leftContent as text\">\n            {{ text }}\n        </ng-container>\n    </div>\n    <span\n        automation-id=\"tui-tag__text\"\n        class=\"t-text\"\n        [textContent]=\"displayText\"\n    ></span>\n    <tui-loader\n        *ngIf=\"showLoader\"\n        class=\"t-content\"\n        [inheritColor]=\"true\"\n        [size]=\"loaderSize\"\n    />\n    <tui-icon\n        *ngIf=\"canRemove\"\n        automation-id=\"tui-tag__remove\"\n        class=\"t-icon\"\n        [icon]=\"icons.close\"\n        (click)=\"remove($event)\"\n        (mousedown.stop.prevent.silent)=\"(0)\"\n    />\n</div>\n<input\n    *ngIf=\"editing\"\n    #input\n    automation-id=\"tui-tag__edit\"\n    type=\"text\"\n    class=\"t-edit\"\n    [attr.maxLength]=\"maxLength\"\n    [ngModel]=\"editedText\"\n    [ngModelOptions]=\"{standalone: true}\"\n    (blur)=\"onBlur()\"\n    (keydown)=\"onKeyDown($event)\"\n    (ngModelChange)=\"onInput($event)\"\n/>\n", styles: [":host{transition-property:background;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;position:relative;display:inline-block;font:var(--tui-font-text-s);line-height:1.25rem;max-inline-size:100%;cursor:default;outline:none;text-decoration:none;padding:0;border:0}:host:after{transition-property:background;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;position:absolute;top:0;left:0;inline-size:100%;block-size:100%;content:\"\";box-sizing:border-box;border-radius:inherit;pointer-events:none}:host._hoverable:hover[data-status=custom]:after,:host._hoverable:active[data-status=custom]:after{background-color:var(--tui-background-neutral-1)}:host:focus:after{border:2px solid var(--tui-border-focus)}:host[data-size=s]{font:var(--tui-font-text-xs);line-height:1.25rem;border-radius:var(--tui-radius-xs)}:host[data-size=m]{border-radius:var(--tui-radius-xs)}:host[data-size=l]{border-radius:var(--tui-radius-s)}:host[data-status=primary]{background-color:var(--tui-background-accent-1);color:var(--tui-text-primary-on-accent-1)}:host[data-status=primary]._hoverable:hover{background-color:var(--tui-background-accent-1-hover)}:host[data-status=primary]._hoverable:active{background-color:var(--tui-background-accent-1-pressed)}:host[data-status=error]{background-color:var(--tui-status-negative-pale);color:var(--tui-text-primary)}:host[data-status=error]._hoverable:hover,:host[data-status=error]._hoverable:active{background-color:var(--tui-status-negative-pale-hover)}:host-context([tuiTheme=\"dark\"]) :host[data-status=error]{background-color:var(--tui-status-negative-pale);color:var(--tui-text-primary)}:host-context([tuiTheme=\"dark\"]) :host[data-status=error]._hoverable:hover,:host-context([tuiTheme=\"dark\"]) :host[data-status=error]._hoverable:active{background-color:var(--tui-status-negative-pale-hover)}:host[data-status=success]{background-color:var(--tui-status-positive-pale);color:var(--tui-text-primary)}:host[data-status=success]._hoverable:hover,:host[data-status=success]._hoverable:active{background-color:var(--tui-status-positive-pale-hover)}:host-context([tuiTheme=\"dark\"]) :host[data-status=success]{background-color:var(--tui-status-positive-pale);color:var(--tui-text-primary)}:host-context([tuiTheme=\"dark\"]) :host[data-status=success]._hoverable:hover,:host-context([tuiTheme=\"dark\"]) :host[data-status=success]._hoverable:active{background-color:var(--tui-status-positive-pale-hover)}:host[data-status=warning]{background-color:var(--tui-status-warning-pale);color:var(--tui-text-primary)}:host[data-status=warning]._hoverable:hover,:host[data-status=warning]._hoverable:active{background-color:var(--tui-status-warning-pale-hover)}:host-context([tuiTheme=\"dark\"]) :host[data-status=warning]{background-color:var(--tui-status-warning-pale);color:var(--tui-text-primary)}:host-context([tuiTheme=\"dark\"]) :host[data-status=warning]._hoverable:hover,:host-context([tuiTheme=\"dark\"]) :host[data-status=warning]._hoverable:active{background-color:var(--tui-status-warning-pale-hover)}:host[data-status=default]{color:#fff;background-color:var(--tui-text-tertiary)}:host[data-status=default]._hoverable:hover{background-color:var(--tui-background-accent-opposite-pressed)}:host[data-status=default]._hoverable:active{background-color:var(--tui-background-accent-opposite-hover)}:host-context([tuiTheme=\"dark\"]) :host[data-status=default]{color:var(--tui-text-primary);background-color:var(--tui-background-neutral-1)}:host-context([tuiTheme=\"dark\"]) :host[data-status=default]._hoverable:hover{background-color:var(--tui-background-neutral-1-hover)}:host-context([tuiTheme=\"dark\"]) :host[data-status=default]._hoverable:active{background-color:var(--tui-background-neutral-1-pressed)}:host-context([tuiTheme=\"dark\"]) :host[data-status=default]:focus:after{border:2px solid var(--tui-background-base)}:host._editing{background:transparent!important}:host._disabled{pointer-events:none;opacity:var(--tui-disabled-opacity)}:host._hoverable{cursor:pointer}:host._autocolor{color:#000c}.t-text{white-space:pre;overflow:hidden;text-overflow:ellipsis;padding-right:.02em}.t-tag{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;position:relative;display:flex;inline-size:auto;align-items:center;font:inherit;border-radius:inherit}:host[data-size=s] .t-tag{block-size:1.25rem;padding:0 .375rem}:host[data-size=m] .t-tag{block-size:var(--tui-height-xs);padding:0 .5rem}:host[data-size=l] .t-tag{block-size:var(--tui-height-s);padding:0 .75rem}:host._editing .t-tag{visibility:hidden}.t-edit{padding:0;margin:0;border-width:0;border-radius:inherit;background:none;font-size:inherit;line-height:inherit;font-weight:inherit;color:inherit;caret-color:currentColor;outline:none;-webkit-appearance:none;appearance:none;word-break:keep-all;-webkit-text-fill-color:currentColor;position:absolute;top:0;left:0;font:inherit;color:var(--tui-text-primary);inline-size:100%;block-size:100%;box-sizing:border-box;padding:0 .5rem}.t-edit:-webkit-autofill,.t-edit:-webkit-autofill:hover,.t-edit:-webkit-autofill:focus{-webkit-text-fill-color:var(--tui-text-primary)!important;border-color:var(--tui-service-autofill-background);box-shadow:0 0 0 100rem var(--tui-service-autofill-background) inset!important}:host[data-size=s] .t-edit{padding:0 .375rem}:host[data-size=m] .t-edit{padding:0 .5rem}:host[data-size=l] .t-edit{padding:0 .75rem}.t-icon{font-size:1rem;block-size:100%;cursor:pointer;pointer-events:all;opacity:var(--tui-disabled-opacity);margin-inline-start:.25rem;margin-inline-end:-.25rem}.t-icon:hover{opacity:1}:host[data-size=s] .t-icon{margin-inline-start:0;block-size:.75rem}.t-content{inline-size:1rem;block-size:1rem;margin-inline-end:.25rem}\n"], dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i3.TuiIcon, selector: "tui-icon", inputs: ["icon", "background"] }, { kind: "component", type: i4.TuiLoader, selector: "tui-loader", inputs: ["size", "inheritColor", "overlay", "textContent", "showLoader"] }, { kind: "directive", type: i5.PolymorpheusOutlet, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiTagComponent, decorators: [{
            type: Component,
            args: [{ standalone: false, selector: 'tui-tag, a[tuiTag], button[tuiTag]', changeDetection: ChangeDetectionStrategy.OnPush, host: {
                        '[attr.data-size]': 'size',
                        '[attr.data-status]': 'status',
                        '[class._editing]': 'editing',
                        '[class._hoverable]': 'hoverable',
                        '[class._autocolor]': 'autoColor',
                        '[class._disabled]': 'disabled',
                        '(keydown.delete)': 'remove($event)',
                        '(keydown.backspace)': 'remove($event)',
                        '(keydown.enter)': 'edit($event)',
                    }, template: "<div\n    class=\"t-tag\"\n    [style.backgroundColor]=\"backgroundColor\"\n    (dblclick)=\"edit($event)\"\n>\n    <div\n        *ngIf=\"leftContent\"\n        class=\"t-content\"\n    >\n        <ng-container *polymorpheusOutlet=\"leftContent as text\">\n            {{ text }}\n        </ng-container>\n    </div>\n    <span\n        automation-id=\"tui-tag__text\"\n        class=\"t-text\"\n        [textContent]=\"displayText\"\n    ></span>\n    <tui-loader\n        *ngIf=\"showLoader\"\n        class=\"t-content\"\n        [inheritColor]=\"true\"\n        [size]=\"loaderSize\"\n    />\n    <tui-icon\n        *ngIf=\"canRemove\"\n        automation-id=\"tui-tag__remove\"\n        class=\"t-icon\"\n        [icon]=\"icons.close\"\n        (click)=\"remove($event)\"\n        (mousedown.stop.prevent.silent)=\"(0)\"\n    />\n</div>\n<input\n    *ngIf=\"editing\"\n    #input\n    automation-id=\"tui-tag__edit\"\n    type=\"text\"\n    class=\"t-edit\"\n    [attr.maxLength]=\"maxLength\"\n    [ngModel]=\"editedText\"\n    [ngModelOptions]=\"{standalone: true}\"\n    (blur)=\"onBlur()\"\n    (keydown)=\"onKeyDown($event)\"\n    (ngModelChange)=\"onInput($event)\"\n/>\n", styles: [":host{transition-property:background;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;position:relative;display:inline-block;font:var(--tui-font-text-s);line-height:1.25rem;max-inline-size:100%;cursor:default;outline:none;text-decoration:none;padding:0;border:0}:host:after{transition-property:background;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;position:absolute;top:0;left:0;inline-size:100%;block-size:100%;content:\"\";box-sizing:border-box;border-radius:inherit;pointer-events:none}:host._hoverable:hover[data-status=custom]:after,:host._hoverable:active[data-status=custom]:after{background-color:var(--tui-background-neutral-1)}:host:focus:after{border:2px solid var(--tui-border-focus)}:host[data-size=s]{font:var(--tui-font-text-xs);line-height:1.25rem;border-radius:var(--tui-radius-xs)}:host[data-size=m]{border-radius:var(--tui-radius-xs)}:host[data-size=l]{border-radius:var(--tui-radius-s)}:host[data-status=primary]{background-color:var(--tui-background-accent-1);color:var(--tui-text-primary-on-accent-1)}:host[data-status=primary]._hoverable:hover{background-color:var(--tui-background-accent-1-hover)}:host[data-status=primary]._hoverable:active{background-color:var(--tui-background-accent-1-pressed)}:host[data-status=error]{background-color:var(--tui-status-negative-pale);color:var(--tui-text-primary)}:host[data-status=error]._hoverable:hover,:host[data-status=error]._hoverable:active{background-color:var(--tui-status-negative-pale-hover)}:host-context([tuiTheme=\"dark\"]) :host[data-status=error]{background-color:var(--tui-status-negative-pale);color:var(--tui-text-primary)}:host-context([tuiTheme=\"dark\"]) :host[data-status=error]._hoverable:hover,:host-context([tuiTheme=\"dark\"]) :host[data-status=error]._hoverable:active{background-color:var(--tui-status-negative-pale-hover)}:host[data-status=success]{background-color:var(--tui-status-positive-pale);color:var(--tui-text-primary)}:host[data-status=success]._hoverable:hover,:host[data-status=success]._hoverable:active{background-color:var(--tui-status-positive-pale-hover)}:host-context([tuiTheme=\"dark\"]) :host[data-status=success]{background-color:var(--tui-status-positive-pale);color:var(--tui-text-primary)}:host-context([tuiTheme=\"dark\"]) :host[data-status=success]._hoverable:hover,:host-context([tuiTheme=\"dark\"]) :host[data-status=success]._hoverable:active{background-color:var(--tui-status-positive-pale-hover)}:host[data-status=warning]{background-color:var(--tui-status-warning-pale);color:var(--tui-text-primary)}:host[data-status=warning]._hoverable:hover,:host[data-status=warning]._hoverable:active{background-color:var(--tui-status-warning-pale-hover)}:host-context([tuiTheme=\"dark\"]) :host[data-status=warning]{background-color:var(--tui-status-warning-pale);color:var(--tui-text-primary)}:host-context([tuiTheme=\"dark\"]) :host[data-status=warning]._hoverable:hover,:host-context([tuiTheme=\"dark\"]) :host[data-status=warning]._hoverable:active{background-color:var(--tui-status-warning-pale-hover)}:host[data-status=default]{color:#fff;background-color:var(--tui-text-tertiary)}:host[data-status=default]._hoverable:hover{background-color:var(--tui-background-accent-opposite-pressed)}:host[data-status=default]._hoverable:active{background-color:var(--tui-background-accent-opposite-hover)}:host-context([tuiTheme=\"dark\"]) :host[data-status=default]{color:var(--tui-text-primary);background-color:var(--tui-background-neutral-1)}:host-context([tuiTheme=\"dark\"]) :host[data-status=default]._hoverable:hover{background-color:var(--tui-background-neutral-1-hover)}:host-context([tuiTheme=\"dark\"]) :host[data-status=default]._hoverable:active{background-color:var(--tui-background-neutral-1-pressed)}:host-context([tuiTheme=\"dark\"]) :host[data-status=default]:focus:after{border:2px solid var(--tui-background-base)}:host._editing{background:transparent!important}:host._disabled{pointer-events:none;opacity:var(--tui-disabled-opacity)}:host._hoverable{cursor:pointer}:host._autocolor{color:#000c}.t-text{white-space:pre;overflow:hidden;text-overflow:ellipsis;padding-right:.02em}.t-tag{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;position:relative;display:flex;inline-size:auto;align-items:center;font:inherit;border-radius:inherit}:host[data-size=s] .t-tag{block-size:1.25rem;padding:0 .375rem}:host[data-size=m] .t-tag{block-size:var(--tui-height-xs);padding:0 .5rem}:host[data-size=l] .t-tag{block-size:var(--tui-height-s);padding:0 .75rem}:host._editing .t-tag{visibility:hidden}.t-edit{padding:0;margin:0;border-width:0;border-radius:inherit;background:none;font-size:inherit;line-height:inherit;font-weight:inherit;color:inherit;caret-color:currentColor;outline:none;-webkit-appearance:none;appearance:none;word-break:keep-all;-webkit-text-fill-color:currentColor;position:absolute;top:0;left:0;font:inherit;color:var(--tui-text-primary);inline-size:100%;block-size:100%;box-sizing:border-box;padding:0 .5rem}.t-edit:-webkit-autofill,.t-edit:-webkit-autofill:hover,.t-edit:-webkit-autofill:focus{-webkit-text-fill-color:var(--tui-text-primary)!important;border-color:var(--tui-service-autofill-background);box-shadow:0 0 0 100rem var(--tui-service-autofill-background) inset!important}:host[data-size=s] .t-edit{padding:0 .375rem}:host[data-size=m] .t-edit{padding:0 .5rem}:host[data-size=l] .t-edit{padding:0 .75rem}.t-icon{font-size:1rem;block-size:100%;cursor:pointer;pointer-events:all;opacity:var(--tui-disabled-opacity);margin-inline-start:.25rem;margin-inline-end:-.25rem}.t-icon:hover{opacity:1}:host[data-size=s] .t-icon{margin-inline-start:0;block-size:.75rem}.t-content{inline-size:1rem;block-size:1rem;margin-inline-end:.25rem}\n"] }]
        }], propDecorators: { value: [{
                type: Input
            }], editable: [{
                type: Input
            }], separator: [{
                type: Input
            }], maxLength: [{
                type: Input
            }], size: [{
                type: Input
            }], showLoader: [{
                type: Input
            }], status: [{
                type: Input
            }], hoverable: [{
                type: Input
            }], removable: [{
                type: Input
            }], disabled: [{
                type: Input
            }], autoColor: [{
                type: Input
            }], leftContent: [{
                type: Input
            }], edited: [{
                type: Output
            }], input: [{
                type: ViewChild,
                args: ['input', { read: ElementRef }]
            }] } });

/**
 * @deprecated: drop in v5.0 use {@link TuiChip}
 * https://taiga-ui.dev/components/chip
 */
class TuiTagModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiTagModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.2.12", ngImport: i0, type: TuiTagModule, declarations: [TuiTagComponent], imports: [CommonModule,
            FormsModule,
            TuiIcon,
            TuiLoader,
            PolymorpheusOutlet,
            PolymorpheusTemplate], exports: [TuiTagComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiTagModule, imports: [CommonModule,
            FormsModule,
            TuiIcon,
            TuiLoader] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiTagModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        FormsModule,
                        TuiIcon,
                        TuiLoader,
                        PolymorpheusOutlet,
                        PolymorpheusTemplate,
                    ],
                    declarations: [TuiTagComponent],
                    exports: [TuiTagComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_TAG_DEFAULT_OPTIONS, TUI_TAG_OPTIONS, TuiTagComponent, TuiTagModule, tuiTagOptionsProvider };
//# sourceMappingURL=taiga-ui-legacy-components-tag.mjs.map
