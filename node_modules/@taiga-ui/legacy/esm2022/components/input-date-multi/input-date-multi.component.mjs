import { ChangeDetectionStrategy, Component, inject, Input, ViewChild, } from '@angular/core';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { maskitoDateOptionsGenerator } from '@maskito/kit';
import { tuiAsControl } from '@taiga-ui/cdk/classes';
import { TUI_FALSE_HANDLER } from '@taiga-ui/cdk/constants';
import { tuiDateClamp, TuiDay, TuiMonth } from '@taiga-ui/cdk/date-time';
import { tuiWatch } from '@taiga-ui/cdk/observables';
import { TUI_IS_MOBILE } from '@taiga-ui/cdk/tokens';
import { changeDateSeparator, tuiIsString } from '@taiga-ui/cdk/utils/miscellaneous';
import { TUI_DATE_FORMAT, TUI_DEFAULT_DATE_FORMAT } from '@taiga-ui/core/tokens';
import { TUI_DATE_TEXTS, TUI_DATE_VALUE_TRANSFORMER, TUI_DONE_WORD, TUI_INPUT_DATE_OPTIONS, TUI_MOBILE_CALENDAR, TUI_MOBILE_CALENDAR_PROVIDER, tuiDateStreamWithTransformer, } from '@taiga-ui/kit/tokens';
import { tuiToggleDay } from '@taiga-ui/kit/utils';
import { AbstractTuiMultipleControl, tuiAsControl as tuiAsLegacyControl, TuiStringifiableItem, } from '@taiga-ui/legacy/classes';
import { TuiInputTagComponent } from '@taiga-ui/legacy/components/input-tag';
import { TuiPrimitiveTextfieldComponent } from '@taiga-ui/legacy/components/primitive-textfield';
import { TUI_TEXTFIELD_SIZE } from '@taiga-ui/legacy/directives';
import { tuiAsFocusableItemAccessor } from '@taiga-ui/legacy/tokens';
import { map } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@maskito/angular";
import * as i2 from "@taiga-ui/polymorpheus";
import * as i3 from "@taiga-ui/core/components/calendar";
import * as i4 from "@taiga-ui/core/components/link";
import * as i5 from "@taiga-ui/legacy/components/input-tag";
import * as i6 from "@taiga-ui/core/directives/dropdown";
import * as i7 from "@angular/forms";
import * as i8 from "@taiga-ui/legacy/directives";
import * as i9 from "@taiga-ui/core/components/icon";
import * as i10 from "@taiga-ui/core/directives/appearance";
import * as i11 from "@angular/common";
import * as i12 from "@taiga-ui/cdk/pipes/mapper";
class TuiInputDateMultiComponent extends AbstractTuiMultipleControl {
    constructor() {
        super(...arguments);
        this.month = null;
        this.mobileCalendar = inject(TUI_MOBILE_CALENDAR, { optional: true });
        this.options = inject(TUI_INPUT_DATE_OPTIONS);
        this.textfieldSize = inject(TUI_TEXTFIELD_SIZE);
        this.dateTexts$ = inject(TUI_DATE_TEXTS);
        this.valueTransformer = inject(TUI_DATE_VALUE_TRANSFORMER, { optional: true });
        this.open = false;
        this.dateFormat = TUI_DEFAULT_DATE_FORMAT;
        this.isMobile = inject(TUI_IS_MOBILE);
        this.doneWord$ = inject(TUI_DONE_WORD);
        this.filler$ = this.dateTexts$.pipe(map((dateTexts) => changeDateSeparator(dateTexts[this.dateFormat.mode], this.dateFormat.separator)));
        this.dateFormat$ = inject(TUI_DATE_FORMAT)
            .pipe(tuiWatch(this.cdr), takeUntilDestroyed())
            .subscribe((format) => {
            this.dateFormat = format;
        });
        this.min = this.options.min;
        this.max = this.options.max;
        this.disabledItemHandler = TUI_FALSE_HANDLER;
        this.markerHandler = null;
        this.defaultActiveYearMonth = TuiMonth.currentLocal();
        this.inputHidden = false;
        this.editable = true;
        this.search = '';
        this.placeholder = '';
        this.rows = 1;
        this.maskitoOptions = maskitoDateOptionsGenerator({
            mode: 'dd/mm/yyyy',
            separator: '.',
            min: this.min?.toLocalNativeDate(),
            max: this.max?.toLocalNativeDate(),
        });
        this.tagValidator = (tag) => {
            const { year, month, day } = tuiIsString(tag)
                ? TuiDay.parseRawDateString(tag)
                : tag;
            const date = new TuiDay(year, month, day);
            return ((TuiDay.isValidDay(year, month, day) &&
                this.min?.dayBefore(date) &&
                this.max?.dayAfter(date)) ??
                false);
        };
        this.disabledItemHandlerWrapper = (handler) => (stringifiable) => tuiIsString(stringifiable) || handler(stringifiable.item);
        this.valueMapper = (value) => value.map((item) => new TuiStringifiableItem(item, (item) => String(item)));
    }
    get nativeFocusableElement() {
        return this.textfield?.nativeFocusableElement || null;
    }
    get focused() {
        return !!this.textfield?.focused;
    }
    setDisabledState() {
        super.setDisabledState();
        this.open = false;
    }
    get size() {
        return this.textfieldSize.size;
    }
    get nativeDropdownMode() {
        return this.isMobile && !this.editable;
    }
    get computedMin() {
        return this.min ?? this.options.min;
    }
    get computedMax() {
        return this.max ?? this.options.max;
    }
    get computedMobile() {
        return this.isMobile && !!this.mobileCalendar;
    }
    get calendarIcon() {
        return this.options.icon;
    }
    get computedActiveYearMonth() {
        return (this.month ||
            this.value[this.value.length - 1] ||
            tuiDateClamp(this.defaultActiveYearMonth, this.computedMin, this.computedMax));
    }
    onClick() {
        if (!this.isMobile && this.interactive) {
            this.open = !this.open;
        }
    }
    onIconClick() {
        if (this.isMobile && this.interactive) {
            this.open = true;
        }
    }
    onEnter(search) {
        if (!this.tagValidator(search)) {
            return;
        }
        this.value = tuiToggleDay(this.value, TuiDay.normalizeParse(search));
        if (this.inputTag) {
            this.inputTag.search = '';
        }
        this.done();
    }
    onValueChange(value) {
        this.control?.updateValueAndValidity({ emitEvent: false });
        if (!value.length && !this.mobileCalendar) {
            this.onOpenChange(true);
        }
        this.value = value.map(({ item }) => item);
    }
    onDayClick(value) {
        this.value = tuiToggleDay(this.value, value);
    }
    done() {
        this.open = false;
    }
    onMonthChange(month) {
        this.month = month;
    }
    onOpenChange(open) {
        this.open = open;
    }
    onFocused(focused) {
        this.updateFocused(focused);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputDateMultiComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiInputDateMultiComponent, selector: "tui-input-date[multiple]", inputs: { min: "min", max: "max", disabledItemHandler: "disabledItemHandler", markerHandler: "markerHandler", defaultActiveYearMonth: "defaultActiveYearMonth", inputHidden: "inputHidden", editable: "editable", search: "search", placeholder: "placeholder", rows: "rows", tagValidator: "tagValidator" }, host: { listeners: { "click": "onClick()" }, properties: { "class._editable": "editable", "attr.data-size": "size" } }, providers: [
            tuiAsFocusableItemAccessor(TuiInputDateMultiComponent),
            tuiAsControl(TuiInputDateMultiComponent),
            tuiAsLegacyControl(TuiInputDateMultiComponent),
            tuiDateStreamWithTransformer(TUI_DATE_VALUE_TRANSFORMER),
            TUI_MOBILE_CALENDAR_PROVIDER,
        ], viewQueries: [{ propertyName: "textfield", first: true, predicate: TuiPrimitiveTextfieldComponent, descendants: true }, { propertyName: "inputTag", first: true, predicate: TuiInputTagComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<div\n    tuiDropdownOpenMonitor\n    class=\"t-hosted\"\n    [tuiDropdown]=\"dropdown\"\n    [tuiDropdownEnabled]=\"interactive\"\n    [tuiDropdownOpen]=\"open && interactive\"\n    (tuiDropdownOpenChange)=\"onOpenChange($event)\"\n>\n    <tui-input-tag\n        #inputTag\n        class=\"t-input\"\n        [disabled]=\"disabled\"\n        [disabledItemHandler]=\"disabledItemHandler | tuiMapper: disabledItemHandlerWrapper\"\n        [editable]=\"editable\"\n        [inputHidden]=\"inputHidden\"\n        [maskito]=\"maskitoOptions\"\n        [nativeId]=\"nativeId\"\n        [ngModel]=\"value | tuiMapper: valueMapper\"\n        [ngModelOptions]=\"{standalone: true}\"\n        [placeholder]=\"placeholder\"\n        [pseudoFocus]=\"pseudoFocus\"\n        [pseudoHover]=\"pseudoHover\"\n        [pseudoInvalid]=\"computedInvalid\"\n        [readOnly]=\"readOnly\"\n        [removable]=\"!nativeDropdownMode\"\n        [rows]=\"rows\"\n        [tagValidator]=\"tagValidator | tuiMapper: disabledItemHandlerWrapper\"\n        [tuiTextfieldFiller]=\"(filler$ | async) || ''\"\n        [tuiTextfieldIcon]=\"calendarIcon && iconContent\"\n        (keydown.enter)=\"onEnter(inputTag.search || '')\"\n        (ngModelChange)=\"onValueChange($event)\"\n    >\n        <ng-content />\n        <ng-content\n            ngProjectAs=\"input\"\n            select=\"input\"\n        />\n    </tui-input-tag>\n\n    <ng-template #iconContent>\n        <tui-icon\n            *polymorpheusOutlet=\"calendarIcon as src; context: {$implicit: size}\"\n            tuiAppearance=\"icon\"\n            [class.t-icon_small]=\"size === 's'\"\n            [class.t-icon]=\"!computedDisabled\"\n            [icon]=\"src.toString()\"\n            (click)=\"onIconClick()\"\n        />\n    </ng-template>\n\n    <ng-template #dropdown>\n        <tui-calendar\n            [disabledItemHandler]=\"disabledItemHandler\"\n            [markerHandler]=\"markerHandler\"\n            [max]=\"computedMax\"\n            [min]=\"computedMin\"\n            [month]=\"computedActiveYearMonth\"\n            [value]=\"value\"\n            (dayClick)=\"onDayClick($event)\"\n            (monthChange)=\"onMonthChange($event)\"\n            (mousedown.silent.prevent)=\"(0)\"\n        />\n        <div\n            class=\"t-button\"\n            (mousedown.silent.prevent)=\"(0)\"\n        >\n            <button\n                tuiLink\n                type=\"button\"\n                (click)=\"done()\"\n            >\n                {{ doneWord$ | async }}\n            </button>\n        </div>\n    </ng-template>\n</div>\n", styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:start}.t-hosted{display:block;border-radius:inherit}.t-textfield{border-radius:inherit;text-align:inherit}.t-icon{pointer-events:auto}.t-icon_small{border:.25rem solid transparent}.t-button{display:flex;block-size:2.75rem;justify-content:center;box-shadow:inset 0 1px var(--tui-border-normal)}.t-button button{flex:1;text-align:center}.t-native-input{position:absolute;top:0;left:0;inline-size:100%;block-size:100%;opacity:0;pointer-events:auto;font-size:2rem}\n"], dependencies: [{ kind: "directive", type: i1.MaskitoDirective, selector: "[maskito]", inputs: ["maskito", "maskitoElement"] }, { kind: "directive", type: i2.PolymorpheusOutlet, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { kind: "component", type: i3.TuiCalendar, selector: "tui-calendar", inputs: ["month", "disabledItemHandler", "min", "max", "minViewedMonth", "maxViewedMonth", "hoveredItem", "showAdjacent", "markerHandler", "value", "initialView"], outputs: ["dayClick", "monthChange", "hoveredItemChange"] }, { kind: "directive", type: i4.TuiLink, selector: "a[tuiLink], button[tuiLink]", inputs: ["pseudo"] }, { kind: "component", type: i5.TuiInputTagComponent, selector: "tui-input-tag", inputs: ["separator", "search", "editable", "tagValidator", "rows", "inputHidden", "uniqueTags", "autoColor", "maxLength", "placeholder", "removable", "pseudoOpen", "disabledItemHandler", "pseudoFocused"], outputs: ["searchChange"] }, { kind: "directive", type: i6.TuiDropdownDirective, selector: "[tuiDropdown]:not(ng-container):not(ng-template)", inputs: ["tuiDropdown"], exportAs: ["tuiDropdown"] }, { kind: "directive", type: i6.TuiDropdownOpen, selector: "[tuiDropdown][tuiDropdownOpen],[tuiDropdown][tuiDropdownOpenChange]", inputs: ["tuiDropdownEnabled", "tuiDropdownOpen"], outputs: ["tuiDropdownOpenChange"] }, { kind: "directive", type: i7.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i7.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i8.TuiTextfieldIconDirective, selector: "[tuiTextfieldIcon]", inputs: ["tuiTextfieldIcon"] }, { kind: "directive", type: i8.TuiTextfieldFillerDirective, selector: "[tuiTextfieldFiller]", inputs: ["tuiTextfieldFiller"] }, { kind: "directive", type: i8.TuiLegacyDropdownOpenMonitorDirective, selector: "[tuiDropdownOpenMonitor]" }, { kind: "component", type: i9.TuiIcon, selector: "tui-icon", inputs: ["icon", "background"] }, { kind: "directive", type: i10.TuiAppearance, selector: "[tuiAppearance]", inputs: ["tuiAppearance", "tuiAppearanceState", "tuiAppearanceFocus"] }, { kind: "pipe", type: i11.AsyncPipe, name: "async" }, { kind: "pipe", type: i12.TuiMapperPipe, name: "tuiMapper" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { TuiInputDateMultiComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputDateMultiComponent, decorators: [{
            type: Component,
            args: [{ selector: 'tui-input-date[multiple]', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        tuiAsFocusableItemAccessor(TuiInputDateMultiComponent),
                        tuiAsControl(TuiInputDateMultiComponent),
                        tuiAsLegacyControl(TuiInputDateMultiComponent),
                        tuiDateStreamWithTransformer(TUI_DATE_VALUE_TRANSFORMER),
                        TUI_MOBILE_CALENDAR_PROVIDER,
                    ], host: {
                        '[class._editable]': 'editable',
                        '[attr.data-size]': 'size',
                        '(click)': 'onClick()',
                    }, template: "<div\n    tuiDropdownOpenMonitor\n    class=\"t-hosted\"\n    [tuiDropdown]=\"dropdown\"\n    [tuiDropdownEnabled]=\"interactive\"\n    [tuiDropdownOpen]=\"open && interactive\"\n    (tuiDropdownOpenChange)=\"onOpenChange($event)\"\n>\n    <tui-input-tag\n        #inputTag\n        class=\"t-input\"\n        [disabled]=\"disabled\"\n        [disabledItemHandler]=\"disabledItemHandler | tuiMapper: disabledItemHandlerWrapper\"\n        [editable]=\"editable\"\n        [inputHidden]=\"inputHidden\"\n        [maskito]=\"maskitoOptions\"\n        [nativeId]=\"nativeId\"\n        [ngModel]=\"value | tuiMapper: valueMapper\"\n        [ngModelOptions]=\"{standalone: true}\"\n        [placeholder]=\"placeholder\"\n        [pseudoFocus]=\"pseudoFocus\"\n        [pseudoHover]=\"pseudoHover\"\n        [pseudoInvalid]=\"computedInvalid\"\n        [readOnly]=\"readOnly\"\n        [removable]=\"!nativeDropdownMode\"\n        [rows]=\"rows\"\n        [tagValidator]=\"tagValidator | tuiMapper: disabledItemHandlerWrapper\"\n        [tuiTextfieldFiller]=\"(filler$ | async) || ''\"\n        [tuiTextfieldIcon]=\"calendarIcon && iconContent\"\n        (keydown.enter)=\"onEnter(inputTag.search || '')\"\n        (ngModelChange)=\"onValueChange($event)\"\n    >\n        <ng-content />\n        <ng-content\n            ngProjectAs=\"input\"\n            select=\"input\"\n        />\n    </tui-input-tag>\n\n    <ng-template #iconContent>\n        <tui-icon\n            *polymorpheusOutlet=\"calendarIcon as src; context: {$implicit: size}\"\n            tuiAppearance=\"icon\"\n            [class.t-icon_small]=\"size === 's'\"\n            [class.t-icon]=\"!computedDisabled\"\n            [icon]=\"src.toString()\"\n            (click)=\"onIconClick()\"\n        />\n    </ng-template>\n\n    <ng-template #dropdown>\n        <tui-calendar\n            [disabledItemHandler]=\"disabledItemHandler\"\n            [markerHandler]=\"markerHandler\"\n            [max]=\"computedMax\"\n            [min]=\"computedMin\"\n            [month]=\"computedActiveYearMonth\"\n            [value]=\"value\"\n            (dayClick)=\"onDayClick($event)\"\n            (monthChange)=\"onMonthChange($event)\"\n            (mousedown.silent.prevent)=\"(0)\"\n        />\n        <div\n            class=\"t-button\"\n            (mousedown.silent.prevent)=\"(0)\"\n        >\n            <button\n                tuiLink\n                type=\"button\"\n                (click)=\"done()\"\n            >\n                {{ doneWord$ | async }}\n            </button>\n        </div>\n    </ng-template>\n</div>\n", styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:start}.t-hosted{display:block;border-radius:inherit}.t-textfield{border-radius:inherit;text-align:inherit}.t-icon{pointer-events:auto}.t-icon_small{border:.25rem solid transparent}.t-button{display:flex;block-size:2.75rem;justify-content:center;box-shadow:inset 0 1px var(--tui-border-normal)}.t-button button{flex:1;text-align:center}.t-native-input{position:absolute;top:0;left:0;inline-size:100%;block-size:100%;opacity:0;pointer-events:auto;font-size:2rem}\n"] }]
        }], propDecorators: { textfield: [{
                type: ViewChild,
                args: [TuiPrimitiveTextfieldComponent]
            }], inputTag: [{
                type: ViewChild,
                args: [TuiInputTagComponent]
            }], min: [{
                type: Input
            }], max: [{
                type: Input
            }], disabledItemHandler: [{
                type: Input
            }], markerHandler: [{
                type: Input
            }], defaultActiveYearMonth: [{
                type: Input
            }], inputHidden: [{
                type: Input
            }], editable: [{
                type: Input
            }], search: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], rows: [{
                type: Input
            }], tagValidator: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,