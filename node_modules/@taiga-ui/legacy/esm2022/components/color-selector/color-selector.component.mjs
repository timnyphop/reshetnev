import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, EventEmitter, inject, Input, Output, } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { tuiGetGradientData, tuiParseColor, tuiParseGradient, } from '@taiga-ui/cdk/utils/color';
import { tuiDefaultSort, tuiPure } from '@taiga-ui/cdk/utils/miscellaneous';
import { TUI_COLOR_SELECTOR_MODE_NAMES, TUI_COLOR_SELECTOR_OPTIONS, TuiColorSelectorMode, } from './color-selector.options';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@taiga-ui/core/components/button";
import * as i3 from "./color-picker/color-picker.component";
import * as i4 from "./linear-multi-picker/linear-multi-picker.component";
import * as i5 from "./color-edit/color-edit.component";
import * as i6 from "@taiga-ui/core/directives/dropdown";
import * as i7 from "@taiga-ui/core/components/data-list";
import * as i8 from "@taiga-ui/core/directives/group";
import * as i9 from "./palette/palette.component";
import * as i10 from "@taiga-ui/core/directives/hint";
import * as i11 from "@taiga-ui/kit/directives/chevron";
import * as i12 from "@taiga-ui/core/components/icon";
class TuiColorSelectorComponent {
    constructor() {
        this.selectorOptions = inject(TUI_COLOR_SELECTOR_OPTIONS);
        this.stops = new Map(this.selectorOptions.gradient.steps);
        this.currentStop = this.selectorOptions.gradient.stop;
        this.direction = this.selectorOptions.gradient.direction;
        this.sanitizer = inject(DomSanitizer);
        this.open = false;
        this.colors = this.selectorOptions.colors;
        this.colorChange = new EventEmitter();
        this.color = this.selectorOptions.color;
        this.modes = inject(TUI_COLOR_SELECTOR_MODE_NAMES);
        this.currentMode = this.modes[this.selectorOptions.mode];
        this.buttons = this.selectorOptions.gradient.buttons;
    }
    set colorSetter(color) {
        if (color.startsWith('linear-gradient')) {
            this.parseGradient(color);
        }
        else {
            this.parseColor(color);
        }
    }
    get selectorMode() {
        return this.selectorOptions.selectorMode;
    }
    get palette() {
        return this.filterPalette(this.colors, this.isGradient);
    }
    get stopsKeys() {
        return this.getStopsKeys(this.stops);
    }
    get currentColor() {
        return this.isGradient ? this.getStop(this.currentStop) : this.color;
    }
    get gradient() {
        return this.sanitizer.bypassSecurityTrustStyle(this.getGradient('to right'));
    }
    get isGradient() {
        return this.currentMode === this.modes[TuiColorSelectorMode.Gradient];
    }
    getIcon(direction) {
        return this.selectorOptions.gradient.icons[direction];
    }
    isModeActive(mode) {
        return this.currentMode === mode;
    }
    isDirectionActive(direction) {
        return this.direction === direction;
    }
    onPalettePick(color) {
        this.updateColor(color);
    }
    onDirectionChange(direction) {
        this.direction = direction;
        this.updateColor(this.getGradient(direction));
    }
    onModeSelect(mode) {
        this.currentMode = mode;
        this.open = false;
        this.updateColor(mode === this.modes[TuiColorSelectorMode.SolidColor]
            ? `rgba(${this.color.join(', ')})`
            : this.getGradient(this.direction));
    }
    onIndexChange(index) {
        this.currentStop = this.stopsKeys[index] ?? 0;
    }
    onColorChange(color) {
        if (!this.isGradient) {
            this.updateColor(`rgba(${color.join(', ')})`);
            return;
        }
        this.stops.set(this.currentStop, color);
        this.updateColor(this.getGradient(this.direction));
    }
    onStopsChange(stopsKeys) {
        const removed = this.stopsKeys.find((item) => !stopsKeys.includes(item));
        const added = stopsKeys.find((item) => !this.stopsKeys.includes(item));
        if (removed === undefined && added !== undefined) {
            this.addStop(added);
        }
        if (removed !== undefined && added === undefined) {
            this.removeStop(removed);
        }
        if (removed !== undefined && added !== undefined) {
            this.replaceStop(removed, added);
        }
        this.updateColor(this.getGradient(this.direction));
    }
    getStopsKeys(stops) {
        return Array.from(stops.keys());
    }
    filterPalette(colors, isGradient) {
        const map = new Map(colors);
        map.forEach((value, key) => {
            if ((value.startsWith('linear-gradient') && !isGradient) ||
                (!value.startsWith('linear-gradient') && isGradient)) {
                map.delete(key);
            }
        });
        return map;
    }
    updateColor(color) {
        this.colorChange.emit(color);
    }
    getGradient(direction) {
        return `linear-gradient(${direction}, ${[...this.stopsKeys]
            .sort(tuiDefaultSort)
            .map((key) => `rgba(${this.getStop(key).join(', ')}) ${key * 100}%`)
            .join(', ')})`;
    }
    getStop(stop) {
        return this.stops.get(stop) || this.selectorOptions.gradient.emptyStop;
    }
    addStop(stop) {
        const closest = this.stopsKeys.reduce((prev, curr) => (Math.abs(curr - stop) < Math.abs(prev - stop) ? curr : prev), this.stopsKeys[0] ?? 0);
        this.stops.set(stop, this.getStop(closest));
        this.stops = new Map(this.stops);
        this.currentStop = stop;
    }
    removeStop(stop) {
        this.stops.delete(stop);
        this.stops = new Map(this.stops);
        this.currentStop = this.stopsKeys[0] ?? 0;
    }
    replaceStop(removed, added) {
        const value = this.getStop(removed);
        this.currentStop = added;
        this.stops = new Map(this.stopsKeys.map((key) => key === removed ? [added, value] : [key, this.getStop(key)]));
    }
    parseGradient(color) {
        if (color === this.getGradient(this.direction)) {
            return;
        }
        const gradient = tuiParseGradient(tuiGetGradientData(color));
        this.direction = gradient.side;
        this.currentStop = this.selectorOptions.gradient.stop;
        this.stops = new Map(gradient.stops.length
            ? gradient.stops.map(({ color, position }) => [
                parseFloat(position) / 100,
                tuiParseColor(color),
            ])
            : this.selectorOptions.gradient.steps);
    }
    parseColor(color) {
        this.currentStop = this.selectorOptions.gradient.stop;
        this.color = tuiParseColor(color);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiColorSelectorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiColorSelectorComponent, selector: "tui-color-selector", inputs: { colors: "colors", colorSetter: ["color", "colorSetter"] }, outputs: { colorChange: "colorChange" }, ngImport: i0, template: "<ng-container *ngIf=\"selectorMode\">\n    <div\n        class=\"t-select\"\n        [tuiDropdown]=\"menu\"\n        [(tuiDropdownOpen)]=\"open\"\n    >\n        <button\n            appearance=\"\"\n            size=\"s\"\n            tuiButton\n            tuiChevron\n            type=\"button\"\n        >\n            {{ currentMode }}\n        </button>\n\n        <ng-template #menu>\n            <tui-data-list\n                role=\"menu\"\n                size=\"s\"\n                class=\"t-menu\"\n            >\n                <button\n                    *ngFor=\"let mode of modes\"\n                    role=\"menuitemradio\"\n                    tuiOption\n                    type=\"button\"\n                    [attr.aria-checked]=\"isModeActive(mode)\"\n                    (click)=\"onModeSelect(mode)\"\n                    (keydown.enter.prevent)=\"onModeSelect(mode)\"\n                    (keydown.space.prevent)=\"onModeSelect(mode)\"\n                >\n                    {{ mode }}\n                    <tui-icon\n                        *ngIf=\"isModeActive(mode)\"\n                        icon=\"@tui.check\"\n                        class=\"t-checkmark\"\n                    />\n                </button>\n            </tui-data-list>\n        </ng-template>\n    </div>\n    <hr class=\"t-hr\" />\n</ng-container>\n\n<ng-container *ngIf=\"isGradient\">\n    <div\n        class=\"t-wrapper\"\n        [style.background]=\"gradient\"\n    >\n        <tui-linear-multi-picker\n            class=\"t-gradient\"\n            [value]=\"stopsKeys\"\n            (indexChange)=\"onIndexChange($event)\"\n            (valueChange)=\"onStopsChange($event)\"\n        />\n    </div>\n    <div class=\"t-buttons\">\n        <!-- TODO: Change to `tuiHintDescribe` when figure tuiDriver order issue -->\n        <button\n            *ngFor=\"let button of buttons\"\n            appearance=\"\"\n            size=\"xs\"\n            tuiHintDescribe\n            tuiIconButton\n            type=\"button\"\n            class=\"t-direction\"\n            [class.t-direction_active]=\"isDirectionActive(button)\"\n            [iconStart]=\"getIcon(button)\"\n            [tuiHint]=\"button\"\n            (click)=\"onDirectionChange(button)\"\n        ></button>\n    </div>\n</ng-container>\n<tui-color-picker\n    [color]=\"currentColor\"\n    (colorChange)=\"onColorChange($event)\"\n/>\n<tui-color-edit\n    *ngIf=\"!isGradient\"\n    tuiGroup\n    class=\"t-edit\"\n    [color]=\"color\"\n    (colorChange)=\"onColorChange($event)\"\n/>\n<tui-palette\n    *ngIf=\"palette.size\"\n    class=\"t-palette\"\n    [colors]=\"palette\"\n    (selectedColor)=\"onPalettePick($event)\"\n/>\n", styles: [":host{position:relative;display:block;isolation:isolate;inline-size:22.6rem}.t-wrapper{position:relative;margin:1.25rem;border-radius:.5rem}.t-wrapper:after{position:absolute;top:0;left:0;inline-size:100%;block-size:100%;content:\"\";box-shadow:inset 0 0 0 1px #00000014;pointer-events:none;border-radius:inherit}.t-wrapper:before{position:absolute;top:0;left:0;inline-size:100%;block-size:100%;content:\"\";z-index:-1;background-image:linear-gradient(45deg,var(--tui-base-03) 25%,transparent 25%,transparent 75%,var(--tui-base-03) 75%,var(--tui-base-03)),linear-gradient(45deg,var(--tui-base-03) 25%,transparent 25%,transparent 75%,var(--tui-base-03) 75%,var(--tui-base-03));background-size:.375rem .375rem;background-position:0 0,.1875rem .1875rem;border-radius:inherit}.t-hr{block-size:1px;margin:0 0 0 -1px;border:none;background:var(--tui-base-03)}.t-gradient{margin:0 .5rem;border-radius:inherit}.t-select{margin:.75rem .5rem 0}.t-arrow{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out}.t-arrow_rotated{transform:rotate(180deg)}.t-menu{inline-size:11.25rem}.t-checkmark{margin-left:auto;inline-size:1rem;block-size:1rem}.t-buttons{display:flex;padding:0 .75rem 1.25rem;justify-content:space-between}.t-direction{color:var(--tui-text-02);margin:0 .375rem}.t-direction:hover,.t-direction_active{color:var(--tui-text-01);background:var(--tui-secondary-hover)}.t-edit{margin:1.25rem}.t-palette{box-sizing:border-box;box-shadow:inset 0 1px var(--tui-base-03)}\n"], dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.TuiButton, selector: "a[tuiButton],button[tuiButton],a[tuiIconButton],button[tuiIconButton]", inputs: ["size"] }, { kind: "component", type: i3.TuiColorPickerComponent, selector: "tui-color-picker", inputs: ["color"], outputs: ["colorChange"] }, { kind: "component", type: i4.TuiLinearMultiPickerComponent, selector: "tui-linear-multi-picker", inputs: ["value"], outputs: ["valueChange", "indexChange"] }, { kind: "component", type: i5.TuiColorEditComponent, selector: "tui-color-edit", inputs: ["color"], outputs: ["colorChange"] }, { kind: "directive", type: i6.TuiDropdownDirective, selector: "[tuiDropdown]:not(ng-container):not(ng-template)", inputs: ["tuiDropdown"], exportAs: ["tuiDropdown"] }, { kind: "directive", type: i6.TuiDropdownOpen, selector: "[tuiDropdown][tuiDropdownOpen],[tuiDropdown][tuiDropdownOpenChange]", inputs: ["tuiDropdownEnabled", "tuiDropdownOpen"], outputs: ["tuiDropdownOpenChange"] }, { kind: "component", type: i7.TuiDataListComponent, selector: "tui-data-list", inputs: ["emptyContent", "size"] }, { kind: "component", type: i7.TuiOption, selector: "button[tuiOption], a[tuiOption], label[tuiOption]", inputs: ["disabled", "value"] }, { kind: "directive", type: i8.TuiGroup, selector: "[tuiGroup]:not(ng-container)", inputs: ["orientation", "collapsed", "rounded", "size"] }, { kind: "component", type: i9.TuiPaletteComponent, selector: "tui-palette", inputs: ["colors"], outputs: ["selectedColor"] }, { kind: "directive", type: i10.TuiHintDirective, selector: "[tuiHint]:not(ng-container):not(ng-template)", inputs: ["tuiHintContext", "tuiHintAppearance", "tuiHint"] }, { kind: "directive", type: i10.TuiHintDescribe, selector: "[tuiHintDescribe]", inputs: ["tuiHintDescribe"] }, { kind: "directive", type: i11.TuiChevron, selector: "[tuiChevron]", inputs: ["tuiChevron"] }, { kind: "component", type: i12.TuiIcon, selector: "tui-icon", inputs: ["icon", "background"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
__decorate([
    tuiPure
], TuiColorSelectorComponent.prototype, "getStopsKeys", null);
__decorate([
    tuiPure
], TuiColorSelectorComponent.prototype, "filterPalette", null);
export { TuiColorSelectorComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiColorSelectorComponent, decorators: [{
            type: Component,
            args: [{ standalone: false, selector: 'tui-color-selector', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-container *ngIf=\"selectorMode\">\n    <div\n        class=\"t-select\"\n        [tuiDropdown]=\"menu\"\n        [(tuiDropdownOpen)]=\"open\"\n    >\n        <button\n            appearance=\"\"\n            size=\"s\"\n            tuiButton\n            tuiChevron\n            type=\"button\"\n        >\n            {{ currentMode }}\n        </button>\n\n        <ng-template #menu>\n            <tui-data-list\n                role=\"menu\"\n                size=\"s\"\n                class=\"t-menu\"\n            >\n                <button\n                    *ngFor=\"let mode of modes\"\n                    role=\"menuitemradio\"\n                    tuiOption\n                    type=\"button\"\n                    [attr.aria-checked]=\"isModeActive(mode)\"\n                    (click)=\"onModeSelect(mode)\"\n                    (keydown.enter.prevent)=\"onModeSelect(mode)\"\n                    (keydown.space.prevent)=\"onModeSelect(mode)\"\n                >\n                    {{ mode }}\n                    <tui-icon\n                        *ngIf=\"isModeActive(mode)\"\n                        icon=\"@tui.check\"\n                        class=\"t-checkmark\"\n                    />\n                </button>\n            </tui-data-list>\n        </ng-template>\n    </div>\n    <hr class=\"t-hr\" />\n</ng-container>\n\n<ng-container *ngIf=\"isGradient\">\n    <div\n        class=\"t-wrapper\"\n        [style.background]=\"gradient\"\n    >\n        <tui-linear-multi-picker\n            class=\"t-gradient\"\n            [value]=\"stopsKeys\"\n            (indexChange)=\"onIndexChange($event)\"\n            (valueChange)=\"onStopsChange($event)\"\n        />\n    </div>\n    <div class=\"t-buttons\">\n        <!-- TODO: Change to `tuiHintDescribe` when figure tuiDriver order issue -->\n        <button\n            *ngFor=\"let button of buttons\"\n            appearance=\"\"\n            size=\"xs\"\n            tuiHintDescribe\n            tuiIconButton\n            type=\"button\"\n            class=\"t-direction\"\n            [class.t-direction_active]=\"isDirectionActive(button)\"\n            [iconStart]=\"getIcon(button)\"\n            [tuiHint]=\"button\"\n            (click)=\"onDirectionChange(button)\"\n        ></button>\n    </div>\n</ng-container>\n<tui-color-picker\n    [color]=\"currentColor\"\n    (colorChange)=\"onColorChange($event)\"\n/>\n<tui-color-edit\n    *ngIf=\"!isGradient\"\n    tuiGroup\n    class=\"t-edit\"\n    [color]=\"color\"\n    (colorChange)=\"onColorChange($event)\"\n/>\n<tui-palette\n    *ngIf=\"palette.size\"\n    class=\"t-palette\"\n    [colors]=\"palette\"\n    (selectedColor)=\"onPalettePick($event)\"\n/>\n", styles: [":host{position:relative;display:block;isolation:isolate;inline-size:22.6rem}.t-wrapper{position:relative;margin:1.25rem;border-radius:.5rem}.t-wrapper:after{position:absolute;top:0;left:0;inline-size:100%;block-size:100%;content:\"\";box-shadow:inset 0 0 0 1px #00000014;pointer-events:none;border-radius:inherit}.t-wrapper:before{position:absolute;top:0;left:0;inline-size:100%;block-size:100%;content:\"\";z-index:-1;background-image:linear-gradient(45deg,var(--tui-base-03) 25%,transparent 25%,transparent 75%,var(--tui-base-03) 75%,var(--tui-base-03)),linear-gradient(45deg,var(--tui-base-03) 25%,transparent 25%,transparent 75%,var(--tui-base-03) 75%,var(--tui-base-03));background-size:.375rem .375rem;background-position:0 0,.1875rem .1875rem;border-radius:inherit}.t-hr{block-size:1px;margin:0 0 0 -1px;border:none;background:var(--tui-base-03)}.t-gradient{margin:0 .5rem;border-radius:inherit}.t-select{margin:.75rem .5rem 0}.t-arrow{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out}.t-arrow_rotated{transform:rotate(180deg)}.t-menu{inline-size:11.25rem}.t-checkmark{margin-left:auto;inline-size:1rem;block-size:1rem}.t-buttons{display:flex;padding:0 .75rem 1.25rem;justify-content:space-between}.t-direction{color:var(--tui-text-02);margin:0 .375rem}.t-direction:hover,.t-direction_active{color:var(--tui-text-01);background:var(--tui-secondary-hover)}.t-edit{margin:1.25rem}.t-palette{box-sizing:border-box;box-shadow:inset 0 1px var(--tui-base-03)}\n"] }]
        }], propDecorators: { colors: [{
                type: Input
            }], colorChange: [{
                type: Output
            }], colorSetter: [{
                type: Input,
                args: ['color']
            }], getStopsKeys: [], filterPalette: [] } });
//# sourceMappingURL=data:application/json;base64,