import { ChangeDetectionStrategy, Component, Input, TemplateRef } from '@angular/core';
import { tuiProvide } from '@taiga-ui/cdk/utils/miscellaneous';
import { tuiAsDataList } from '@taiga-ui/core/components/data-list';
import { AbstractTuiNativeMultiSelect } from './native-multi-select';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/forms";
import * as i3 from "@taiga-ui/core/components/data-list";
import * as i4 from "@taiga-ui/kit/components/data-list-wrapper";
import * as i5 from "../multi-select-group/multi-select-group.directive";
import * as i6 from "@taiga-ui/cdk/pipes/mapper";
import * as i7 from "@taiga-ui/kit/pipes/stringify-content";
class TuiNativeMultiSelectGroupComponent extends AbstractTuiNativeMultiSelect {
    constructor() {
        super(...arguments);
        this.items = [];
        this.labels = [];
    }
    onValueChange(selectedOptions) {
        const selected = Array.from(selectedOptions).map((option) => option.index);
        const flatItems = this.items?.reduce((acc, val) => acc.concat(val), []) || [];
        const value = flatItems.filter((_, index) => selected.includes(index));
        this.host.onSelectionChange(value);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiNativeMultiSelectGroupComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiNativeMultiSelectGroupComponent, selector: "select[multiple][tuiSelect][labels]", inputs: { items: "items", labels: "labels" }, host: { listeners: { "change": "onValueChange($event.target.selectedOptions)", "click.stop.silent": "0", "mousedown.stop.silent": "0" }, properties: { "attr.aria-invalid": "host.invalid", "disabled": "host.disabled || control.readOnly", "tabIndex": "host.focusable ? 0 : -1" } }, providers: [
            tuiAsDataList(TuiNativeMultiSelectGroupComponent),
            tuiProvide(AbstractTuiNativeMultiSelect, TuiNativeMultiSelectGroupComponent),
            {
                provide: TemplateRef,
                deps: [TuiNativeMultiSelectGroupComponent],
                useFactory: ({ datalist }) => datalist,
            },
        ], usesInheritance: true, ngImport: i0, template: "<ng-container *ngIf=\"control.control?.valueChanges | async\" />\n\n<tui-data-list-wrapper\n    *tuiDataList\n    tuiMultiSelectGroup\n    [disabledItemHandler]=\"disabledItemHandler || host.disableItemHandler\"\n    [itemContent]=\"stringify | tuiStringifyContent\"\n    [items]=\"items\"\n    [labels]=\"labels\"\n/>\n<optgroup\n    *ngFor=\"let group of items; let index = index\"\n    [label]=\"labels[index]\"\n>\n    <option\n        *ngFor=\"let option of group\"\n        [disabled]=\"disabledItemHandler ? disabledItemHandler(option) : host.disableItemHandler(option)\"\n        [selected]=\"option | tuiMapper: selectedMapper : control.value\"\n        [value]=\"stringify(option)\"\n    >\n        {{ stringify(option) }}\n    </option>\n</optgroup>\n", styles: [":host{position:absolute;top:0;left:0;inline-size:100%;block-size:100%;opacity:0}\n"], dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i2.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i3.TuiDataListDirective, selector: "ng-template[tuiDataList]" }, { kind: "component", type: i4.TuiDataListGroupWrapperComponent, selector: "tui-data-list-wrapper[labels]", inputs: ["labels"] }, { kind: "directive", type: i5.TuiMultiSelectGroupDirective, selector: "[tuiMultiSelectGroup]" }, { kind: "pipe", type: i1.AsyncPipe, name: "async" }, { kind: "pipe", type: i6.TuiMapperPipe, name: "tuiMapper" }, { kind: "pipe", type: i7.TuiStringifyContentPipe, name: "tuiStringifyContent" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { TuiNativeMultiSelectGroupComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiNativeMultiSelectGroupComponent, decorators: [{
            type: Component,
            args: [{ standalone: false, selector: 'select[multiple][tuiSelect][labels]', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        tuiAsDataList(TuiNativeMultiSelectGroupComponent),
                        tuiProvide(AbstractTuiNativeMultiSelect, TuiNativeMultiSelectGroupComponent),
                        {
                            provide: TemplateRef,
                            deps: [TuiNativeMultiSelectGroupComponent],
                            useFactory: ({ datalist }) => datalist,
                        },
                    ], host: {
                        '[attr.aria-invalid]': 'host.invalid',
                        '[disabled]': 'host.disabled || control.readOnly',
                        '[tabIndex]': 'host.focusable ? 0 : -1',
                        '(change)': 'onValueChange($event.target.selectedOptions)',
                        '(click.stop.silent)': '0',
                        '(mousedown.stop.silent)': '0',
                    }, template: "<ng-container *ngIf=\"control.control?.valueChanges | async\" />\n\n<tui-data-list-wrapper\n    *tuiDataList\n    tuiMultiSelectGroup\n    [disabledItemHandler]=\"disabledItemHandler || host.disableItemHandler\"\n    [itemContent]=\"stringify | tuiStringifyContent\"\n    [items]=\"items\"\n    [labels]=\"labels\"\n/>\n<optgroup\n    *ngFor=\"let group of items; let index = index\"\n    [label]=\"labels[index]\"\n>\n    <option\n        *ngFor=\"let option of group\"\n        [disabled]=\"disabledItemHandler ? disabledItemHandler(option) : host.disableItemHandler(option)\"\n        [selected]=\"option | tuiMapper: selectedMapper : control.value\"\n        [value]=\"stringify(option)\"\n    >\n        {{ stringify(option) }}\n    </option>\n</optgroup>\n", styles: [":host{position:absolute;top:0;left:0;inline-size:100%;block-size:100%;opacity:0}\n"] }]
        }], propDecorators: { items: [{
                type: Input
            }], labels: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF0aXZlLW11bHRpLXNlbGVjdC1ncm91cC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9sZWdhY3kvY29tcG9uZW50cy9tdWx0aS1zZWxlY3QvbmF0aXZlLW11bHRpLXNlbGVjdC9uYXRpdmUtbXVsdGktc2VsZWN0LWdyb3VwLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2xlZ2FjeS9jb21wb25lbnRzL211bHRpLXNlbGVjdC9uYXRpdmUtbXVsdGktc2VsZWN0L25hdGl2ZS1tdWx0aS1zZWxlY3QtZ3JvdXAudGVtcGxhdGUuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDckYsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLG1DQUFtQyxDQUFDO0FBQzdELE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxxQ0FBcUMsQ0FBQztBQUVsRSxPQUFPLEVBQUMsNEJBQTRCLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQzs7Ozs7Ozs7O0FBRW5FLE1BeUJhLGtDQUVYLFNBQVEsNEJBQStCO0lBM0J6Qzs7UUE2QlcsVUFBSyxHQUEwQixFQUFFLENBQUM7UUFHbEMsV0FBTSxHQUFzQixFQUFFLENBQUM7S0FTekM7SUFQYSxhQUFhLENBQUMsZUFBcUQ7UUFDekUsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMzRSxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQzlFLE1BQU0sS0FBSyxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFFdkUsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN2QyxDQUFDOytHQWZRLGtDQUFrQzttR0FBbEMsa0NBQWtDLG9ZQW5CaEM7WUFDUCxhQUFhLENBQUMsa0NBQWtDLENBQUM7WUFDakQsVUFBVSxDQUFDLDRCQUE0QixFQUFFLGtDQUFrQyxDQUFDO1lBQzVFO2dCQUNJLE9BQU8sRUFBRSxXQUFXO2dCQUNwQixJQUFJLEVBQUUsQ0FBQyxrQ0FBa0MsQ0FBQztnQkFDMUMsVUFBVSxFQUFFLENBQUMsRUFBQyxRQUFRLEVBQThDLEVBQUUsRUFBRSxDQUNwRSxRQUFRO2FBQ2Y7U0FDSixpRENyQkwsNHZCQXVCQTs7U0RRYSxrQ0FBa0M7NEZBQWxDLGtDQUFrQztrQkF6QjlDLFNBQVM7aUNBQ00sS0FBSyxZQUNQLHFDQUFxQyxtQkFHOUIsdUJBQXVCLENBQUMsTUFBTSxhQUNwQzt3QkFDUCxhQUFhLG9DQUFvQzt3QkFDakQsVUFBVSxDQUFDLDRCQUE0QixxQ0FBcUM7d0JBQzVFOzRCQUNJLE9BQU8sRUFBRSxXQUFXOzRCQUNwQixJQUFJLEVBQUUsb0NBQW9DOzRCQUMxQyxVQUFVLEVBQUUsQ0FBQyxFQUFDLFFBQVEsRUFBOEMsRUFBRSxFQUFFLENBQ3BFLFFBQVE7eUJBQ2Y7cUJBQ0osUUFDSzt3QkFDRixxQkFBcUIsRUFBRSxjQUFjO3dCQUNyQyxZQUFZLEVBQUUsbUNBQW1DO3dCQUNqRCxZQUFZLEVBQUUseUJBQXlCO3dCQUN2QyxVQUFVLEVBQUUsOENBQThDO3dCQUMxRCxxQkFBcUIsRUFBRSxHQUFHO3dCQUMxQix5QkFBeUIsRUFBRSxHQUFHO3FCQUNqQzs4QkFNTSxLQUFLO3NCQURYLEtBQUs7Z0JBSUMsTUFBTTtzQkFEWixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBJbnB1dCwgVGVtcGxhdGVSZWZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHt0dWlQcm92aWRlfSBmcm9tICdAdGFpZ2EtdWkvY2RrL3V0aWxzL21pc2NlbGxhbmVvdXMnO1xuaW1wb3J0IHt0dWlBc0RhdGFMaXN0fSBmcm9tICdAdGFpZ2EtdWkvY29yZS9jb21wb25lbnRzL2RhdGEtbGlzdCc7XG5cbmltcG9ydCB7QWJzdHJhY3RUdWlOYXRpdmVNdWx0aVNlbGVjdH0gZnJvbSAnLi9uYXRpdmUtbXVsdGktc2VsZWN0JztcblxuQENvbXBvbmVudCh7XG4gICAgc3RhbmRhbG9uZTogZmFsc2UsXG4gICAgc2VsZWN0b3I6ICdzZWxlY3RbbXVsdGlwbGVdW3R1aVNlbGVjdF1bbGFiZWxzXScsXG4gICAgdGVtcGxhdGVVcmw6ICcuL25hdGl2ZS1tdWx0aS1zZWxlY3QtZ3JvdXAudGVtcGxhdGUuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vbmF0aXZlLW11bHRpLXNlbGVjdC5zdHlsZS5sZXNzJ10sXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHR1aUFzRGF0YUxpc3QoVHVpTmF0aXZlTXVsdGlTZWxlY3RHcm91cENvbXBvbmVudCksXG4gICAgICAgIHR1aVByb3ZpZGUoQWJzdHJhY3RUdWlOYXRpdmVNdWx0aVNlbGVjdCwgVHVpTmF0aXZlTXVsdGlTZWxlY3RHcm91cENvbXBvbmVudCksXG4gICAgICAgIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IFRlbXBsYXRlUmVmLFxuICAgICAgICAgICAgZGVwczogW1R1aU5hdGl2ZU11bHRpU2VsZWN0R3JvdXBDb21wb25lbnRdLFxuICAgICAgICAgICAgdXNlRmFjdG9yeTogKHtkYXRhbGlzdH06IFR1aU5hdGl2ZU11bHRpU2VsZWN0R3JvdXBDb21wb25lbnQ8dW5rbm93bj4pID0+XG4gICAgICAgICAgICAgICAgZGF0YWxpc3QsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBob3N0OiB7XG4gICAgICAgICdbYXR0ci5hcmlhLWludmFsaWRdJzogJ2hvc3QuaW52YWxpZCcsXG4gICAgICAgICdbZGlzYWJsZWRdJzogJ2hvc3QuZGlzYWJsZWQgfHwgY29udHJvbC5yZWFkT25seScsXG4gICAgICAgICdbdGFiSW5kZXhdJzogJ2hvc3QuZm9jdXNhYmxlID8gMCA6IC0xJyxcbiAgICAgICAgJyhjaGFuZ2UpJzogJ29uVmFsdWVDaGFuZ2UoJGV2ZW50LnRhcmdldC5zZWxlY3RlZE9wdGlvbnMpJyxcbiAgICAgICAgJyhjbGljay5zdG9wLnNpbGVudCknOiAnMCcsXG4gICAgICAgICcobW91c2Vkb3duLnN0b3Auc2lsZW50KSc6ICcwJyxcbiAgICB9LFxufSlcbmV4cG9ydCBjbGFzcyBUdWlOYXRpdmVNdWx0aVNlbGVjdEdyb3VwQ29tcG9uZW50PFxuICAgIFQsXG4+IGV4dGVuZHMgQWJzdHJhY3RUdWlOYXRpdmVNdWx0aVNlbGVjdDxUPiB7XG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgaXRlbXM6IHJlYWRvbmx5IFRbXVtdIHwgbnVsbCA9IFtdO1xuXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgbGFiZWxzOiByZWFkb25seSBzdHJpbmdbXSA9IFtdO1xuXG4gICAgcHJvdGVjdGVkIG9uVmFsdWVDaGFuZ2Uoc2VsZWN0ZWRPcHRpb25zOiBIVE1MU2VsZWN0RWxlbWVudFsnc2VsZWN0ZWRPcHRpb25zJ10pOiB2b2lkIHtcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWQgPSBBcnJheS5mcm9tKHNlbGVjdGVkT3B0aW9ucykubWFwKChvcHRpb24pID0+IG9wdGlvbi5pbmRleCk7XG4gICAgICAgIGNvbnN0IGZsYXRJdGVtcyA9IHRoaXMuaXRlbXM/LnJlZHVjZSgoYWNjLCB2YWwpID0+IGFjYy5jb25jYXQodmFsKSwgW10pIHx8IFtdO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGZsYXRJdGVtcy5maWx0ZXIoKF8sIGluZGV4KSA9PiBzZWxlY3RlZC5pbmNsdWRlcyhpbmRleCkpO1xuXG4gICAgICAgIHRoaXMuaG9zdC5vblNlbGVjdGlvbkNoYW5nZSh2YWx1ZSk7XG4gICAgfVxufVxuIiwiPG5nLWNvbnRhaW5lciAqbmdJZj1cImNvbnRyb2wuY29udHJvbD8udmFsdWVDaGFuZ2VzIHwgYXN5bmNcIiAvPlxuXG48dHVpLWRhdGEtbGlzdC13cmFwcGVyXG4gICAgKnR1aURhdGFMaXN0XG4gICAgdHVpTXVsdGlTZWxlY3RHcm91cFxuICAgIFtkaXNhYmxlZEl0ZW1IYW5kbGVyXT1cImRpc2FibGVkSXRlbUhhbmRsZXIgfHwgaG9zdC5kaXNhYmxlSXRlbUhhbmRsZXJcIlxuICAgIFtpdGVtQ29udGVudF09XCJzdHJpbmdpZnkgfCB0dWlTdHJpbmdpZnlDb250ZW50XCJcbiAgICBbaXRlbXNdPVwiaXRlbXNcIlxuICAgIFtsYWJlbHNdPVwibGFiZWxzXCJcbi8+XG48b3B0Z3JvdXBcbiAgICAqbmdGb3I9XCJsZXQgZ3JvdXAgb2YgaXRlbXM7IGxldCBpbmRleCA9IGluZGV4XCJcbiAgICBbbGFiZWxdPVwibGFiZWxzW2luZGV4XVwiXG4+XG4gICAgPG9wdGlvblxuICAgICAgICAqbmdGb3I9XCJsZXQgb3B0aW9uIG9mIGdyb3VwXCJcbiAgICAgICAgW2Rpc2FibGVkXT1cImRpc2FibGVkSXRlbUhhbmRsZXIgPyBkaXNhYmxlZEl0ZW1IYW5kbGVyKG9wdGlvbikgOiBob3N0LmRpc2FibGVJdGVtSGFuZGxlcihvcHRpb24pXCJcbiAgICAgICAgW3NlbGVjdGVkXT1cIm9wdGlvbiB8IHR1aU1hcHBlcjogc2VsZWN0ZWRNYXBwZXIgOiBjb250cm9sLnZhbHVlXCJcbiAgICAgICAgW3ZhbHVlXT1cInN0cmluZ2lmeShvcHRpb24pXCJcbiAgICA+XG4gICAgICAgIHt7IHN0cmluZ2lmeShvcHRpb24pIH19XG4gICAgPC9vcHRpb24+XG48L29wdGdyb3VwPlxuIl19