import { ChangeDetectionStrategy, Component, Input, TemplateRef } from '@angular/core';
import { tuiProvide } from '@taiga-ui/cdk/utils/miscellaneous';
import { tuiAsDataList } from '@taiga-ui/core/components/data-list';
import { AbstractTuiNativeMultiSelect } from './native-multi-select';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/forms";
import * as i3 from "@taiga-ui/core/components/data-list";
import * as i4 from "@taiga-ui/kit/components/data-list-wrapper";
import * as i5 from "../multi-select-group/multi-select-group.directive";
import * as i6 from "@taiga-ui/cdk/pipes/mapper";
import * as i7 from "@taiga-ui/kit/pipes/stringify-content";
class TuiNativeMultiSelectGroupComponent extends AbstractTuiNativeMultiSelect {
    constructor() {
        super(...arguments);
        this.items = [];
        this.labels = [];
    }
    onValueChange(selectedOptions) {
        const selected = Array.from(selectedOptions).map((option) => option.index);
        const flatItems = this.items?.reduce((acc, val) => acc.concat(val), []) || [];
        const value = flatItems.filter((_, index) => selected.includes(index));
        this.host.onSelectionChange(value);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiNativeMultiSelectGroupComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiNativeMultiSelectGroupComponent, selector: "select[multiple][tuiSelect][labels]", inputs: { items: "items", labels: "labels" }, host: { listeners: { "change": "onValueChange($event.target.selectedOptions)", "click.stop.silent": "0", "mousedown.stop.silent": "0" }, properties: { "attr.aria-invalid": "host.invalid", "disabled": "host.disabled || control.readOnly", "tabIndex": "host.focusable ? 0 : -1" } }, providers: [
            tuiAsDataList(TuiNativeMultiSelectGroupComponent),
            tuiProvide(AbstractTuiNativeMultiSelect, TuiNativeMultiSelectGroupComponent),
            {
                provide: TemplateRef,
                deps: [TuiNativeMultiSelectGroupComponent],
                useFactory: ({ datalist }) => datalist,
            },
        ], usesInheritance: true, ngImport: i0, template: "<ng-container *ngIf=\"control.control?.valueChanges | async\" />\n\n<tui-data-list-wrapper\n    *tuiDataList\n    tuiMultiSelectGroup\n    [disabledItemHandler]=\"disabledItemHandler || host.disableItemHandler\"\n    [itemContent]=\"stringify | tuiStringifyContent\"\n    [items]=\"items\"\n    [labels]=\"labels\"\n/>\n<optgroup\n    *ngFor=\"let group of items; let index = index\"\n    [label]=\"labels[index]\"\n>\n    <option\n        *ngFor=\"let option of group\"\n        [disabled]=\"disabledItemHandler ? disabledItemHandler(option) : host.disableItemHandler(option)\"\n        [selected]=\"option | tuiMapper: selectedMapper : control.value\"\n        [value]=\"stringify(option)\"\n    >\n        {{ stringify(option) }}\n    </option>\n</optgroup>\n", styles: [":host{position:absolute;top:0;left:0;inline-size:100%;block-size:100%;opacity:0}\n"], dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i2.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i3.TuiDataListDirective, selector: "ng-template[tuiDataList]" }, { kind: "component", type: i4.TuiDataListGroupWrapperComponent, selector: "tui-data-list-wrapper[labels]", inputs: ["labels"] }, { kind: "directive", type: i5.TuiMultiSelectGroupDirective, selector: "[tuiMultiSelectGroup]" }, { kind: "pipe", type: i1.AsyncPipe, name: "async" }, { kind: "pipe", type: i6.TuiMapperPipe, name: "tuiMapper" }, { kind: "pipe", type: i7.TuiStringifyContentPipe, name: "tuiStringifyContent" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { TuiNativeMultiSelectGroupComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiNativeMultiSelectGroupComponent, decorators: [{
            type: Component,
            args: [{ selector: 'select[multiple][tuiSelect][labels]', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        tuiAsDataList(TuiNativeMultiSelectGroupComponent),
                        tuiProvide(AbstractTuiNativeMultiSelect, TuiNativeMultiSelectGroupComponent),
                        {
                            provide: TemplateRef,
                            deps: [TuiNativeMultiSelectGroupComponent],
                            useFactory: ({ datalist }) => datalist,
                        },
                    ], host: {
                        '[attr.aria-invalid]': 'host.invalid',
                        '[disabled]': 'host.disabled || control.readOnly',
                        '[tabIndex]': 'host.focusable ? 0 : -1',
                        '(change)': 'onValueChange($event.target.selectedOptions)',
                        '(click.stop.silent)': '0',
                        '(mousedown.stop.silent)': '0',
                    }, template: "<ng-container *ngIf=\"control.control?.valueChanges | async\" />\n\n<tui-data-list-wrapper\n    *tuiDataList\n    tuiMultiSelectGroup\n    [disabledItemHandler]=\"disabledItemHandler || host.disableItemHandler\"\n    [itemContent]=\"stringify | tuiStringifyContent\"\n    [items]=\"items\"\n    [labels]=\"labels\"\n/>\n<optgroup\n    *ngFor=\"let group of items; let index = index\"\n    [label]=\"labels[index]\"\n>\n    <option\n        *ngFor=\"let option of group\"\n        [disabled]=\"disabledItemHandler ? disabledItemHandler(option) : host.disableItemHandler(option)\"\n        [selected]=\"option | tuiMapper: selectedMapper : control.value\"\n        [value]=\"stringify(option)\"\n    >\n        {{ stringify(option) }}\n    </option>\n</optgroup>\n", styles: [":host{position:absolute;top:0;left:0;inline-size:100%;block-size:100%;opacity:0}\n"] }]
        }], propDecorators: { items: [{
                type: Input
            }], labels: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF0aXZlLW11bHRpLXNlbGVjdC1ncm91cC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9sZWdhY3kvY29tcG9uZW50cy9tdWx0aS1zZWxlY3QvbmF0aXZlLW11bHRpLXNlbGVjdC9uYXRpdmUtbXVsdGktc2VsZWN0LWdyb3VwLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2xlZ2FjeS9jb21wb25lbnRzL211bHRpLXNlbGVjdC9uYXRpdmUtbXVsdGktc2VsZWN0L25hdGl2ZS1tdWx0aS1zZWxlY3QtZ3JvdXAudGVtcGxhdGUuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDckYsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLG1DQUFtQyxDQUFDO0FBQzdELE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxxQ0FBcUMsQ0FBQztBQUVsRSxPQUFPLEVBQUMsNEJBQTRCLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQzs7Ozs7Ozs7O0FBRW5FLE1Bd0JhLGtDQUVYLFNBQVEsNEJBQStCO0lBMUJ6Qzs7UUE0QlcsVUFBSyxHQUEwQixFQUFFLENBQUM7UUFHbEMsV0FBTSxHQUFzQixFQUFFLENBQUM7S0FTekM7SUFQYSxhQUFhLENBQUMsZUFBcUQ7UUFDekUsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMzRSxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQzlFLE1BQU0sS0FBSyxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFFdkUsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN2QyxDQUFDOytHQWZRLGtDQUFrQzttR0FBbEMsa0NBQWtDLG9ZQW5CaEM7WUFDUCxhQUFhLENBQUMsa0NBQWtDLENBQUM7WUFDakQsVUFBVSxDQUFDLDRCQUE0QixFQUFFLGtDQUFrQyxDQUFDO1lBQzVFO2dCQUNJLE9BQU8sRUFBRSxXQUFXO2dCQUNwQixJQUFJLEVBQUUsQ0FBQyxrQ0FBa0MsQ0FBQztnQkFDMUMsVUFBVSxFQUFFLENBQUMsRUFBQyxRQUFRLEVBQThDLEVBQUUsRUFBRSxDQUNwRSxRQUFRO2FBQ2Y7U0FDSixpRENwQkwsNHZCQXVCQTs7U0RPYSxrQ0FBa0M7NEZBQWxDLGtDQUFrQztrQkF4QjlDLFNBQVM7K0JBQ0kscUNBQXFDLG1CQUc5Qix1QkFBdUIsQ0FBQyxNQUFNLGFBQ3BDO3dCQUNQLGFBQWEsb0NBQW9DO3dCQUNqRCxVQUFVLENBQUMsNEJBQTRCLHFDQUFxQzt3QkFDNUU7NEJBQ0ksT0FBTyxFQUFFLFdBQVc7NEJBQ3BCLElBQUksRUFBRSxvQ0FBb0M7NEJBQzFDLFVBQVUsRUFBRSxDQUFDLEVBQUMsUUFBUSxFQUE4QyxFQUFFLEVBQUUsQ0FDcEUsUUFBUTt5QkFDZjtxQkFDSixRQUNLO3dCQUNGLHFCQUFxQixFQUFFLGNBQWM7d0JBQ3JDLFlBQVksRUFBRSxtQ0FBbUM7d0JBQ2pELFlBQVksRUFBRSx5QkFBeUI7d0JBQ3ZDLFVBQVUsRUFBRSw4Q0FBOEM7d0JBQzFELHFCQUFxQixFQUFFLEdBQUc7d0JBQzFCLHlCQUF5QixFQUFFLEdBQUc7cUJBQ2pDOzhCQU1NLEtBQUs7c0JBRFgsS0FBSztnQkFJQyxNQUFNO3NCQURaLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIElucHV0LCBUZW1wbGF0ZVJlZn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge3R1aVByb3ZpZGV9IGZyb20gJ0B0YWlnYS11aS9jZGsvdXRpbHMvbWlzY2VsbGFuZW91cyc7XG5pbXBvcnQge3R1aUFzRGF0YUxpc3R9IGZyb20gJ0B0YWlnYS11aS9jb3JlL2NvbXBvbmVudHMvZGF0YS1saXN0JztcblxuaW1wb3J0IHtBYnN0cmFjdFR1aU5hdGl2ZU11bHRpU2VsZWN0fSBmcm9tICcuL25hdGl2ZS1tdWx0aS1zZWxlY3QnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ3NlbGVjdFttdWx0aXBsZV1bdHVpU2VsZWN0XVtsYWJlbHNdJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vbmF0aXZlLW11bHRpLXNlbGVjdC1ncm91cC50ZW1wbGF0ZS5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9uYXRpdmUtbXVsdGktc2VsZWN0LnN0eWxlLmxlc3MnXSxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgdHVpQXNEYXRhTGlzdChUdWlOYXRpdmVNdWx0aVNlbGVjdEdyb3VwQ29tcG9uZW50KSxcbiAgICAgICAgdHVpUHJvdmlkZShBYnN0cmFjdFR1aU5hdGl2ZU11bHRpU2VsZWN0LCBUdWlOYXRpdmVNdWx0aVNlbGVjdEdyb3VwQ29tcG9uZW50KSxcbiAgICAgICAge1xuICAgICAgICAgICAgcHJvdmlkZTogVGVtcGxhdGVSZWYsXG4gICAgICAgICAgICBkZXBzOiBbVHVpTmF0aXZlTXVsdGlTZWxlY3RHcm91cENvbXBvbmVudF0sXG4gICAgICAgICAgICB1c2VGYWN0b3J5OiAoe2RhdGFsaXN0fTogVHVpTmF0aXZlTXVsdGlTZWxlY3RHcm91cENvbXBvbmVudDx1bmtub3duPikgPT5cbiAgICAgICAgICAgICAgICBkYXRhbGlzdCxcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIGhvc3Q6IHtcbiAgICAgICAgJ1thdHRyLmFyaWEtaW52YWxpZF0nOiAnaG9zdC5pbnZhbGlkJyxcbiAgICAgICAgJ1tkaXNhYmxlZF0nOiAnaG9zdC5kaXNhYmxlZCB8fCBjb250cm9sLnJlYWRPbmx5JyxcbiAgICAgICAgJ1t0YWJJbmRleF0nOiAnaG9zdC5mb2N1c2FibGUgPyAwIDogLTEnLFxuICAgICAgICAnKGNoYW5nZSknOiAnb25WYWx1ZUNoYW5nZSgkZXZlbnQudGFyZ2V0LnNlbGVjdGVkT3B0aW9ucyknLFxuICAgICAgICAnKGNsaWNrLnN0b3Auc2lsZW50KSc6ICcwJyxcbiAgICAgICAgJyhtb3VzZWRvd24uc3RvcC5zaWxlbnQpJzogJzAnLFxuICAgIH0sXG59KVxuZXhwb3J0IGNsYXNzIFR1aU5hdGl2ZU11bHRpU2VsZWN0R3JvdXBDb21wb25lbnQ8XG4gICAgVCxcbj4gZXh0ZW5kcyBBYnN0cmFjdFR1aU5hdGl2ZU11bHRpU2VsZWN0PFQ+IHtcbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBpdGVtczogcmVhZG9ubHkgVFtdW10gfCBudWxsID0gW107XG5cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBsYWJlbHM6IHJlYWRvbmx5IHN0cmluZ1tdID0gW107XG5cbiAgICBwcm90ZWN0ZWQgb25WYWx1ZUNoYW5nZShzZWxlY3RlZE9wdGlvbnM6IEhUTUxTZWxlY3RFbGVtZW50WydzZWxlY3RlZE9wdGlvbnMnXSk6IHZvaWQge1xuICAgICAgICBjb25zdCBzZWxlY3RlZCA9IEFycmF5LmZyb20oc2VsZWN0ZWRPcHRpb25zKS5tYXAoKG9wdGlvbikgPT4gb3B0aW9uLmluZGV4KTtcbiAgICAgICAgY29uc3QgZmxhdEl0ZW1zID0gdGhpcy5pdGVtcz8ucmVkdWNlKChhY2MsIHZhbCkgPT4gYWNjLmNvbmNhdCh2YWwpLCBbXSkgfHwgW107XG4gICAgICAgIGNvbnN0IHZhbHVlID0gZmxhdEl0ZW1zLmZpbHRlcigoXywgaW5kZXgpID0+IHNlbGVjdGVkLmluY2x1ZGVzKGluZGV4KSk7XG5cbiAgICAgICAgdGhpcy5ob3N0Lm9uU2VsZWN0aW9uQ2hhbmdlKHZhbHVlKTtcbiAgICB9XG59XG4iLCI8bmctY29udGFpbmVyICpuZ0lmPVwiY29udHJvbC5jb250cm9sPy52YWx1ZUNoYW5nZXMgfCBhc3luY1wiIC8+XG5cbjx0dWktZGF0YS1saXN0LXdyYXBwZXJcbiAgICAqdHVpRGF0YUxpc3RcbiAgICB0dWlNdWx0aVNlbGVjdEdyb3VwXG4gICAgW2Rpc2FibGVkSXRlbUhhbmRsZXJdPVwiZGlzYWJsZWRJdGVtSGFuZGxlciB8fCBob3N0LmRpc2FibGVJdGVtSGFuZGxlclwiXG4gICAgW2l0ZW1Db250ZW50XT1cInN0cmluZ2lmeSB8IHR1aVN0cmluZ2lmeUNvbnRlbnRcIlxuICAgIFtpdGVtc109XCJpdGVtc1wiXG4gICAgW2xhYmVsc109XCJsYWJlbHNcIlxuLz5cbjxvcHRncm91cFxuICAgICpuZ0Zvcj1cImxldCBncm91cCBvZiBpdGVtczsgbGV0IGluZGV4ID0gaW5kZXhcIlxuICAgIFtsYWJlbF09XCJsYWJlbHNbaW5kZXhdXCJcbj5cbiAgICA8b3B0aW9uXG4gICAgICAgICpuZ0Zvcj1cImxldCBvcHRpb24gb2YgZ3JvdXBcIlxuICAgICAgICBbZGlzYWJsZWRdPVwiZGlzYWJsZWRJdGVtSGFuZGxlciA/IGRpc2FibGVkSXRlbUhhbmRsZXIob3B0aW9uKSA6IGhvc3QuZGlzYWJsZUl0ZW1IYW5kbGVyKG9wdGlvbilcIlxuICAgICAgICBbc2VsZWN0ZWRdPVwib3B0aW9uIHwgdHVpTWFwcGVyOiBzZWxlY3RlZE1hcHBlciA6IGNvbnRyb2wudmFsdWVcIlxuICAgICAgICBbdmFsdWVdPVwic3RyaW5naWZ5KG9wdGlvbilcIlxuICAgID5cbiAgICAgICAge3sgc3RyaW5naWZ5KG9wdGlvbikgfX1cbiAgICA8L29wdGlvbj5cbjwvb3B0Z3JvdXA+XG4iXX0=