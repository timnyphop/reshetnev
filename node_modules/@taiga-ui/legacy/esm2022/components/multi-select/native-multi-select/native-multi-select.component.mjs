import { ChangeDetectionStrategy, Component, Input, TemplateRef } from '@angular/core';
import { tuiProvide } from '@taiga-ui/cdk/utils/miscellaneous';
import { tuiAsDataList } from '@taiga-ui/core/components/data-list';
import { AbstractTuiNativeMultiSelect } from './native-multi-select';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/forms";
import * as i3 from "@taiga-ui/core/components/data-list";
import * as i4 from "@taiga-ui/kit/components/data-list-wrapper";
import * as i5 from "../multi-select-group/multi-select-group.directive";
import * as i6 from "@taiga-ui/cdk/pipes/mapper";
import * as i7 from "@taiga-ui/kit/pipes/stringify-content";
class TuiNativeMultiSelectComponent extends AbstractTuiNativeMultiSelect {
    constructor() {
        super(...arguments);
        this.items = [];
    }
    onValueChange(selectedOptions) {
        const selected = Array.from(selectedOptions).map((option) => option.index);
        const value = this.items?.filter((_, index) => selected.includes(index)) || [];
        this.host.onSelectionChange(value);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiNativeMultiSelectComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiNativeMultiSelectComponent, selector: "select[multiple][tuiSelect]:not([labels])", inputs: { items: "items" }, host: { listeners: { "change": "onValueChange($event.target.selectedOptions)", "click.stop.silent": "0", "mousedown.stop.silent": "0" }, properties: { "attr.aria-invalid": "host.invalid", "disabled": "host.disabled || control.readOnly", "tabIndex": "host.focusable ? 0 : -1" } }, providers: [
            tuiAsDataList(TuiNativeMultiSelectComponent),
            tuiProvide(AbstractTuiNativeMultiSelect, TuiNativeMultiSelectComponent),
            {
                provide: TemplateRef,
                deps: [TuiNativeMultiSelectComponent],
                useFactory: ({ datalist }) => datalist,
            },
        ], usesInheritance: true, ngImport: i0, template: "<ng-container *ngIf=\"control.control?.valueChanges | async\" />\n\n<tui-data-list-wrapper\n    *tuiDataList\n    tuiMultiSelectGroup\n    [disabledItemHandler]=\"disabledItemHandler || host.disableItemHandler\"\n    [itemContent]=\"stringify | tuiStringifyContent\"\n    [items]=\"items\"\n/>\n<option\n    *ngFor=\"let option of items\"\n    [disabled]=\"disabledItemHandler ? disabledItemHandler(option) : host.disableItemHandler(option)\"\n    [selected]=\"option | tuiMapper: selectedMapper : control.value\"\n    [value]=\"stringify(option)\"\n>\n    {{ stringify(option) }}\n</option>\n", styles: [":host{position:absolute;top:0;left:0;inline-size:100%;block-size:100%;opacity:0}\n"], dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i2.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i3.TuiDataListDirective, selector: "ng-template[tuiDataList]" }, { kind: "component", type: i4.TuiDataListWrapperComponent, selector: "tui-data-list-wrapper:not([labels])", inputs: ["items", "disabledItemHandler", "emptyContent", "size", "itemContent"], outputs: ["itemClick"] }, { kind: "directive", type: i5.TuiMultiSelectGroupDirective, selector: "[tuiMultiSelectGroup]" }, { kind: "pipe", type: i1.AsyncPipe, name: "async" }, { kind: "pipe", type: i6.TuiMapperPipe, name: "tuiMapper" }, { kind: "pipe", type: i7.TuiStringifyContentPipe, name: "tuiStringifyContent" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { TuiNativeMultiSelectComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiNativeMultiSelectComponent, decorators: [{
            type: Component,
            args: [{ standalone: false, selector: 'select[multiple][tuiSelect]:not([labels])', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        tuiAsDataList(TuiNativeMultiSelectComponent),
                        tuiProvide(AbstractTuiNativeMultiSelect, TuiNativeMultiSelectComponent),
                        {
                            provide: TemplateRef,
                            deps: [TuiNativeMultiSelectComponent],
                            useFactory: ({ datalist }) => datalist,
                        },
                    ], host: {
                        '[attr.aria-invalid]': 'host.invalid',
                        '[disabled]': 'host.disabled || control.readOnly',
                        '[tabIndex]': 'host.focusable ? 0 : -1',
                        '(change)': 'onValueChange($event.target.selectedOptions)',
                        '(click.stop.silent)': '0',
                        '(mousedown.stop.silent)': '0',
                    }, template: "<ng-container *ngIf=\"control.control?.valueChanges | async\" />\n\n<tui-data-list-wrapper\n    *tuiDataList\n    tuiMultiSelectGroup\n    [disabledItemHandler]=\"disabledItemHandler || host.disableItemHandler\"\n    [itemContent]=\"stringify | tuiStringifyContent\"\n    [items]=\"items\"\n/>\n<option\n    *ngFor=\"let option of items\"\n    [disabled]=\"disabledItemHandler ? disabledItemHandler(option) : host.disableItemHandler(option)\"\n    [selected]=\"option | tuiMapper: selectedMapper : control.value\"\n    [value]=\"stringify(option)\"\n>\n    {{ stringify(option) }}\n</option>\n", styles: [":host{position:absolute;top:0;left:0;inline-size:100%;block-size:100%;opacity:0}\n"] }]
        }], propDecorators: { items: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF0aXZlLW11bHRpLXNlbGVjdC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9sZWdhY3kvY29tcG9uZW50cy9tdWx0aS1zZWxlY3QvbmF0aXZlLW11bHRpLXNlbGVjdC9uYXRpdmUtbXVsdGktc2VsZWN0LmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2xlZ2FjeS9jb21wb25lbnRzL211bHRpLXNlbGVjdC9uYXRpdmUtbXVsdGktc2VsZWN0L25hdGl2ZS1tdWx0aS1zZWxlY3QudGVtcGxhdGUuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDckYsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLG1DQUFtQyxDQUFDO0FBQzdELE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxxQ0FBcUMsQ0FBQztBQUVsRSxPQUFPLEVBQUMsNEJBQTRCLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQzs7Ozs7Ozs7O0FBRW5FLE1Bd0JhLDZCQUFpQyxTQUFRLDRCQUErQjtJQXhCckY7O1FBMEJXLFVBQUssR0FBd0IsRUFBRSxDQUFDO0tBUTFDO0lBTmEsYUFBYSxDQUFDLGVBQXFEO1FBQ3pFLE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDM0UsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO1FBRS9FLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdkMsQ0FBQzsrR0FUUSw2QkFBNkI7bUdBQTdCLDZCQUE2Qix3WEFsQjNCO1lBQ1AsYUFBYSxDQUFDLDZCQUE2QixDQUFDO1lBQzVDLFVBQVUsQ0FBQyw0QkFBNEIsRUFBRSw2QkFBNkIsQ0FBQztZQUN2RTtnQkFDSSxPQUFPLEVBQUUsV0FBVztnQkFDcEIsSUFBSSxFQUFFLENBQUMsNkJBQTZCLENBQUM7Z0JBQ3JDLFVBQVUsRUFBRSxDQUFDLEVBQUMsUUFBUSxFQUF5QyxFQUFFLEVBQUUsQ0FBQyxRQUFRO2FBQy9FO1NBQ0osaURDcEJMLG1sQkFpQkE7O1NEYWEsNkJBQTZCOzRGQUE3Qiw2QkFBNkI7a0JBeEJ6QyxTQUFTO2lDQUNNLEtBQUssWUFDUCwyQ0FBMkMsbUJBR3BDLHVCQUF1QixDQUFDLE1BQU0sYUFDcEM7d0JBQ1AsYUFBYSwrQkFBK0I7d0JBQzVDLFVBQVUsQ0FBQyw0QkFBNEIsZ0NBQWdDO3dCQUN2RTs0QkFDSSxPQUFPLEVBQUUsV0FBVzs0QkFDcEIsSUFBSSxFQUFFLCtCQUErQjs0QkFDckMsVUFBVSxFQUFFLENBQUMsRUFBQyxRQUFRLEVBQXlDLEVBQUUsRUFBRSxDQUFDLFFBQVE7eUJBQy9FO3FCQUNKLFFBQ0s7d0JBQ0YscUJBQXFCLEVBQUUsY0FBYzt3QkFDckMsWUFBWSxFQUFFLG1DQUFtQzt3QkFDakQsWUFBWSxFQUFFLHlCQUF5Qjt3QkFDdkMsVUFBVSxFQUFFLDhDQUE4Qzt3QkFDMUQscUJBQXFCLEVBQUUsR0FBRzt3QkFDMUIseUJBQXlCLEVBQUUsR0FBRztxQkFDakM7OEJBSU0sS0FBSztzQkFEWCxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBJbnB1dCwgVGVtcGxhdGVSZWZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHt0dWlQcm92aWRlfSBmcm9tICdAdGFpZ2EtdWkvY2RrL3V0aWxzL21pc2NlbGxhbmVvdXMnO1xuaW1wb3J0IHt0dWlBc0RhdGFMaXN0fSBmcm9tICdAdGFpZ2EtdWkvY29yZS9jb21wb25lbnRzL2RhdGEtbGlzdCc7XG5cbmltcG9ydCB7QWJzdHJhY3RUdWlOYXRpdmVNdWx0aVNlbGVjdH0gZnJvbSAnLi9uYXRpdmUtbXVsdGktc2VsZWN0JztcblxuQENvbXBvbmVudCh7XG4gICAgc3RhbmRhbG9uZTogZmFsc2UsXG4gICAgc2VsZWN0b3I6ICdzZWxlY3RbbXVsdGlwbGVdW3R1aVNlbGVjdF06bm90KFtsYWJlbHNdKScsXG4gICAgdGVtcGxhdGVVcmw6ICcuL25hdGl2ZS1tdWx0aS1zZWxlY3QudGVtcGxhdGUuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vbmF0aXZlLW11bHRpLXNlbGVjdC5zdHlsZS5sZXNzJ10sXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHR1aUFzRGF0YUxpc3QoVHVpTmF0aXZlTXVsdGlTZWxlY3RDb21wb25lbnQpLFxuICAgICAgICB0dWlQcm92aWRlKEFic3RyYWN0VHVpTmF0aXZlTXVsdGlTZWxlY3QsIFR1aU5hdGl2ZU11bHRpU2VsZWN0Q29tcG9uZW50KSxcbiAgICAgICAge1xuICAgICAgICAgICAgcHJvdmlkZTogVGVtcGxhdGVSZWYsXG4gICAgICAgICAgICBkZXBzOiBbVHVpTmF0aXZlTXVsdGlTZWxlY3RDb21wb25lbnRdLFxuICAgICAgICAgICAgdXNlRmFjdG9yeTogKHtkYXRhbGlzdH06IFR1aU5hdGl2ZU11bHRpU2VsZWN0Q29tcG9uZW50PHVua25vd24+KSA9PiBkYXRhbGlzdCxcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIGhvc3Q6IHtcbiAgICAgICAgJ1thdHRyLmFyaWEtaW52YWxpZF0nOiAnaG9zdC5pbnZhbGlkJyxcbiAgICAgICAgJ1tkaXNhYmxlZF0nOiAnaG9zdC5kaXNhYmxlZCB8fCBjb250cm9sLnJlYWRPbmx5JyxcbiAgICAgICAgJ1t0YWJJbmRleF0nOiAnaG9zdC5mb2N1c2FibGUgPyAwIDogLTEnLFxuICAgICAgICAnKGNoYW5nZSknOiAnb25WYWx1ZUNoYW5nZSgkZXZlbnQudGFyZ2V0LnNlbGVjdGVkT3B0aW9ucyknLFxuICAgICAgICAnKGNsaWNrLnN0b3Auc2lsZW50KSc6ICcwJyxcbiAgICAgICAgJyhtb3VzZWRvd24uc3RvcC5zaWxlbnQpJzogJzAnLFxuICAgIH0sXG59KVxuZXhwb3J0IGNsYXNzIFR1aU5hdGl2ZU11bHRpU2VsZWN0Q29tcG9uZW50PFQ+IGV4dGVuZHMgQWJzdHJhY3RUdWlOYXRpdmVNdWx0aVNlbGVjdDxUPiB7XG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgaXRlbXM6IHJlYWRvbmx5IFRbXSB8IG51bGwgPSBbXTtcblxuICAgIHByb3RlY3RlZCBvblZhbHVlQ2hhbmdlKHNlbGVjdGVkT3B0aW9uczogSFRNTFNlbGVjdEVsZW1lbnRbJ3NlbGVjdGVkT3B0aW9ucyddKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHNlbGVjdGVkID0gQXJyYXkuZnJvbShzZWxlY3RlZE9wdGlvbnMpLm1hcCgob3B0aW9uKSA9PiBvcHRpb24uaW5kZXgpO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuaXRlbXM/LmZpbHRlcigoXywgaW5kZXgpID0+IHNlbGVjdGVkLmluY2x1ZGVzKGluZGV4KSkgfHwgW107XG5cbiAgICAgICAgdGhpcy5ob3N0Lm9uU2VsZWN0aW9uQ2hhbmdlKHZhbHVlKTtcbiAgICB9XG59XG4iLCI8bmctY29udGFpbmVyICpuZ0lmPVwiY29udHJvbC5jb250cm9sPy52YWx1ZUNoYW5nZXMgfCBhc3luY1wiIC8+XG5cbjx0dWktZGF0YS1saXN0LXdyYXBwZXJcbiAgICAqdHVpRGF0YUxpc3RcbiAgICB0dWlNdWx0aVNlbGVjdEdyb3VwXG4gICAgW2Rpc2FibGVkSXRlbUhhbmRsZXJdPVwiZGlzYWJsZWRJdGVtSGFuZGxlciB8fCBob3N0LmRpc2FibGVJdGVtSGFuZGxlclwiXG4gICAgW2l0ZW1Db250ZW50XT1cInN0cmluZ2lmeSB8IHR1aVN0cmluZ2lmeUNvbnRlbnRcIlxuICAgIFtpdGVtc109XCJpdGVtc1wiXG4vPlxuPG9wdGlvblxuICAgICpuZ0Zvcj1cImxldCBvcHRpb24gb2YgaXRlbXNcIlxuICAgIFtkaXNhYmxlZF09XCJkaXNhYmxlZEl0ZW1IYW5kbGVyID8gZGlzYWJsZWRJdGVtSGFuZGxlcihvcHRpb24pIDogaG9zdC5kaXNhYmxlSXRlbUhhbmRsZXIob3B0aW9uKVwiXG4gICAgW3NlbGVjdGVkXT1cIm9wdGlvbiB8IHR1aU1hcHBlcjogc2VsZWN0ZWRNYXBwZXIgOiBjb250cm9sLnZhbHVlXCJcbiAgICBbdmFsdWVdPVwic3RyaW5naWZ5KG9wdGlvbilcIlxuPlxuICAgIHt7IHN0cmluZ2lmeShvcHRpb24pIH19XG48L29wdGlvbj5cbiJdfQ==