import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, ContentChildren, inject, Input, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { EMPTY_QUERY, TUI_DEFAULT_IDENTITY_MATCHER } from '@taiga-ui/cdk/constants';
import { tuiControlValue, tuiQueryListChanges } from '@taiga-ui/cdk/observables';
import { tuiGetOriginalArrayFromQueryList, tuiIsPresent, tuiPure, } from '@taiga-ui/cdk/utils/miscellaneous';
import { TUI_DATA_LIST_HOST, TuiOption } from '@taiga-ui/core/components/data-list';
import { TUI_MULTI_SELECT_TEXTS } from '@taiga-ui/kit/tokens';
import { combineLatest, map } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@taiga-ui/cdk/directives/let";
import * as i3 from "@taiga-ui/core/components/link";
class TuiMultiSelectGroupComponent {
    constructor() {
        this.options = EMPTY_QUERY;
        this.host = inject(TUI_DATA_LIST_HOST);
        this.control = inject(NgControl);
        this.multiSelectTexts$ = inject(TUI_MULTI_SELECT_TEXTS);
        this.label = '';
    }
    get empty$() {
        return tuiQueryListChanges(this.options).pipe(map(({ length }) => !length));
    }
    get disabled$() {
        return tuiQueryListChanges(this.options).pipe(map((items) => items.every(({ disabled }) => disabled)));
    }
    get value$() {
        return combineLatest([this.items$, this.valueChanges$]).pipe(map(([items, current]) => {
            let result = false;
            for (let i = 0; i < items.length; i++) {
                const selected = current.some((selected) => this.matcher(selected, items[i]));
                if ((!selected && result) || (selected && !result && i)) {
                    return null;
                }
                result = selected;
            }
            return result;
        }));
    }
    onClick(checked) {
        if (!this.control.control) {
            return;
        }
        const controlValue = this.control.value || [];
        const { values } = this;
        const filtered = controlValue.filter((current) => values.every((item) => !this.matcher(current, item)));
        this.control.control.setValue(checked ? filtered : [...filtered, ...values]);
    }
    get items$() {
        return tuiQueryListChanges(this.options).pipe(map((options) => options.map(({ value }) => value).filter(tuiIsPresent)));
    }
    get valueChanges$() {
        return tuiControlValue(this.control).pipe(map((value) => value || []));
    }
    get values() {
        return this.filter(tuiGetOriginalArrayFromQueryList(this.options));
    }
    get matcher() {
        return this.host.identityMatcher || TUI_DEFAULT_IDENTITY_MATCHER;
    }
    filter(items) {
        return items.map(({ value }) => value).filter(tuiIsPresent);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiMultiSelectGroupComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiMultiSelectGroupComponent, selector: "tui-opt-group[tuiMultiSelectGroup]", inputs: { label: "label" }, host: { properties: { "class._label": "label" } }, queries: [{ propertyName: "options", predicate: TuiOption }], ngImport: i0, template: "<span\n    *tuiLet=\"value$ | async as value\"\n    class=\"t-wrapper\"\n>\n    <span class=\"t-label\">{{ label }}</span>\n    <button\n        *ngIf=\"label && !(empty$ | async)\"\n        tuiLink\n        type=\"button\"\n        class=\"t-button\"\n        [disabled]=\"!!(disabled$ | async)\"\n        (click)=\"onClick(value)\"\n    >\n        {{ (multiSelectTexts$ | async)?.[value ? 'none' : 'all'] }}\n    </button>\n</span>\n<ng-content />\n", styles: [":host._label:before{display:none}:host:not(:first-of-type) .t-label:not(:empty){padding-top:1.25rem}:host:not(:first-of-type) .t-button{margin-top:1.25rem}.t-wrapper{display:flex;align-items:flex-start}.t-label:not(:empty){flex:1;padding:.75rem 1rem .25rem .625rem}.t-button{margin:.75rem 1rem 0 auto}\n"], dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.TuiLet, selector: "[tuiLet]", inputs: ["tuiLet"] }, { kind: "directive", type: i3.TuiLink, selector: "a[tuiLink], button[tuiLink]", inputs: ["pseudo"] }, { kind: "pipe", type: i1.AsyncPipe, name: "async" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
__decorate([
    tuiPure
], TuiMultiSelectGroupComponent.prototype, "empty$", null);
__decorate([
    tuiPure
], TuiMultiSelectGroupComponent.prototype, "disabled$", null);
__decorate([
    tuiPure
], TuiMultiSelectGroupComponent.prototype, "value$", null);
__decorate([
    tuiPure
], TuiMultiSelectGroupComponent.prototype, "items$", null);
__decorate([
    tuiPure
], TuiMultiSelectGroupComponent.prototype, "valueChanges$", null);
__decorate([
    tuiPure
], TuiMultiSelectGroupComponent.prototype, "filter", null);
export { TuiMultiSelectGroupComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiMultiSelectGroupComponent, decorators: [{
            type: Component,
            args: [{ standalone: false, selector: 'tui-opt-group[tuiMultiSelectGroup]', changeDetection: ChangeDetectionStrategy.OnPush, host: {
                        '[class._label]': 'label',
                    }, template: "<span\n    *tuiLet=\"value$ | async as value\"\n    class=\"t-wrapper\"\n>\n    <span class=\"t-label\">{{ label }}</span>\n    <button\n        *ngIf=\"label && !(empty$ | async)\"\n        tuiLink\n        type=\"button\"\n        class=\"t-button\"\n        [disabled]=\"!!(disabled$ | async)\"\n        (click)=\"onClick(value)\"\n    >\n        {{ (multiSelectTexts$ | async)?.[value ? 'none' : 'all'] }}\n    </button>\n</span>\n<ng-content />\n", styles: [":host._label:before{display:none}:host:not(:first-of-type) .t-label:not(:empty){padding-top:1.25rem}:host:not(:first-of-type) .t-button{margin-top:1.25rem}.t-wrapper{display:flex;align-items:flex-start}.t-label:not(:empty){flex:1;padding:.75rem 1rem .25rem .625rem}.t-button{margin:.75rem 1rem 0 auto}\n"] }]
        }], propDecorators: { options: [{
                type: ContentChildren,
                args: [TuiOption]
            }], label: [{
                type: Input
            }], empty$: [], disabled$: [], value$: [], items$: [], valueChanges$: [], filter: [] } });
//# sourceMappingURL=data:application/json;base64,