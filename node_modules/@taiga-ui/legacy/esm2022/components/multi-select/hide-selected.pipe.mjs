import { __decorate } from "tslib";
import { inject, Pipe } from '@angular/core';
import { tuiPure } from '@taiga-ui/cdk/utils/miscellaneous';
import { tuiIsFlat } from '@taiga-ui/kit/utils';
import { TuiMultiSelectComponent } from './multi-select.component';
import * as i0 from "@angular/core";
class TuiHideSelectedPipe {
    constructor() {
        this.component = inject(TuiMultiSelectComponent);
    }
    transform(items) {
        const { value, identityMatcher } = this.component;
        if (!items) {
            return null;
        }
        return tuiIsFlat(items)
            ? this.filter(items, value, identityMatcher)
            : this.filter2d(items, value, identityMatcher);
    }
    filter2d(items, value, matcher) {
        return items.map((subItems) => this.filter(subItems, value, matcher));
    }
    filter(items, value, matcher) {
        return items.filter((item) => value.every((selected) => !matcher(selected, item)));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiHideSelectedPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "16.2.12", ngImport: i0, type: TuiHideSelectedPipe, name: "tuiHideSelected", pure: false }); }
}
__decorate([
    tuiPure
], TuiHideSelectedPipe.prototype, "filter2d", null);
__decorate([
    tuiPure
], TuiHideSelectedPipe.prototype, "filter", null);
export { TuiHideSelectedPipe };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiHideSelectedPipe, decorators: [{
            type: Pipe,
            args: [{
                    standalone: false,
                    name: 'tuiHideSelected',
                    pure: false,
                }]
        }], propDecorators: { filter2d: [], filter: [] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlkZS1zZWxlY3RlZC5waXBlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbGVnYWN5L2NvbXBvbmVudHMvbXVsdGktc2VsZWN0L2hpZGUtc2VsZWN0ZWQucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsT0FBTyxFQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLG1DQUFtQyxDQUFDO0FBQzFELE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUU5QyxPQUFPLEVBQUMsdUJBQXVCLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQzs7QUFFakUsTUFLYSxtQkFBbUI7SUFMaEM7UUFNcUIsY0FBUyxHQUFHLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0tBdUNoRTtJQWpDVSxTQUFTLENBQ1osS0FBd0Q7UUFFeEQsTUFBTSxFQUFDLEtBQUssRUFBRSxlQUFlLEVBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBRWhELElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDUixPQUFPLElBQUksQ0FBQztTQUNmO1FBRUQsT0FBTyxTQUFTLENBQUMsS0FBSyxDQUFDO1lBQ25CLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsZUFBZSxDQUFDO1lBQzVDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUdPLFFBQVEsQ0FDWixLQUFrQyxFQUNsQyxLQUFtQixFQUNuQixPQUE4QjtRQUU5QixPQUFPLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQzFFLENBQUM7SUFHTyxNQUFNLENBQ1YsS0FBbUIsRUFDbkIsS0FBbUIsRUFDbkIsT0FBOEI7UUFFOUIsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FDekIsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQ3RELENBQUM7SUFDTixDQUFDOytHQXZDUSxtQkFBbUI7NkdBQW5CLG1CQUFtQjs7QUFzQnBCO0lBRFAsT0FBTzttREFPUDtBQUdPO0lBRFAsT0FBTztpREFTUDtTQXZDUSxtQkFBbUI7NEZBQW5CLG1CQUFtQjtrQkFML0IsSUFBSTttQkFBQztvQkFDRixVQUFVLEVBQUUsS0FBSztvQkFDakIsSUFBSSxFQUFFLGlCQUFpQjtvQkFDdkIsSUFBSSxFQUFFLEtBQUs7aUJBQ2Q7OEJBdUJXLFFBQVEsTUFTUixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUge1BpcGVUcmFuc2Zvcm19IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtpbmplY3QsIFBpcGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHR5cGUge1R1aUlkZW50aXR5TWF0Y2hlcn0gZnJvbSAnQHRhaWdhLXVpL2Nkay90eXBlcyc7XG5pbXBvcnQge3R1aVB1cmV9IGZyb20gJ0B0YWlnYS11aS9jZGsvdXRpbHMvbWlzY2VsbGFuZW91cyc7XG5pbXBvcnQge3R1aUlzRmxhdH0gZnJvbSAnQHRhaWdhLXVpL2tpdC91dGlscyc7XG5cbmltcG9ydCB7VHVpTXVsdGlTZWxlY3RDb21wb25lbnR9IGZyb20gJy4vbXVsdGktc2VsZWN0LmNvbXBvbmVudCc7XG5cbkBQaXBlKHtcbiAgICBzdGFuZGFsb25lOiBmYWxzZSxcbiAgICBuYW1lOiAndHVpSGlkZVNlbGVjdGVkJyxcbiAgICBwdXJlOiBmYWxzZSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpSGlkZVNlbGVjdGVkUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgY29tcG9uZW50ID0gaW5qZWN0KFR1aU11bHRpU2VsZWN0Q29tcG9uZW50KTtcblxuICAgIHB1YmxpYyB0cmFuc2Zvcm08VD4oaXRlbXM6IHJlYWRvbmx5IFRbXSB8IG51bGwpOiByZWFkb25seSBUW10gfCBudWxsO1xuICAgIHB1YmxpYyB0cmFuc2Zvcm08VD4oXG4gICAgICAgIGl0ZW1zOiBSZWFkb25seUFycmF5PHJlYWRvbmx5IFRbXT4gfCBudWxsLFxuICAgICk6IFJlYWRvbmx5QXJyYXk8cmVhZG9ubHkgVFtdPiB8IG51bGw7XG4gICAgcHVibGljIHRyYW5zZm9ybTxUPihcbiAgICAgICAgaXRlbXM6IFJlYWRvbmx5QXJyYXk8cmVhZG9ubHkgVFtdPiB8IHJlYWRvbmx5IFRbXSB8IG51bGwsXG4gICAgKTogUmVhZG9ubHlBcnJheTxyZWFkb25seSBUW10+IHwgcmVhZG9ubHkgVFtdIHwgbnVsbCB7XG4gICAgICAgIGNvbnN0IHt2YWx1ZSwgaWRlbnRpdHlNYXRjaGVyfSA9IHRoaXMuY29tcG9uZW50O1xuXG4gICAgICAgIGlmICghaXRlbXMpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHR1aUlzRmxhdChpdGVtcylcbiAgICAgICAgICAgID8gdGhpcy5maWx0ZXIoaXRlbXMsIHZhbHVlLCBpZGVudGl0eU1hdGNoZXIpXG4gICAgICAgICAgICA6IHRoaXMuZmlsdGVyMmQoaXRlbXMsIHZhbHVlLCBpZGVudGl0eU1hdGNoZXIpO1xuICAgIH1cblxuICAgIEB0dWlQdXJlXG4gICAgcHJpdmF0ZSBmaWx0ZXIyZDxUPihcbiAgICAgICAgaXRlbXM6IFJlYWRvbmx5QXJyYXk8cmVhZG9ubHkgVFtdPixcbiAgICAgICAgdmFsdWU6IHJlYWRvbmx5IFRbXSxcbiAgICAgICAgbWF0Y2hlcjogVHVpSWRlbnRpdHlNYXRjaGVyPFQ+LFxuICAgICk6IFJlYWRvbmx5QXJyYXk8cmVhZG9ubHkgVFtdPiB7XG4gICAgICAgIHJldHVybiBpdGVtcy5tYXAoKHN1Ykl0ZW1zKSA9PiB0aGlzLmZpbHRlcihzdWJJdGVtcywgdmFsdWUsIG1hdGNoZXIpKTtcbiAgICB9XG5cbiAgICBAdHVpUHVyZVxuICAgIHByaXZhdGUgZmlsdGVyPFQ+KFxuICAgICAgICBpdGVtczogcmVhZG9ubHkgVFtdLFxuICAgICAgICB2YWx1ZTogcmVhZG9ubHkgVFtdLFxuICAgICAgICBtYXRjaGVyOiBUdWlJZGVudGl0eU1hdGNoZXI8VD4sXG4gICAgKTogcmVhZG9ubHkgVFtdIHtcbiAgICAgICAgcmV0dXJuIGl0ZW1zLmZpbHRlcigoaXRlbSkgPT5cbiAgICAgICAgICAgIHZhbHVlLmV2ZXJ5KChzZWxlY3RlZCkgPT4gIW1hdGNoZXIoc2VsZWN0ZWQsIGl0ZW0pKSxcbiAgICAgICAgKTtcbiAgICB9XG59XG4iXX0=