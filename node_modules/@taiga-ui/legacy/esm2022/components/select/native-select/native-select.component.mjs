import { ChangeDetectionStrategy, Component, Input, TemplateRef } from '@angular/core';
import { tuiProvide } from '@taiga-ui/cdk/utils/miscellaneous';
import { tuiAsDataList } from '@taiga-ui/core/components/data-list';
import { AbstractTuiNativeSelect } from '@taiga-ui/legacy/classes';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@taiga-ui/core/components/data-list";
import * as i3 from "@taiga-ui/kit/components/data-list-wrapper";
import * as i4 from "@taiga-ui/kit/pipes/stringify-content";
class TuiNativeSelectComponent extends AbstractTuiNativeSelect {
    constructor() {
        super(...arguments);
        this.items = [];
    }
    get stringify() {
        return this.host.stringify;
    }
    selected(option) {
        return this.control.value === option;
    }
    onValueChange(index) {
        this.host.onValueChange(this.items?.[index] || null);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiNativeSelectComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiNativeSelectComponent, selector: "select[tuiSelect]:not([labels]):not([multiple])", inputs: { items: "items" }, host: { listeners: { "change": "onValueChange($event.target.options.selectedIndex - (emptyOption ? 1 : 0))" }, properties: { "attr.aria-invalid": "host.invalid", "disabled": "host.disabled || control.readOnly", "tabIndex": "host.focusable ? 0 : -1", "value": "host.value" } }, providers: [
            tuiAsDataList(TuiNativeSelectComponent),
            tuiProvide(AbstractTuiNativeSelect, TuiNativeSelectComponent),
            {
                provide: TemplateRef,
                deps: [TuiNativeSelectComponent],
                useFactory: ({ datalist }) => datalist,
            },
        ], usesInheritance: true, ngImport: i0, template: "<tui-data-list-wrapper\n    *tuiDataList\n    [disabledItemHandler]=\"disabledItemHandler || itemsHandlers.disabledItemHandler\"\n    [itemContent]=\"stringify | tuiStringifyContent\"\n    [items]=\"items\"\n/>\n<ng-container *ngIf=\"control.control?.valueChanges | async\" />\n<option\n    *ngIf=\"emptyOption\"\n    disabled\n    selected\n    value=\"\"\n>\n    {{ placeholder }}\n</option>\n<option\n    *ngFor=\"let option of items; let index = index\"\n    [disabled]=\"disabledItemHandler ? disabledItemHandler(option) : itemsHandlers.disabledItemHandler(option)\"\n    [selected]=\"selected(option)\"\n    [value]=\"stringify(option)\"\n>\n    {{ stringify(option) }}\n</option>\n", styles: [":host{position:absolute;top:0;left:0;inline-size:100%;block-size:100%;opacity:0}\n"], dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.TuiDataListDirective, selector: "ng-template[tuiDataList]" }, { kind: "component", type: i3.TuiDataListWrapperComponent, selector: "tui-data-list-wrapper:not([labels])", inputs: ["items", "disabledItemHandler", "emptyContent", "size", "itemContent"], outputs: ["itemClick"] }, { kind: "pipe", type: i1.AsyncPipe, name: "async" }, { kind: "pipe", type: i4.TuiStringifyContentPipe, name: "tuiStringifyContent" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { TuiNativeSelectComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiNativeSelectComponent, decorators: [{
            type: Component,
            args: [{ selector: 'select[tuiSelect]:not([labels]):not([multiple])', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        tuiAsDataList(TuiNativeSelectComponent),
                        tuiProvide(AbstractTuiNativeSelect, TuiNativeSelectComponent),
                        {
                            provide: TemplateRef,
                            deps: [TuiNativeSelectComponent],
                            useFactory: ({ datalist }) => datalist,
                        },
                    ], host: {
                        '[attr.aria-invalid]': 'host.invalid',
                        '[disabled]': 'host.disabled || control.readOnly',
                        '[tabIndex]': 'host.focusable ? 0 : -1',
                        '[value]': 'host.value',
                        '(change)': 'onValueChange($event.target.options.selectedIndex - (emptyOption ? 1 : 0))',
                    }, template: "<tui-data-list-wrapper\n    *tuiDataList\n    [disabledItemHandler]=\"disabledItemHandler || itemsHandlers.disabledItemHandler\"\n    [itemContent]=\"stringify | tuiStringifyContent\"\n    [items]=\"items\"\n/>\n<ng-container *ngIf=\"control.control?.valueChanges | async\" />\n<option\n    *ngIf=\"emptyOption\"\n    disabled\n    selected\n    value=\"\"\n>\n    {{ placeholder }}\n</option>\n<option\n    *ngFor=\"let option of items; let index = index\"\n    [disabled]=\"disabledItemHandler ? disabledItemHandler(option) : itemsHandlers.disabledItemHandler(option)\"\n    [selected]=\"selected(option)\"\n    [value]=\"stringify(option)\"\n>\n    {{ stringify(option) }}\n</option>\n", styles: [":host{position:absolute;top:0;left:0;inline-size:100%;block-size:100%;opacity:0}\n"] }]
        }], propDecorators: { items: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF0aXZlLXNlbGVjdC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9sZWdhY3kvY29tcG9uZW50cy9zZWxlY3QvbmF0aXZlLXNlbGVjdC9uYXRpdmUtc2VsZWN0LmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2xlZ2FjeS9jb21wb25lbnRzL3NlbGVjdC9uYXRpdmUtc2VsZWN0L25hdGl2ZS1zZWxlY3QudGVtcGxhdGUuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDckYsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLG1DQUFtQyxDQUFDO0FBQzdELE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxxQ0FBcUMsQ0FBQztBQUVsRSxPQUFPLEVBQUMsdUJBQXVCLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQzs7Ozs7O0FBSWpFLE1BdUJhLHdCQUE0QixTQUFRLHVCQUdoRDtJQTFCRDs7UUE0QlcsVUFBSyxHQUF3QixFQUFFLENBQUM7S0FhMUM7SUFYRyxJQUFjLFNBQVM7UUFDbkIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUMvQixDQUFDO0lBRVMsUUFBUSxDQUFDLE1BQVM7UUFDeEIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssS0FBSyxNQUFNLENBQUM7SUFDekMsQ0FBQztJQUVTLGFBQWEsQ0FBQyxLQUFhO1FBQ2pDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQztJQUN6RCxDQUFDOytHQWpCUSx3QkFBd0I7bUdBQXhCLHdCQUF3QiwyWEFsQnRCO1lBQ1AsYUFBYSxDQUFDLHdCQUF3QixDQUFDO1lBQ3ZDLFVBQVUsQ0FBQyx1QkFBdUIsRUFBRSx3QkFBd0IsQ0FBQztZQUM3RDtnQkFDSSxPQUFPLEVBQUUsV0FBVztnQkFDcEIsSUFBSSxFQUFFLENBQUMsd0JBQXdCLENBQUM7Z0JBQ2hDLFVBQVUsRUFBRSxDQUFDLEVBQUMsUUFBUSxFQUFvQyxFQUFFLEVBQUUsQ0FBQyxRQUFRO2FBQzFFO1NBQ0osaURDckJMLGtyQkF1QkE7O1NEUWEsd0JBQXdCOzRGQUF4Qix3QkFBd0I7a0JBdkJwQyxTQUFTOytCQUNJLGlEQUFpRCxtQkFHMUMsdUJBQXVCLENBQUMsTUFBTSxhQUNwQzt3QkFDUCxhQUFhLDBCQUEwQjt3QkFDdkMsVUFBVSxDQUFDLHVCQUF1QiwyQkFBMkI7d0JBQzdEOzRCQUNJLE9BQU8sRUFBRSxXQUFXOzRCQUNwQixJQUFJLEVBQUUsMEJBQTBCOzRCQUNoQyxVQUFVLEVBQUUsQ0FBQyxFQUFDLFFBQVEsRUFBb0MsRUFBRSxFQUFFLENBQUMsUUFBUTt5QkFDMUU7cUJBQ0osUUFDSzt3QkFDRixxQkFBcUIsRUFBRSxjQUFjO3dCQUNyQyxZQUFZLEVBQUUsbUNBQW1DO3dCQUNqRCxZQUFZLEVBQUUseUJBQXlCO3dCQUN2QyxTQUFTLEVBQUUsWUFBWTt3QkFDdkIsVUFBVSxFQUNOLDRFQUE0RTtxQkFDbkY7OEJBT00sS0FBSztzQkFEWCxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBJbnB1dCwgVGVtcGxhdGVSZWZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHt0dWlQcm92aWRlfSBmcm9tICdAdGFpZ2EtdWkvY2RrL3V0aWxzL21pc2NlbGxhbmVvdXMnO1xuaW1wb3J0IHt0dWlBc0RhdGFMaXN0fSBmcm9tICdAdGFpZ2EtdWkvY29yZS9jb21wb25lbnRzL2RhdGEtbGlzdCc7XG5pbXBvcnQgdHlwZSB7VHVpSXRlbXNIYW5kbGVyc30gZnJvbSAnQHRhaWdhLXVpL2tpdC90b2tlbnMnO1xuaW1wb3J0IHtBYnN0cmFjdFR1aU5hdGl2ZVNlbGVjdH0gZnJvbSAnQHRhaWdhLXVpL2xlZ2FjeS9jbGFzc2VzJztcblxuaW1wb3J0IHR5cGUge1R1aVNlbGVjdERpcmVjdGl2ZX0gZnJvbSAnLi4vc2VsZWN0LmRpcmVjdGl2ZSc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnc2VsZWN0W3R1aVNlbGVjdF06bm90KFtsYWJlbHNdKTpub3QoW211bHRpcGxlXSknLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9uYXRpdmUtc2VsZWN0LnRlbXBsYXRlLmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL25hdGl2ZS1zZWxlY3Quc3R5bGUubGVzcyddLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICAgIHByb3ZpZGVyczogW1xuICAgICAgICB0dWlBc0RhdGFMaXN0KFR1aU5hdGl2ZVNlbGVjdENvbXBvbmVudCksXG4gICAgICAgIHR1aVByb3ZpZGUoQWJzdHJhY3RUdWlOYXRpdmVTZWxlY3QsIFR1aU5hdGl2ZVNlbGVjdENvbXBvbmVudCksXG4gICAgICAgIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IFRlbXBsYXRlUmVmLFxuICAgICAgICAgICAgZGVwczogW1R1aU5hdGl2ZVNlbGVjdENvbXBvbmVudF0sXG4gICAgICAgICAgICB1c2VGYWN0b3J5OiAoe2RhdGFsaXN0fTogVHVpTmF0aXZlU2VsZWN0Q29tcG9uZW50PHVua25vd24+KSA9PiBkYXRhbGlzdCxcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIGhvc3Q6IHtcbiAgICAgICAgJ1thdHRyLmFyaWEtaW52YWxpZF0nOiAnaG9zdC5pbnZhbGlkJyxcbiAgICAgICAgJ1tkaXNhYmxlZF0nOiAnaG9zdC5kaXNhYmxlZCB8fCBjb250cm9sLnJlYWRPbmx5JyxcbiAgICAgICAgJ1t0YWJJbmRleF0nOiAnaG9zdC5mb2N1c2FibGUgPyAwIDogLTEnLFxuICAgICAgICAnW3ZhbHVlXSc6ICdob3N0LnZhbHVlJyxcbiAgICAgICAgJyhjaGFuZ2UpJzpcbiAgICAgICAgICAgICdvblZhbHVlQ2hhbmdlKCRldmVudC50YXJnZXQub3B0aW9ucy5zZWxlY3RlZEluZGV4IC0gKGVtcHR5T3B0aW9uID8gMSA6IDApKScsXG4gICAgfSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpTmF0aXZlU2VsZWN0Q29tcG9uZW50PFQ+IGV4dGVuZHMgQWJzdHJhY3RUdWlOYXRpdmVTZWxlY3Q8XG4gICAgVHVpU2VsZWN0RGlyZWN0aXZlLFxuICAgIFRcbj4ge1xuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGl0ZW1zOiByZWFkb25seSBUW10gfCBudWxsID0gW107XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IHN0cmluZ2lmeSgpOiBUdWlJdGVtc0hhbmRsZXJzPFQ+WydzdHJpbmdpZnknXSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhvc3Quc3RyaW5naWZ5O1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBzZWxlY3RlZChvcHRpb246IFQpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udHJvbC52YWx1ZSA9PT0gb3B0aW9uO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBvblZhbHVlQ2hhbmdlKGluZGV4OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5ob3N0Lm9uVmFsdWVDaGFuZ2UodGhpcy5pdGVtcz8uW2luZGV4XSB8fCBudWxsKTtcbiAgICB9XG59XG4iLCI8dHVpLWRhdGEtbGlzdC13cmFwcGVyXG4gICAgKnR1aURhdGFMaXN0XG4gICAgW2Rpc2FibGVkSXRlbUhhbmRsZXJdPVwiZGlzYWJsZWRJdGVtSGFuZGxlciB8fCBpdGVtc0hhbmRsZXJzLmRpc2FibGVkSXRlbUhhbmRsZXJcIlxuICAgIFtpdGVtQ29udGVudF09XCJzdHJpbmdpZnkgfCB0dWlTdHJpbmdpZnlDb250ZW50XCJcbiAgICBbaXRlbXNdPVwiaXRlbXNcIlxuLz5cbjxuZy1jb250YWluZXIgKm5nSWY9XCJjb250cm9sLmNvbnRyb2w/LnZhbHVlQ2hhbmdlcyB8IGFzeW5jXCIgLz5cbjxvcHRpb25cbiAgICAqbmdJZj1cImVtcHR5T3B0aW9uXCJcbiAgICBkaXNhYmxlZFxuICAgIHNlbGVjdGVkXG4gICAgdmFsdWU9XCJcIlxuPlxuICAgIHt7IHBsYWNlaG9sZGVyIH19XG48L29wdGlvbj5cbjxvcHRpb25cbiAgICAqbmdGb3I9XCJsZXQgb3B0aW9uIG9mIGl0ZW1zOyBsZXQgaW5kZXggPSBpbmRleFwiXG4gICAgW2Rpc2FibGVkXT1cImRpc2FibGVkSXRlbUhhbmRsZXIgPyBkaXNhYmxlZEl0ZW1IYW5kbGVyKG9wdGlvbikgOiBpdGVtc0hhbmRsZXJzLmRpc2FibGVkSXRlbUhhbmRsZXIob3B0aW9uKVwiXG4gICAgW3NlbGVjdGVkXT1cInNlbGVjdGVkKG9wdGlvbilcIlxuICAgIFt2YWx1ZV09XCJzdHJpbmdpZnkob3B0aW9uKVwiXG4+XG4gICAge3sgc3RyaW5naWZ5KG9wdGlvbikgfX1cbjwvb3B0aW9uPlxuIl19