import { ChangeDetectionStrategy, Component, Input, TemplateRef } from '@angular/core';
import { tuiProvide } from '@taiga-ui/cdk/utils/miscellaneous';
import { tuiAsDataList } from '@taiga-ui/core/components/data-list';
import { AbstractTuiNativeSelect } from '@taiga-ui/legacy/classes';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@taiga-ui/core/components/data-list";
import * as i3 from "@taiga-ui/kit/components/data-list-wrapper";
import * as i4 from "@taiga-ui/kit/pipes/stringify-content";
class TuiNativeSelectGroupComponent extends AbstractTuiNativeSelect {
    constructor() {
        super(...arguments);
        this.items = [];
        this.labels = [];
    }
    get stringify() {
        return this.host.stringify;
    }
    selected(option) {
        return this.control.value === option;
    }
    onValueChange(index) {
        const flatItems = this.items?.reduce((acc, val) => acc.concat(val), []);
        this.host.onValueChange(flatItems?.[index] || null);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiNativeSelectGroupComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiNativeSelectGroupComponent, selector: "select[tuiSelect][labels]:not([multiple])", inputs: { items: "items", labels: "labels" }, host: { listeners: { "change": "onValueChange($event.target.options.selectedIndex - (emptyOption ? 1 : 0))" }, properties: { "attr.aria-invalid": "host.invalid", "disabled": "host.disabled || control.readOnly", "tabIndex": "host.focusable ? 0 : -1", "value": "host.value" } }, providers: [
            tuiAsDataList(TuiNativeSelectGroupComponent),
            tuiProvide(AbstractTuiNativeSelect, TuiNativeSelectGroupComponent),
            {
                provide: TemplateRef,
                deps: [TuiNativeSelectGroupComponent],
                useFactory: ({ datalist }) => datalist,
            },
        ], usesInheritance: true, ngImport: i0, template: "<tui-data-list-wrapper\n    *tuiDataList\n    [disabledItemHandler]=\"disabledItemHandler || itemsHandlers.disabledItemHandler\"\n    [itemContent]=\"stringify | tuiStringifyContent\"\n    [items]=\"items\"\n    [labels]=\"labels\"\n/>\n<ng-container *ngIf=\"control.control?.valueChanges | async\" />\n<option\n    *ngIf=\"emptyOption\"\n    disabled\n    selected\n    value=\"\"\n>\n    {{ placeholder }}\n</option>\n<optgroup\n    *ngFor=\"let group of items; let index = index\"\n    [label]=\"labels[index]\"\n>\n    <option\n        *ngFor=\"let option of group; let i = index\"\n        [disabled]=\"disabledItemHandler ? disabledItemHandler(option) : itemsHandlers.disabledItemHandler(option)\"\n        [selected]=\"selected(option)\"\n        [value]=\"stringify(option)\"\n    >\n        {{ stringify(option) }}\n    </option>\n</optgroup>\n", styles: [":host{position:absolute;top:0;left:0;inline-size:100%;block-size:100%;opacity:0}\n"], dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.TuiDataListDirective, selector: "ng-template[tuiDataList]" }, { kind: "component", type: i3.TuiDataListGroupWrapperComponent, selector: "tui-data-list-wrapper[labels]", inputs: ["labels"] }, { kind: "pipe", type: i1.AsyncPipe, name: "async" }, { kind: "pipe", type: i4.TuiStringifyContentPipe, name: "tuiStringifyContent" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { TuiNativeSelectGroupComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiNativeSelectGroupComponent, decorators: [{
            type: Component,
            args: [{ selector: 'select[tuiSelect][labels]:not([multiple])', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        tuiAsDataList(TuiNativeSelectGroupComponent),
                        tuiProvide(AbstractTuiNativeSelect, TuiNativeSelectGroupComponent),
                        {
                            provide: TemplateRef,
                            deps: [TuiNativeSelectGroupComponent],
                            useFactory: ({ datalist }) => datalist,
                        },
                    ], host: {
                        '[attr.aria-invalid]': 'host.invalid',
                        '[disabled]': 'host.disabled || control.readOnly',
                        '[tabIndex]': 'host.focusable ? 0 : -1',
                        '[value]': 'host.value',
                        '(change)': 'onValueChange($event.target.options.selectedIndex - (emptyOption ? 1 : 0))',
                    }, template: "<tui-data-list-wrapper\n    *tuiDataList\n    [disabledItemHandler]=\"disabledItemHandler || itemsHandlers.disabledItemHandler\"\n    [itemContent]=\"stringify | tuiStringifyContent\"\n    [items]=\"items\"\n    [labels]=\"labels\"\n/>\n<ng-container *ngIf=\"control.control?.valueChanges | async\" />\n<option\n    *ngIf=\"emptyOption\"\n    disabled\n    selected\n    value=\"\"\n>\n    {{ placeholder }}\n</option>\n<optgroup\n    *ngFor=\"let group of items; let index = index\"\n    [label]=\"labels[index]\"\n>\n    <option\n        *ngFor=\"let option of group; let i = index\"\n        [disabled]=\"disabledItemHandler ? disabledItemHandler(option) : itemsHandlers.disabledItemHandler(option)\"\n        [selected]=\"selected(option)\"\n        [value]=\"stringify(option)\"\n    >\n        {{ stringify(option) }}\n    </option>\n</optgroup>\n", styles: [":host{position:absolute;top:0;left:0;inline-size:100%;block-size:100%;opacity:0}\n"] }]
        }], propDecorators: { items: [{
                type: Input
            }], labels: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF0aXZlLXNlbGVjdC1ncm91cC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9sZWdhY3kvY29tcG9uZW50cy9zZWxlY3QvbmF0aXZlLXNlbGVjdC9uYXRpdmUtc2VsZWN0LWdyb3VwLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2xlZ2FjeS9jb21wb25lbnRzL3NlbGVjdC9uYXRpdmUtc2VsZWN0L25hdGl2ZS1zZWxlY3QtZ3JvdXAudGVtcGxhdGUuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDckYsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLG1DQUFtQyxDQUFDO0FBQzdELE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxxQ0FBcUMsQ0FBQztBQUVsRSxPQUFPLEVBQUMsdUJBQXVCLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQzs7Ozs7O0FBSWpFLE1BdUJhLDZCQUFpQyxTQUFRLHVCQUdyRDtJQTFCRDs7UUE0QlcsVUFBSyxHQUEwQixFQUFFLENBQUM7UUFHbEMsV0FBTSxHQUFzQixFQUFFLENBQUM7S0FlekM7SUFiRyxJQUFjLFNBQVM7UUFDbkIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUMvQixDQUFDO0lBRVMsUUFBUSxDQUFDLE1BQVM7UUFDeEIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssS0FBSyxNQUFNLENBQUM7SUFDekMsQ0FBQztJQUVTLGFBQWEsQ0FBQyxLQUFhO1FBQ2pDLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUV4RSxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQztJQUN4RCxDQUFDOytHQXRCUSw2QkFBNkI7bUdBQTdCLDZCQUE2Qix1WUFsQjNCO1lBQ1AsYUFBYSxDQUFDLDZCQUE2QixDQUFDO1lBQzVDLFVBQVUsQ0FBQyx1QkFBdUIsRUFBRSw2QkFBNkIsQ0FBQztZQUNsRTtnQkFDSSxPQUFPLEVBQUUsV0FBVztnQkFDcEIsSUFBSSxFQUFFLENBQUMsNkJBQTZCLENBQUM7Z0JBQ3JDLFVBQVUsRUFBRSxDQUFDLEVBQUMsUUFBUSxFQUF5QyxFQUFFLEVBQUUsQ0FBQyxRQUFRO2FBQy9FO1NBQ0osaURDckJMLHUxQkE2QkE7O1NERWEsNkJBQTZCOzRGQUE3Qiw2QkFBNkI7a0JBdkJ6QyxTQUFTOytCQUNJLDJDQUEyQyxtQkFHcEMsdUJBQXVCLENBQUMsTUFBTSxhQUNwQzt3QkFDUCxhQUFhLCtCQUErQjt3QkFDNUMsVUFBVSxDQUFDLHVCQUF1QixnQ0FBZ0M7d0JBQ2xFOzRCQUNJLE9BQU8sRUFBRSxXQUFXOzRCQUNwQixJQUFJLEVBQUUsK0JBQStCOzRCQUNyQyxVQUFVLEVBQUUsQ0FBQyxFQUFDLFFBQVEsRUFBeUMsRUFBRSxFQUFFLENBQUMsUUFBUTt5QkFDL0U7cUJBQ0osUUFDSzt3QkFDRixxQkFBcUIsRUFBRSxjQUFjO3dCQUNyQyxZQUFZLEVBQUUsbUNBQW1DO3dCQUNqRCxZQUFZLEVBQUUseUJBQXlCO3dCQUN2QyxTQUFTLEVBQUUsWUFBWTt3QkFDdkIsVUFBVSxFQUNOLDRFQUE0RTtxQkFDbkY7OEJBT00sS0FBSztzQkFEWCxLQUFLO2dCQUlDLE1BQU07c0JBRFosS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgSW5wdXQsIFRlbXBsYXRlUmVmfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7dHVpUHJvdmlkZX0gZnJvbSAnQHRhaWdhLXVpL2Nkay91dGlscy9taXNjZWxsYW5lb3VzJztcbmltcG9ydCB7dHVpQXNEYXRhTGlzdH0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvY29tcG9uZW50cy9kYXRhLWxpc3QnO1xuaW1wb3J0IHR5cGUge1R1aUl0ZW1zSGFuZGxlcnN9IGZyb20gJ0B0YWlnYS11aS9raXQvdG9rZW5zJztcbmltcG9ydCB7QWJzdHJhY3RUdWlOYXRpdmVTZWxlY3R9IGZyb20gJ0B0YWlnYS11aS9sZWdhY3kvY2xhc3Nlcyc7XG5cbmltcG9ydCB0eXBlIHtUdWlTZWxlY3REaXJlY3RpdmV9IGZyb20gJy4uL3NlbGVjdC5kaXJlY3RpdmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ3NlbGVjdFt0dWlTZWxlY3RdW2xhYmVsc106bm90KFttdWx0aXBsZV0pJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vbmF0aXZlLXNlbGVjdC1ncm91cC50ZW1wbGF0ZS5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9uYXRpdmUtc2VsZWN0LnN0eWxlLmxlc3MnXSxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgdHVpQXNEYXRhTGlzdChUdWlOYXRpdmVTZWxlY3RHcm91cENvbXBvbmVudCksXG4gICAgICAgIHR1aVByb3ZpZGUoQWJzdHJhY3RUdWlOYXRpdmVTZWxlY3QsIFR1aU5hdGl2ZVNlbGVjdEdyb3VwQ29tcG9uZW50KSxcbiAgICAgICAge1xuICAgICAgICAgICAgcHJvdmlkZTogVGVtcGxhdGVSZWYsXG4gICAgICAgICAgICBkZXBzOiBbVHVpTmF0aXZlU2VsZWN0R3JvdXBDb21wb25lbnRdLFxuICAgICAgICAgICAgdXNlRmFjdG9yeTogKHtkYXRhbGlzdH06IFR1aU5hdGl2ZVNlbGVjdEdyb3VwQ29tcG9uZW50PHVua25vd24+KSA9PiBkYXRhbGlzdCxcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIGhvc3Q6IHtcbiAgICAgICAgJ1thdHRyLmFyaWEtaW52YWxpZF0nOiAnaG9zdC5pbnZhbGlkJyxcbiAgICAgICAgJ1tkaXNhYmxlZF0nOiAnaG9zdC5kaXNhYmxlZCB8fCBjb250cm9sLnJlYWRPbmx5JyxcbiAgICAgICAgJ1t0YWJJbmRleF0nOiAnaG9zdC5mb2N1c2FibGUgPyAwIDogLTEnLFxuICAgICAgICAnW3ZhbHVlXSc6ICdob3N0LnZhbHVlJyxcbiAgICAgICAgJyhjaGFuZ2UpJzpcbiAgICAgICAgICAgICdvblZhbHVlQ2hhbmdlKCRldmVudC50YXJnZXQub3B0aW9ucy5zZWxlY3RlZEluZGV4IC0gKGVtcHR5T3B0aW9uID8gMSA6IDApKScsXG4gICAgfSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpTmF0aXZlU2VsZWN0R3JvdXBDb21wb25lbnQ8VD4gZXh0ZW5kcyBBYnN0cmFjdFR1aU5hdGl2ZVNlbGVjdDxcbiAgICBUdWlTZWxlY3REaXJlY3RpdmUsXG4gICAgVFxuPiB7XG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgaXRlbXM6IHJlYWRvbmx5IFRbXVtdIHwgbnVsbCA9IFtdO1xuXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgbGFiZWxzOiByZWFkb25seSBzdHJpbmdbXSA9IFtdO1xuXG4gICAgcHJvdGVjdGVkIGdldCBzdHJpbmdpZnkoKTogVHVpSXRlbXNIYW5kbGVyczxUPlsnc3RyaW5naWZ5J10ge1xuICAgICAgICByZXR1cm4gdGhpcy5ob3N0LnN0cmluZ2lmeTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgc2VsZWN0ZWQob3B0aW9uOiBUKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRyb2wudmFsdWUgPT09IG9wdGlvbjtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgb25WYWx1ZUNoYW5nZShpbmRleDogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGZsYXRJdGVtcyA9IHRoaXMuaXRlbXM/LnJlZHVjZSgoYWNjLCB2YWwpID0+IGFjYy5jb25jYXQodmFsKSwgW10pO1xuXG4gICAgICAgIHRoaXMuaG9zdC5vblZhbHVlQ2hhbmdlKGZsYXRJdGVtcz8uW2luZGV4XSB8fCBudWxsKTtcbiAgICB9XG59XG4iLCI8dHVpLWRhdGEtbGlzdC13cmFwcGVyXG4gICAgKnR1aURhdGFMaXN0XG4gICAgW2Rpc2FibGVkSXRlbUhhbmRsZXJdPVwiZGlzYWJsZWRJdGVtSGFuZGxlciB8fCBpdGVtc0hhbmRsZXJzLmRpc2FibGVkSXRlbUhhbmRsZXJcIlxuICAgIFtpdGVtQ29udGVudF09XCJzdHJpbmdpZnkgfCB0dWlTdHJpbmdpZnlDb250ZW50XCJcbiAgICBbaXRlbXNdPVwiaXRlbXNcIlxuICAgIFtsYWJlbHNdPVwibGFiZWxzXCJcbi8+XG48bmctY29udGFpbmVyICpuZ0lmPVwiY29udHJvbC5jb250cm9sPy52YWx1ZUNoYW5nZXMgfCBhc3luY1wiIC8+XG48b3B0aW9uXG4gICAgKm5nSWY9XCJlbXB0eU9wdGlvblwiXG4gICAgZGlzYWJsZWRcbiAgICBzZWxlY3RlZFxuICAgIHZhbHVlPVwiXCJcbj5cbiAgICB7eyBwbGFjZWhvbGRlciB9fVxuPC9vcHRpb24+XG48b3B0Z3JvdXBcbiAgICAqbmdGb3I9XCJsZXQgZ3JvdXAgb2YgaXRlbXM7IGxldCBpbmRleCA9IGluZGV4XCJcbiAgICBbbGFiZWxdPVwibGFiZWxzW2luZGV4XVwiXG4+XG4gICAgPG9wdGlvblxuICAgICAgICAqbmdGb3I9XCJsZXQgb3B0aW9uIG9mIGdyb3VwOyBsZXQgaSA9IGluZGV4XCJcbiAgICAgICAgW2Rpc2FibGVkXT1cImRpc2FibGVkSXRlbUhhbmRsZXIgPyBkaXNhYmxlZEl0ZW1IYW5kbGVyKG9wdGlvbikgOiBpdGVtc0hhbmRsZXJzLmRpc2FibGVkSXRlbUhhbmRsZXIob3B0aW9uKVwiXG4gICAgICAgIFtzZWxlY3RlZF09XCJzZWxlY3RlZChvcHRpb24pXCJcbiAgICAgICAgW3ZhbHVlXT1cInN0cmluZ2lmeShvcHRpb24pXCJcbiAgICA+XG4gICAgICAgIHt7IHN0cmluZ2lmeShvcHRpb24pIH19XG4gICAgPC9vcHRpb24+XG48L29wdGdyb3VwPlxuIl19