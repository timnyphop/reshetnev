import { ChangeDetectionStrategy, Component, ContentChild, inject, Input, TemplateRef, ViewChild, } from '@angular/core';
import { TUI_IS_MOBILE } from '@taiga-ui/cdk/tokens';
import { tuiIsNativeFocused } from '@taiga-ui/cdk/utils/focus';
import { tuiAsDataListHost, tuiAsOptionContent, TuiDataListDirective, } from '@taiga-ui/core/components/data-list';
import { TuiDropdownOpen } from '@taiga-ui/core/directives/dropdown';
import { TUI_ITEMS_HANDLERS } from '@taiga-ui/kit/tokens';
import { AbstractTuiNativeSelect, AbstractTuiNullableControl, tuiAsControl, } from '@taiga-ui/legacy/classes';
import { TUI_ARROW_MODE } from '@taiga-ui/legacy/components/arrow';
import { TuiPrimitiveTextfieldComponent } from '@taiga-ui/legacy/components/primitive-textfield';
import { TUI_SELECT_OPTION } from '@taiga-ui/legacy/components/select-option';
import { TUI_TEXTFIELD_CLEANER, TUI_TEXTFIELD_SIZE } from '@taiga-ui/legacy/directives';
import { tuiAsFocusableItemAccessor } from '@taiga-ui/legacy/tokens';
import { FIXED_DROPDOWN_CONTROLLER_PROVIDER } from '@taiga-ui/legacy/utils';
import { TUI_SELECT_OPTIONS } from './select.options';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@taiga-ui/polymorpheus";
import * as i3 from "@taiga-ui/legacy/components/primitive-textfield";
import * as i4 from "@taiga-ui/legacy/directives";
import * as i5 from "@taiga-ui/core/directives/dropdown";
class TuiSelectComponent extends AbstractTuiNullableControl {
    constructor() {
        super(...arguments);
        this.itemsHandlers = inject(TUI_ITEMS_HANDLERS);
        this.textfieldCleaner = inject(TUI_TEXTFIELD_CLEANER);
        this.textfieldSize = inject(TUI_TEXTFIELD_SIZE);
        this.arrowMode = inject(TUI_ARROW_MODE);
        this.options = inject(TUI_SELECT_OPTIONS);
        this.isMobile = inject(TUI_IS_MOBILE);
        this.open = false;
        this.stringify = this.itemsHandlers.stringify;
        this.identityMatcher = this.itemsHandlers.identityMatcher;
        this.valueContent = this.options.valueContent;
    }
    get size() {
        return this.textfieldSize.size;
    }
    get nativeFocusableElement() {
        return this.textfield?.nativeFocusableElement ?? null;
    }
    get focused() {
        return (tuiIsNativeFocused(this.nativeFocusableElement) ||
            !!this.dropdown?.tuiDropdownOpen);
    }
    get computedValue() {
        return this.value === null ? '' : this.stringify(this.value) || ' ';
    }
    onValueChange(value) {
        this.value = value || null;
    }
    handleOption(option) {
        this.focusInput();
        this.value = option;
        this.open = false;
    }
    get arrow() {
        return !this.interactive ? this.arrowMode.disabled : this.arrowMode.interactive;
    }
    get nativeDropdownMode() {
        return !!this.nativeSelect && this.isMobile;
    }
    get computedContent() {
        return this.valueContent || this.computedValue;
    }
    onActiveZone(active) {
        this.updateFocused(active);
    }
    onKeyDownDelete() {
        if (this.textfieldCleaner.cleaner) {
            this.value = null;
        }
    }
    focusInput(preventScroll = false) {
        if (this.nativeFocusableElement) {
            this.nativeFocusableElement.focus({ preventScroll });
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSelectComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiSelectComponent, selector: "tui-select", inputs: { stringify: "stringify", identityMatcher: "identityMatcher", valueContent: "valueContent" }, host: { properties: { "attr.data-size": "size" } }, providers: [
            tuiAsFocusableItemAccessor(TuiSelectComponent),
            tuiAsControl(TuiSelectComponent),
            tuiAsDataListHost(TuiSelectComponent),
            tuiAsOptionContent(TUI_SELECT_OPTION),
        ], queries: [{ propertyName: "nativeSelect", first: true, predicate: AbstractTuiNativeSelect, descendants: true, static: true }, { propertyName: "datalist", first: true, predicate: TuiDataListDirective, descendants: true, read: TemplateRef }], viewQueries: [{ propertyName: "textfield", first: true, predicate: TuiPrimitiveTextfieldComponent, descendants: true }, { propertyName: "dropdown", first: true, predicate: TuiDropdownOpen, descendants: true }], usesInheritance: true, ngImport: i0, template: "<div\n    tuiDropdownOpenMonitor\n    class=\"t-hosted\"\n    [tuiDropdown]=\"datalist || ''\"\n    [tuiDropdownEnabled]=\"interactive && !nativeDropdownMode\"\n    [(tuiDropdownOpen)]=\"open\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n>\n    <tui-primitive-textfield\n        automation-id=\"tui-select__textfield\"\n        class=\"t-textfield\"\n        [disabled]=\"computedDisabled\"\n        [editable]=\"false\"\n        [focusable]=\"computedFocusable\"\n        [invalid]=\"computedInvalid\"\n        [nativeId]=\"nativeId\"\n        [pseudoActive]=\"pseudoActive\"\n        [pseudoFocus]=\"computedFocused\"\n        [pseudoHover]=\"pseudoHover\"\n        [readOnly]=\"readOnly\"\n        [tuiTextfieldIcon]=\"arrow ? icon : ''\"\n        [value]=\"computedValue\"\n        (keydown.backspace.prevent)=\"onKeyDownDelete()\"\n        (keydown.delete.prevent)=\"onKeyDownDelete()\"\n        (valueChange)=\"onValueChange($any($event))\"\n    >\n        <ng-content />\n        <ng-content\n            ngProjectAs=\"input\"\n            select=\"input\"\n        />\n\n        <ng-template #select>\n            <ng-content\n                *ngIf=\"isMobile\"\n                select=\"select\"\n            />\n        </ng-template>\n\n        <ng-container\n            *ngTemplateOutlet=\"select\"\n            ngProjectAs=\"select\"\n        />\n\n        <div\n            *ngIf=\"value !== null\"\n            automation-id=\"tui-select__value\"\n            ngProjectAs=\"tuiContent\"\n            class=\"t-value\"\n        >\n            <div\n                *polymorpheusOutlet=\"computedContent as text; context: {$implicit: value, active: computedFocused}\"\n                class=\"t-primitive-value\"\n                [textContent]=\"text\"\n            ></div>\n        </div>\n    </tui-primitive-textfield>\n\n    <ng-template #icon>\n        <div\n            appearance=\"icon\"\n            tuiWrapper\n            class=\"t-icon\"\n        >\n            <ng-container *polymorpheusOutlet=\"arrow\" />\n        </div>\n    </ng-template>\n</div>\n", styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:start}:host:not(._readonly) ::ng-deep input:not(:disabled){cursor:pointer}:host._readonly ::ng-deep input{cursor:default}.t-hosted{display:block;border-radius:inherit}.t-textfield{border-radius:inherit;text-align:inherit}.t-value{display:flex;inline-size:100%;align-items:center}.t-primitive-value{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}\n"], dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i2.PolymorpheusOutlet, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { kind: "component", type: i3.TuiPrimitiveTextfieldComponent, selector: "tui-primitive-textfield", inputs: ["editable", "iconCleaner", "readOnly", "invalid", "disabled", "value"], outputs: ["valueChange"] }, { kind: "directive", type: i3.TuiPrimitiveTextfieldDirective, selector: "tui-primitive-textfield" }, { kind: "directive", type: i4.TuiWrapperDirective, selector: "[tuiWrapper]", inputs: ["disabled", "readOnly", "hover", "active", "focus", "invalid", "appearance"] }, { kind: "directive", type: i4.TuiTextfieldIconDirective, selector: "[tuiTextfieldIcon]", inputs: ["tuiTextfieldIcon"] }, { kind: "directive", type: i4.TuiLegacyDropdownOpenMonitorDirective, selector: "[tuiDropdownOpenMonitor]" }, { kind: "directive", type: i5.TuiDropdownDirective, selector: "[tuiDropdown]:not(ng-container):not(ng-template)", inputs: ["tuiDropdown"], exportAs: ["tuiDropdown"] }, { kind: "directive", type: i5.TuiDropdownOpen, selector: "[tuiDropdown][tuiDropdownOpen],[tuiDropdown][tuiDropdownOpenChange]", inputs: ["tuiDropdownEnabled", "tuiDropdownOpen"], outputs: ["tuiDropdownOpenChange"] }], viewProviders: [FIXED_DROPDOWN_CONTROLLER_PROVIDER], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { TuiSelectComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSelectComponent, decorators: [{
            type: Component,
            args: [{ standalone: false, selector: 'tui-select', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        tuiAsFocusableItemAccessor(TuiSelectComponent),
                        tuiAsControl(TuiSelectComponent),
                        tuiAsDataListHost(TuiSelectComponent),
                        tuiAsOptionContent(TUI_SELECT_OPTION),
                    ], viewProviders: [FIXED_DROPDOWN_CONTROLLER_PROVIDER], host: {
                        '[attr.data-size]': 'size',
                    }, template: "<div\n    tuiDropdownOpenMonitor\n    class=\"t-hosted\"\n    [tuiDropdown]=\"datalist || ''\"\n    [tuiDropdownEnabled]=\"interactive && !nativeDropdownMode\"\n    [(tuiDropdownOpen)]=\"open\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n>\n    <tui-primitive-textfield\n        automation-id=\"tui-select__textfield\"\n        class=\"t-textfield\"\n        [disabled]=\"computedDisabled\"\n        [editable]=\"false\"\n        [focusable]=\"computedFocusable\"\n        [invalid]=\"computedInvalid\"\n        [nativeId]=\"nativeId\"\n        [pseudoActive]=\"pseudoActive\"\n        [pseudoFocus]=\"computedFocused\"\n        [pseudoHover]=\"pseudoHover\"\n        [readOnly]=\"readOnly\"\n        [tuiTextfieldIcon]=\"arrow ? icon : ''\"\n        [value]=\"computedValue\"\n        (keydown.backspace.prevent)=\"onKeyDownDelete()\"\n        (keydown.delete.prevent)=\"onKeyDownDelete()\"\n        (valueChange)=\"onValueChange($any($event))\"\n    >\n        <ng-content />\n        <ng-content\n            ngProjectAs=\"input\"\n            select=\"input\"\n        />\n\n        <ng-template #select>\n            <ng-content\n                *ngIf=\"isMobile\"\n                select=\"select\"\n            />\n        </ng-template>\n\n        <ng-container\n            *ngTemplateOutlet=\"select\"\n            ngProjectAs=\"select\"\n        />\n\n        <div\n            *ngIf=\"value !== null\"\n            automation-id=\"tui-select__value\"\n            ngProjectAs=\"tuiContent\"\n            class=\"t-value\"\n        >\n            <div\n                *polymorpheusOutlet=\"computedContent as text; context: {$implicit: value, active: computedFocused}\"\n                class=\"t-primitive-value\"\n                [textContent]=\"text\"\n            ></div>\n        </div>\n    </tui-primitive-textfield>\n\n    <ng-template #icon>\n        <div\n            appearance=\"icon\"\n            tuiWrapper\n            class=\"t-icon\"\n        >\n            <ng-container *polymorpheusOutlet=\"arrow\" />\n        </div>\n    </ng-template>\n</div>\n", styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:start}:host:not(._readonly) ::ng-deep input:not(:disabled){cursor:pointer}:host._readonly ::ng-deep input{cursor:default}.t-hosted{display:block;border-radius:inherit}.t-textfield{border-radius:inherit;text-align:inherit}.t-value{display:flex;inline-size:100%;align-items:center}.t-primitive-value{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}\n"] }]
        }], propDecorators: { textfield: [{
                type: ViewChild,
                args: [TuiPrimitiveTextfieldComponent]
            }], dropdown: [{
                type: ViewChild,
                args: [TuiDropdownOpen]
            }], nativeSelect: [{
                type: ContentChild,
                args: [AbstractTuiNativeSelect, { static: true }]
            }], datalist: [{
                type: ContentChild,
                args: [TuiDataListDirective, { read: TemplateRef }]
            }], stringify: [{
                type: Input
            }], identityMatcher: [{
                type: Input
            }], valueContent: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,