import { ChangeDetectionStrategy, Component, inject, Input, ViewChild, } from '@angular/core';
import { TUI_FALSE_HANDLER } from '@taiga-ui/cdk/constants';
import { tuiDateClamp, TuiDay, TuiMonth } from '@taiga-ui/cdk/date-time';
import { TUI_IS_MOBILE } from '@taiga-ui/cdk/tokens';
import { TuiMonthPipe } from '@taiga-ui/core/pipes/month';
import { TUI_INPUT_DATE_OPTIONS } from '@taiga-ui/kit/tokens';
import { AbstractTuiNullableControl, tuiAsControl } from '@taiga-ui/legacy/classes';
import { TuiPrimitiveTextfieldComponent } from '@taiga-ui/legacy/components/primitive-textfield';
import { TUI_TEXTFIELD_SIZE } from '@taiga-ui/legacy/directives';
import { TUI_MONTH_FORMATTER, TUI_MONTH_FORMATTER_PROVIDER, tuiAsFocusableItemAccessor, } from '@taiga-ui/legacy/tokens';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@taiga-ui/kit/components/calendar-month";
import * as i3 from "@taiga-ui/legacy/components/primitive-textfield";
import * as i4 from "@taiga-ui/legacy/directives";
import * as i5 from "@angular/forms";
import * as i6 from "@taiga-ui/core/directives/dropdown";
import * as i7 from "@taiga-ui/cdk/pipes/mapper";
class TuiInputMonthComponent extends AbstractTuiNullableControl {
    constructor() {
        super(...arguments);
        this.isMobile = inject(TUI_IS_MOBILE);
        this.options = inject(TUI_INPUT_DATE_OPTIONS);
        this.textfieldSize = inject(TUI_TEXTFIELD_SIZE);
        this.formatter = inject(TUI_MONTH_FORMATTER);
        this.min = this.options.min;
        this.max = this.options.max;
        this.disabledItemHandler = TUI_FALSE_HANDLER;
        this.defaultActiveYear = TuiDay.currentLocal();
        this.open = false;
    }
    get nativeFocusableElement() {
        return this.textfield?.nativeFocusableElement || null;
    }
    get focused() {
        return !!this.textfield?.focused;
    }
    onValueChange(value) {
        if (value) {
            return;
        }
        this.value = null;
        this.onOpenChange(!this.nativePicker);
    }
    onMonthClick(month) {
        this.value = month;
        this.close();
    }
    setDisabledState() {
        super.setDisabledState();
        this.close();
    }
    get size() {
        return this.textfieldSize.size;
    }
    get computedMin() {
        return this.min ?? this.options.min;
    }
    get computedMax() {
        return this.max ?? this.options.max;
    }
    get computedDefaultActiveYear() {
        return (this.activeYear ||
            this.value ||
            tuiDateClamp(this.defaultActiveYear, this.computedMin, this.computedMax));
    }
    get calendarIcon() {
        return this.options.icon;
    }
    get nativePicker() {
        return this.isMobile && this.options.nativePicker;
    }
    get nativePickerMin() {
        return this.computedMin.toJSON();
    }
    get nativePickerMax() {
        return this.computedMax.toJSON();
    }
    get nativeValue() {
        return this.value?.toJSON() || '';
    }
    onNativeChange(value) {
        const [year = 0, month = 0] = value.split('-').map(Number);
        this.value = value
            ? tuiDateClamp(new TuiMonth(year, month - 1), this.computedMin, this.computedMax)
            : null;
    }
    onFocused(focused) {
        this.updateFocused(focused);
    }
    onOpenChange(open) {
        if (open && this.value) {
            this.activeYear = this.value;
        }
        this.open = open;
    }
    close() {
        this.open = false;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputMonthComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiInputMonthComponent, selector: "tui-input-month", inputs: { min: "min", max: "max", disabledItemHandler: "disabledItemHandler", defaultActiveYear: "defaultActiveYear" }, host: { properties: { "attr.data-size": "size" } }, providers: [
            tuiAsFocusableItemAccessor(TuiInputMonthComponent),
            tuiAsControl(TuiInputMonthComponent),
            TUI_MONTH_FORMATTER_PROVIDER,
            TuiMonthPipe,
        ], viewQueries: [{ propertyName: "textfield", first: true, predicate: TuiPrimitiveTextfieldComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<div\n    tuiDropdownOpenMonitor\n    class=\"t-hosted\"\n    [tuiDropdown]=\"dropdown\"\n    [tuiDropdownEnabled]=\"interactive && !nativePicker\"\n    [tuiDropdownOpen]=\"open && interactive\"\n    (tuiDropdownOpenChange)=\"onOpenChange($event)\"\n>\n    <tui-primitive-textfield\n        class=\"t-textfield\"\n        [disabled]=\"computedDisabled\"\n        [editable]=\"false\"\n        [invalid]=\"computedInvalid\"\n        [nativeId]=\"nativeId\"\n        [pseudoFocus]=\"pseudoFocus\"\n        [pseudoHover]=\"pseudoHover\"\n        [readOnly]=\"readOnly\"\n        [tuiTextfieldIcon]=\"calendarIcon\"\n        [value]=\"(value | tuiMapper: formatter | async) || ''\"\n        (focusedChange)=\"onFocused($event)\"\n        (valueChange)=\"onValueChange($event)\"\n    >\n        <ng-content />\n        <ng-content\n            ngProjectAs=\"input\"\n            select=\"input\"\n        />\n        <input\n            *ngIf=\"nativePicker\"\n            type=\"month\"\n            class=\"t-mobile\"\n            [max]=\"nativePickerMax\"\n            [min]=\"nativePickerMin\"\n            [ngModel]=\"nativeValue\"\n            [ngModelOptions]=\"{standalone: true}\"\n            (click.stop.silent)=\"(0)\"\n            (mousedown.stop.silent)=\"(0)\"\n            (ngModelChange)=\"onNativeChange($event)\"\n        />\n    </tui-primitive-textfield>\n\n    <ng-template #dropdown>\n        <tui-calendar-month\n            [disabledItemHandler]=\"disabledItemHandler\"\n            [max]=\"computedMax\"\n            [min]=\"computedMin\"\n            [value]=\"value\"\n            [year]=\"computedDefaultActiveYear\"\n            (monthClick)=\"onMonthClick($event)\"\n            (mousedown.prevent.silent)=\"(0)\"\n            (yearChange)=\"activeYear = $event\"\n        />\n    </ng-template>\n</div>\n", styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:start}.t-hosted{display:block;border-radius:inherit}.t-textfield{border-radius:inherit;text-align:inherit}.t-mobile{position:absolute;top:0;left:0;inline-size:100%;block-size:100%;opacity:0;border:0}\n"], dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i2.TuiCalendarMonth, selector: "tui-calendar-month", inputs: ["value", "year", "disabledItemHandler", "minLength", "maxLength", "min", "max"], outputs: ["monthClick", "hoveredItemChange", "yearChange"] }, { kind: "component", type: i3.TuiPrimitiveTextfieldComponent, selector: "tui-primitive-textfield", inputs: ["editable", "iconCleaner", "readOnly", "invalid", "disabled", "value"], outputs: ["valueChange"] }, { kind: "directive", type: i3.TuiPrimitiveTextfieldDirective, selector: "tui-primitive-textfield" }, { kind: "directive", type: i4.TuiTextfieldIconDirective, selector: "[tuiTextfieldIcon]", inputs: ["tuiTextfieldIcon"] }, { kind: "directive", type: i5.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i5.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i4.TuiLegacyDropdownOpenMonitorDirective, selector: "[tuiDropdownOpenMonitor]" }, { kind: "directive", type: i6.TuiDropdownDirective, selector: "[tuiDropdown]:not(ng-container):not(ng-template)", inputs: ["tuiDropdown"], exportAs: ["tuiDropdown"] }, { kind: "directive", type: i6.TuiDropdownOpen, selector: "[tuiDropdown][tuiDropdownOpen],[tuiDropdown][tuiDropdownOpenChange]", inputs: ["tuiDropdownEnabled", "tuiDropdownOpen"], outputs: ["tuiDropdownOpenChange"] }, { kind: "pipe", type: i1.AsyncPipe, name: "async" }, { kind: "pipe", type: i7.TuiMapperPipe, name: "tuiMapper" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { TuiInputMonthComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputMonthComponent, decorators: [{
            type: Component,
            args: [{ standalone: false, selector: 'tui-input-month', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        tuiAsFocusableItemAccessor(TuiInputMonthComponent),
                        tuiAsControl(TuiInputMonthComponent),
                        TUI_MONTH_FORMATTER_PROVIDER,
                        TuiMonthPipe,
                    ], host: {
                        '[attr.data-size]': 'size',
                    }, template: "<div\n    tuiDropdownOpenMonitor\n    class=\"t-hosted\"\n    [tuiDropdown]=\"dropdown\"\n    [tuiDropdownEnabled]=\"interactive && !nativePicker\"\n    [tuiDropdownOpen]=\"open && interactive\"\n    (tuiDropdownOpenChange)=\"onOpenChange($event)\"\n>\n    <tui-primitive-textfield\n        class=\"t-textfield\"\n        [disabled]=\"computedDisabled\"\n        [editable]=\"false\"\n        [invalid]=\"computedInvalid\"\n        [nativeId]=\"nativeId\"\n        [pseudoFocus]=\"pseudoFocus\"\n        [pseudoHover]=\"pseudoHover\"\n        [readOnly]=\"readOnly\"\n        [tuiTextfieldIcon]=\"calendarIcon\"\n        [value]=\"(value | tuiMapper: formatter | async) || ''\"\n        (focusedChange)=\"onFocused($event)\"\n        (valueChange)=\"onValueChange($event)\"\n    >\n        <ng-content />\n        <ng-content\n            ngProjectAs=\"input\"\n            select=\"input\"\n        />\n        <input\n            *ngIf=\"nativePicker\"\n            type=\"month\"\n            class=\"t-mobile\"\n            [max]=\"nativePickerMax\"\n            [min]=\"nativePickerMin\"\n            [ngModel]=\"nativeValue\"\n            [ngModelOptions]=\"{standalone: true}\"\n            (click.stop.silent)=\"(0)\"\n            (mousedown.stop.silent)=\"(0)\"\n            (ngModelChange)=\"onNativeChange($event)\"\n        />\n    </tui-primitive-textfield>\n\n    <ng-template #dropdown>\n        <tui-calendar-month\n            [disabledItemHandler]=\"disabledItemHandler\"\n            [max]=\"computedMax\"\n            [min]=\"computedMin\"\n            [value]=\"value\"\n            [year]=\"computedDefaultActiveYear\"\n            (monthClick)=\"onMonthClick($event)\"\n            (mousedown.prevent.silent)=\"(0)\"\n            (yearChange)=\"activeYear = $event\"\n        />\n    </ng-template>\n</div>\n", styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:start}.t-hosted{display:block;border-radius:inherit}.t-textfield{border-radius:inherit;text-align:inherit}.t-mobile{position:absolute;top:0;left:0;inline-size:100%;block-size:100%;opacity:0;border:0}\n"] }]
        }], propDecorators: { textfield: [{
                type: ViewChild,
                args: [TuiPrimitiveTextfieldComponent]
            }], min: [{
                type: Input
            }], max: [{
                type: Input
            }], disabledItemHandler: [{
                type: Input
            }], defaultActiveYear: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,