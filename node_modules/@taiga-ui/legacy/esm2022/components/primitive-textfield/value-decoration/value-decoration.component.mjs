import { ChangeDetectionStrategy, Component, ElementRef, inject, ViewChild, } from '@angular/core';
import { TUI_FOCUSABLE_ITEM_ACCESSOR, TUI_FONTS_READY } from '@taiga-ui/legacy/tokens';
import { BehaviorSubject, delay, distinctUntilChanged, filter, map, merge } from 'rxjs';
import * as i0 from "@angular/core";
class TuiValueDecorationComponent {
    constructor() {
        this.textfield = inject(TUI_FOCUSABLE_ITEM_ACCESSOR);
        this.fontsReady$ = inject(TUI_FONTS_READY);
        this.prefix$ = new BehaviorSubject('');
        this.pre$ = merge(this.fontsReady$, this.prefix$).pipe(delay(0), filter(() => !!this.pre?.nativeElement.isConnected), map(() => this.pre?.nativeElement.offsetWidth || 0), distinctUntilChanged());
    }
    ngDoCheck() {
        this.prefix$.next(this.prefix);
    }
    get isContextTable() {
        return this.textfield.appearance === 'table';
    }
    get filler() {
        const { focused, placeholder, exampleText, value, textfield } = this;
        if (placeholder && exampleText) {
            return '';
        }
        return focused ? exampleText || textfield.filler.slice(value.length) : '';
    }
    get value() {
        return this.textfield.value;
    }
    get prefix() {
        return this.decorationsVisible ? this.textfield.prefix : '';
    }
    get postfix() {
        return this.decorationsVisible ? this.computedPostfix : '';
    }
    get placeholder() {
        return this.textfield.nativeFocusableElement?.placeholder || '';
    }
    get exampleText() {
        return !this.value && this.focused ? this.placeholder : '';
    }
    get decorationsVisible() {
        return !!this.value || (this.focused && !this.placeholder);
    }
    get focused() {
        return this.textfield.computedFocused && !this.textfield.readOnly;
    }
    get computedPostfix() {
        return this.textfield.postfix && (this.filler || this.value)
            ? ` ${this.textfield.postfix}`
            : this.textfield.postfix;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiValueDecorationComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiValueDecorationComponent, selector: "tui-value-decoration", host: { listeners: { "animationstart": "ngDoCheck()" }, properties: { "class._table": "isContextTable", "class._filler": "filler" } }, viewQueries: [{ propertyName: "pre", first: true, predicate: ["pre"], descendants: true, read: ElementRef, static: true }], ngImport: i0, template: "<span\n    #pre\n    class=\"t-prefix\"\n    [textContent]=\"prefix\"\n></span>\n<span\n    class=\"t-ghost\"\n    [textContent]=\"value\"\n></span>\n<span\n    class=\"t-filler\"\n    [textContent]=\"filler\"\n></span>\n<span\n    class=\"t-postfix\"\n    [textContent]=\"postfix\"\n></span>\n", styles: [":host{position:absolute;display:block;inline-size:100%;line-height:var(--tui-height);margin-top:calc(var(--tui-height) / -2);box-sizing:content-box;color:var(--tui-text-tertiary);animation:tuiPresent 1s;white-space:nowrap}:host._table{position:static;margin-top:0}:host._filler{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}:host-context(tui-primitive-textfield[data-size=\"m\"]:not(._label-outside)) :host{line-height:calc(var(--tui-height) - .25rem)}.t-ghost{visibility:hidden;white-space:pre;text-overflow:clip}.t-prefix,.t-postfix{white-space:pre;color:var(--tui-text-primary)}.t-filler{max-inline-size:100%;white-space:nowrap}\n"], changeDetection: i0.ChangeDetectionStrategy.Default }); }
}
export { TuiValueDecorationComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiValueDecorationComponent, decorators: [{
            type: Component,
            args: [{ selector: 'tui-value-decoration', changeDetection: ChangeDetectionStrategy.Default, host: {
                        '[class._table]': 'isContextTable',
                        '[class._filler]': 'filler',
                        '(animationstart)': 'ngDoCheck()',
                    }, template: "<span\n    #pre\n    class=\"t-prefix\"\n    [textContent]=\"prefix\"\n></span>\n<span\n    class=\"t-ghost\"\n    [textContent]=\"value\"\n></span>\n<span\n    class=\"t-filler\"\n    [textContent]=\"filler\"\n></span>\n<span\n    class=\"t-postfix\"\n    [textContent]=\"postfix\"\n></span>\n", styles: [":host{position:absolute;display:block;inline-size:100%;line-height:var(--tui-height);margin-top:calc(var(--tui-height) / -2);box-sizing:content-box;color:var(--tui-text-tertiary);animation:tuiPresent 1s;white-space:nowrap}:host._table{position:static;margin-top:0}:host._filler{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}:host-context(tui-primitive-textfield[data-size=\"m\"]:not(._label-outside)) :host{line-height:calc(var(--tui-height) - .25rem)}.t-ghost{visibility:hidden;white-space:pre;text-overflow:clip}.t-prefix,.t-postfix{white-space:pre;color:var(--tui-text-primary)}.t-filler{max-inline-size:100%;white-space:nowrap}\n"] }]
        }], propDecorators: { pre: [{
                type: ViewChild,
                args: ['pre', { read: ElementRef, static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,