import { tuiIsString } from '@taiga-ui/cdk/utils/miscellaneous';
function makeRandomSalt() {
    return Math.floor(Math.random() * Date.now());
}
function extractLinearGradientIdsFromSvg(svg) {
    const ids = (svg.match(/url\(("?)('*)#(.*?)('*)\)/g) ?? []).map((url) => url.slice(4, url.length - 1).replaceAll(/['"#]+/g, ''));
    return Array.from(new Set(ids));
}
/**
 * @deprecated: drop in v5.0 use {@link TuiIcon}
 * https://taiga-ui.dev/components/icon
 *
 * @description:
 * Any ‘linearGradient’ attributes which are defined on the referenced
 * element which are not defined on this element are inherited by this element.
 * If this element has no defined gradient stops, and the referenced element does
 * (possibly due to its own ‘xlink:href’ attribute), then this element inherits
 * the gradient stop from the referenced element. Inheritance can be indirect
 * to an arbitrary level; thus, if the referenced element inherits attribute
 * or gradient stops due to its own ‘xlink:href’ attribute, then the current
 * element can inherit those attributes or gradient stops.
 *
 * Documentation: https://www.w3.org/TR/SVG11/pservers.html
 *
 */
export function tuiSvgLinearGradientProcessor(svg, salt = makeRandomSalt()) {
    if (tuiIsString(svg)) {
        const uniqueIds = extractLinearGradientIdsFromSvg(svg);
        return uniqueIds.reduce((newSvg, previousId) => {
            const newId = `id_${salt}_${previousId}`;
            return newSvg
                .replaceAll(`"${previousId}"`, `"${newId}"`)
                .replaceAll(`'${previousId}'`, `'${newId}'`)
                .replaceAll(`url('#${previousId}')`, `url('#${newId}')`)
                .replaceAll(`url("#${previousId}")`, `url("#${newId}")`)
                .replaceAll(`url(#${previousId})`, `url(#${newId})`);
        }, svg);
    }
    return svg;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC1wcm9jZXNzb3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9sZWdhY3kvY29tcG9uZW50cy9zdmcvY29udGVudC1wcm9jZXNzb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLG1DQUFtQyxDQUFDO0FBRTlELFNBQVMsY0FBYztJQUNuQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUM7QUFFRCxTQUFTLCtCQUErQixDQUFDLEdBQVc7SUFDaEQsTUFBTSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLDRCQUE0QixDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FDcEUsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUN6RCxDQUFDO0lBRUYsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDcEMsQ0FBQztBQUVEOzs7Ozs7Ozs7Ozs7Ozs7O0dBZ0JHO0FBQ0gsTUFBTSxVQUFVLDZCQUE2QixDQUN6QyxHQUFnQixFQUNoQixPQUF3QixjQUFjLEVBQUU7SUFFeEMsSUFBSSxXQUFXLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDbEIsTUFBTSxTQUFTLEdBQUcsK0JBQStCLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFdkQsT0FBTyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxFQUFFLFVBQVUsRUFBRSxFQUFFO1lBQzNDLE1BQU0sS0FBSyxHQUFHLE1BQU0sSUFBSSxJQUFJLFVBQVUsRUFBRSxDQUFDO1lBRXpDLE9BQU8sTUFBTTtpQkFDUixVQUFVLENBQUMsSUFBSSxVQUFVLEdBQUcsRUFBRSxJQUFJLEtBQUssR0FBRyxDQUFDO2lCQUMzQyxVQUFVLENBQUMsSUFBSSxVQUFVLEdBQUcsRUFBRSxJQUFJLEtBQUssR0FBRyxDQUFDO2lCQUMzQyxVQUFVLENBQUMsU0FBUyxVQUFVLElBQUksRUFBRSxTQUFTLEtBQUssSUFBSSxDQUFDO2lCQUN2RCxVQUFVLENBQUMsU0FBUyxVQUFVLElBQUksRUFBRSxTQUFTLEtBQUssSUFBSSxDQUFDO2lCQUN2RCxVQUFVLENBQUMsUUFBUSxVQUFVLEdBQUcsRUFBRSxRQUFRLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDN0QsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0tBQ1g7SUFFRCxPQUFPLEdBQUcsQ0FBQztBQUNmLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7VHVpU2FmZUh0bWx9IGZyb20gJ0B0YWlnYS11aS9jZGsvdHlwZXMnO1xuaW1wb3J0IHt0dWlJc1N0cmluZ30gZnJvbSAnQHRhaWdhLXVpL2Nkay91dGlscy9taXNjZWxsYW5lb3VzJztcblxuZnVuY3Rpb24gbWFrZVJhbmRvbVNhbHQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogRGF0ZS5ub3coKSk7XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RMaW5lYXJHcmFkaWVudElkc0Zyb21Tdmcoc3ZnOiBzdHJpbmcpOiBzdHJpbmdbXSB7XG4gICAgY29uc3QgaWRzID0gKHN2Zy5tYXRjaCgvdXJsXFwoKFwiPykoJyopIyguKj8pKCcqKVxcKS9nKSA/PyBbXSkubWFwKCh1cmwpID0+XG4gICAgICAgIHVybC5zbGljZSg0LCB1cmwubGVuZ3RoIC0gMSkucmVwbGFjZUFsbCgvWydcIiNdKy9nLCAnJyksXG4gICAgKTtcblxuICAgIHJldHVybiBBcnJheS5mcm9tKG5ldyBTZXQoaWRzKSk7XG59XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQ6IGRyb3AgaW4gdjUuMCB1c2Uge0BsaW5rIFR1aUljb259XG4gKiBodHRwczovL3RhaWdhLXVpLmRldi9jb21wb25lbnRzL2ljb25cbiAqXG4gKiBAZGVzY3JpcHRpb246XG4gKiBBbnkg4oCYbGluZWFyR3JhZGllbnTigJkgYXR0cmlidXRlcyB3aGljaCBhcmUgZGVmaW5lZCBvbiB0aGUgcmVmZXJlbmNlZFxuICogZWxlbWVudCB3aGljaCBhcmUgbm90IGRlZmluZWQgb24gdGhpcyBlbGVtZW50IGFyZSBpbmhlcml0ZWQgYnkgdGhpcyBlbGVtZW50LlxuICogSWYgdGhpcyBlbGVtZW50IGhhcyBubyBkZWZpbmVkIGdyYWRpZW50IHN0b3BzLCBhbmQgdGhlIHJlZmVyZW5jZWQgZWxlbWVudCBkb2VzXG4gKiAocG9zc2libHkgZHVlIHRvIGl0cyBvd24g4oCYeGxpbms6aHJlZuKAmSBhdHRyaWJ1dGUpLCB0aGVuIHRoaXMgZWxlbWVudCBpbmhlcml0c1xuICogdGhlIGdyYWRpZW50IHN0b3AgZnJvbSB0aGUgcmVmZXJlbmNlZCBlbGVtZW50LiBJbmhlcml0YW5jZSBjYW4gYmUgaW5kaXJlY3RcbiAqIHRvIGFuIGFyYml0cmFyeSBsZXZlbDsgdGh1cywgaWYgdGhlIHJlZmVyZW5jZWQgZWxlbWVudCBpbmhlcml0cyBhdHRyaWJ1dGVcbiAqIG9yIGdyYWRpZW50IHN0b3BzIGR1ZSB0byBpdHMgb3duIOKAmHhsaW5rOmhyZWbigJkgYXR0cmlidXRlLCB0aGVuIHRoZSBjdXJyZW50XG4gKiBlbGVtZW50IGNhbiBpbmhlcml0IHRob3NlIGF0dHJpYnV0ZXMgb3IgZ3JhZGllbnQgc3RvcHMuXG4gKlxuICogRG9jdW1lbnRhdGlvbjogaHR0cHM6Ly93d3cudzMub3JnL1RSL1NWRzExL3BzZXJ2ZXJzLmh0bWxcbiAqXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0dWlTdmdMaW5lYXJHcmFkaWVudFByb2Nlc3NvcihcbiAgICBzdmc6IFR1aVNhZmVIdG1sLFxuICAgIHNhbHQ6IG51bWJlciB8IHN0cmluZyA9IG1ha2VSYW5kb21TYWx0KCksXG4pOiBUdWlTYWZlSHRtbCB7XG4gICAgaWYgKHR1aUlzU3RyaW5nKHN2ZykpIHtcbiAgICAgICAgY29uc3QgdW5pcXVlSWRzID0gZXh0cmFjdExpbmVhckdyYWRpZW50SWRzRnJvbVN2ZyhzdmcpO1xuXG4gICAgICAgIHJldHVybiB1bmlxdWVJZHMucmVkdWNlKChuZXdTdmcsIHByZXZpb3VzSWQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5ld0lkID0gYGlkXyR7c2FsdH1fJHtwcmV2aW91c0lkfWA7XG5cbiAgICAgICAgICAgIHJldHVybiBuZXdTdmdcbiAgICAgICAgICAgICAgICAucmVwbGFjZUFsbChgXCIke3ByZXZpb3VzSWR9XCJgLCBgXCIke25ld0lkfVwiYClcbiAgICAgICAgICAgICAgICAucmVwbGFjZUFsbChgJyR7cHJldmlvdXNJZH0nYCwgYCcke25ld0lkfSdgKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlQWxsKGB1cmwoJyMke3ByZXZpb3VzSWR9JylgLCBgdXJsKCcjJHtuZXdJZH0nKWApXG4gICAgICAgICAgICAgICAgLnJlcGxhY2VBbGwoYHVybChcIiMke3ByZXZpb3VzSWR9XCIpYCwgYHVybChcIiMke25ld0lkfVwiKWApXG4gICAgICAgICAgICAgICAgLnJlcGxhY2VBbGwoYHVybCgjJHtwcmV2aW91c0lkfSlgLCBgdXJsKCMke25ld0lkfSlgKTtcbiAgICAgICAgfSwgc3ZnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3ZnO1xufVxuIl19