/// <reference types="@taiga-ui/tsconfig/ng-dev-mode" />
/// <reference types="@taiga-ui/tsconfig/ng-dev-mode" />
import { inject, Injectable, SecurityContext } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { TUI_ICON_STARTS, TUI_SANITIZER } from '@taiga-ui/legacy/tokens';
import { tuiProcessIcon } from '@taiga-ui/legacy/utils';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
/**
 * @deprecated: drop in v5.0 use {@link TuiIcon}
 * Service for reusing SVGs without inlining each instance
 */
class TuiSvgService {
    constructor() {
        this.tuiSanitizer = inject(TUI_SANITIZER, { optional: true });
        this.sanitizer = inject(DomSanitizer);
        this.originals = {};
        this.items$ = new BehaviorSubject(new Map());
        this.define(inject(TUI_ICON_STARTS));
    }
    define(icons) {
        const { value } = this.items$;
        Object.keys(icons).forEach((key) => {
            this.defineIcon(key, icons[key] ?? '', value);
        });
        this.items$.next(value);
    }
    getOriginal(name) {
        return this.originals[name] || null;
    }
    defineIcon(name, src, map) {
        if (map.has(name)) {
            return;
        }
        const parsed = this.parseSrc(name, src);
        if (!parsed) {
            ngDevMode && console.assert(false, 'Unable to parse given SVG src');
            return;
        }
        map.set(name, parsed);
        this.originals = {
            ...this.originals,
            [name]: src,
        };
    }
    parseSrc(name, src) {
        return this.sanitize(tuiProcessIcon(src, name));
    }
    sanitize(src) {
        return this.sanitizer.bypassSecurityTrustHtml((this.tuiSanitizer
            ? this.tuiSanitizer.sanitize(SecurityContext.HTML, src)
            : this.sanitizer.sanitize(SecurityContext.HTML, src)) || '');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSvgService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSvgService, providedIn: 'root' }); }
}
export { TuiSvgService };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSvgService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ZnLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9sZWdhY3kvY29tcG9uZW50cy9zdmcvc3ZnLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0RBQXdEO0FBQXhELHdEQUF3RDtBQUN4RCxPQUFPLEVBQUMsTUFBTSxFQUFFLFVBQVUsRUFBRSxlQUFlLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFbEUsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBQ3ZELE9BQU8sRUFBQyxlQUFlLEVBQUUsYUFBYSxFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFDdkUsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLHdCQUF3QixDQUFDO0FBQ3RELE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxNQUFNLENBQUM7O0FBRXJDOzs7R0FHRztBQUNILE1BR2EsYUFBYTtJQU90QjtRQU5pQixpQkFBWSxHQUFHLE1BQU0sQ0FBQyxhQUFhLEVBQUUsRUFBQyxRQUFRLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQztRQUN2RCxjQUFTLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzFDLGNBQVMsR0FBMkIsRUFBRSxDQUFDO1FBRS9CLFdBQU0sR0FBRyxJQUFJLGVBQWUsQ0FBd0IsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBRzNFLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVNLE1BQU0sQ0FBQyxLQUE2QjtRQUN2QyxNQUFNLEVBQUMsS0FBSyxFQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUU1QixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQy9CLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDbEQsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBRU0sV0FBVyxDQUFDLElBQVk7UUFDM0IsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQztJQUN4QyxDQUFDO0lBRU8sVUFBVSxDQUFDLElBQVksRUFBRSxHQUFXLEVBQUUsR0FBMEI7UUFDcEUsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ2YsT0FBTztTQUNWO1FBRUQsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFFeEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNULFNBQVMsSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSwrQkFBK0IsQ0FBQyxDQUFDO1lBRXBFLE9BQU87U0FDVjtRQUVELEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxTQUFTLEdBQUc7WUFDYixHQUFHLElBQUksQ0FBQyxTQUFTO1lBQ2pCLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRztTQUNkLENBQUM7SUFDTixDQUFDO0lBRU8sUUFBUSxDQUFDLElBQVksRUFBRSxHQUFXO1FBQ3RDLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVPLFFBQVEsQ0FBQyxHQUFXO1FBQ3hCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyx1QkFBdUIsQ0FDekMsQ0FBQyxJQUFJLENBQUMsWUFBWTtZQUNkLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQztZQUN2RCxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FDbEUsQ0FBQztJQUNOLENBQUM7K0dBdkRRLGFBQWE7bUhBQWIsYUFBYSxjQUZWLE1BQU07O1NBRVQsYUFBYTs0RkFBYixhQUFhO2tCQUh6QixVQUFVO21CQUFDO29CQUNSLFVBQVUsRUFBRSxNQUFNO2lCQUNyQiIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHR5cGVzPVwiQHRhaWdhLXVpL3RzY29uZmlnL25nLWRldi1tb2RlXCIgLz5cbmltcG9ydCB7aW5qZWN0LCBJbmplY3RhYmxlLCBTZWN1cml0eUNvbnRleHR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHR5cGUge1NhZmVIdG1sfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcbmltcG9ydCB7RG9tU2FuaXRpemVyfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcbmltcG9ydCB7VFVJX0lDT05fU1RBUlRTLCBUVUlfU0FOSVRJWkVSfSBmcm9tICdAdGFpZ2EtdWkvbGVnYWN5L3Rva2Vucyc7XG5pbXBvcnQge3R1aVByb2Nlc3NJY29ufSBmcm9tICdAdGFpZ2EtdWkvbGVnYWN5L3V0aWxzJztcbmltcG9ydCB7QmVoYXZpb3JTdWJqZWN0fSBmcm9tICdyeGpzJztcblxuLyoqXG4gKiBAZGVwcmVjYXRlZDogZHJvcCBpbiB2NS4wIHVzZSB7QGxpbmsgVHVpSWNvbn1cbiAqIFNlcnZpY2UgZm9yIHJldXNpbmcgU1ZHcyB3aXRob3V0IGlubGluaW5nIGVhY2ggaW5zdGFuY2VcbiAqL1xuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgVHVpU3ZnU2VydmljZSB7XG4gICAgcHJpdmF0ZSByZWFkb25seSB0dWlTYW5pdGl6ZXIgPSBpbmplY3QoVFVJX1NBTklUSVpFUiwge29wdGlvbmFsOiB0cnVlfSk7XG4gICAgcHJpdmF0ZSByZWFkb25seSBzYW5pdGl6ZXIgPSBpbmplY3QoRG9tU2FuaXRpemVyKTtcbiAgICBwcml2YXRlIG9yaWdpbmFsczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHt9O1xuXG4gICAgcHVibGljIHJlYWRvbmx5IGl0ZW1zJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8TWFwPHN0cmluZywgU2FmZUh0bWw+PihuZXcgTWFwKCkpO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZGVmaW5lKGluamVjdChUVUlfSUNPTl9TVEFSVFMpKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZGVmaW5lKGljb25zOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+KTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHt2YWx1ZX0gPSB0aGlzLml0ZW1zJDtcblxuICAgICAgICBPYmplY3Qua2V5cyhpY29ucykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmRlZmluZUljb24oa2V5LCBpY29uc1trZXldID8/ICcnLCB2YWx1ZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuaXRlbXMkLm5leHQodmFsdWUpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRPcmlnaW5hbChuYW1lOiBzdHJpbmcpOiBzdHJpbmcgfCBudWxsIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3JpZ2luYWxzW25hbWVdIHx8IG51bGw7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBkZWZpbmVJY29uKG5hbWU6IHN0cmluZywgc3JjOiBzdHJpbmcsIG1hcDogTWFwPHN0cmluZywgU2FmZUh0bWw+KTogdm9pZCB7XG4gICAgICAgIGlmIChtYXAuaGFzKG5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLnBhcnNlU3JjKG5hbWUsIHNyYyk7XG5cbiAgICAgICAgaWYgKCFwYXJzZWQpIHtcbiAgICAgICAgICAgIG5nRGV2TW9kZSAmJiBjb25zb2xlLmFzc2VydChmYWxzZSwgJ1VuYWJsZSB0byBwYXJzZSBnaXZlbiBTVkcgc3JjJyk7XG5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIG1hcC5zZXQobmFtZSwgcGFyc2VkKTtcbiAgICAgICAgdGhpcy5vcmlnaW5hbHMgPSB7XG4gICAgICAgICAgICAuLi50aGlzLm9yaWdpbmFscyxcbiAgICAgICAgICAgIFtuYW1lXTogc3JjLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgcGFyc2VTcmMobmFtZTogc3RyaW5nLCBzcmM6IHN0cmluZyk6IFNhZmVIdG1sIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2FuaXRpemUodHVpUHJvY2Vzc0ljb24oc3JjLCBuYW1lKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzYW5pdGl6ZShzcmM6IHN0cmluZyk6IFNhZmVIdG1sIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2FuaXRpemVyLmJ5cGFzc1NlY3VyaXR5VHJ1c3RIdG1sKFxuICAgICAgICAgICAgKHRoaXMudHVpU2FuaXRpemVyXG4gICAgICAgICAgICAgICAgPyB0aGlzLnR1aVNhbml0aXplci5zYW5pdGl6ZShTZWN1cml0eUNvbnRleHQuSFRNTCwgc3JjKVxuICAgICAgICAgICAgICAgIDogdGhpcy5zYW5pdGl6ZXIuc2FuaXRpemUoU2VjdXJpdHlDb250ZXh0LkhUTUwsIHNyYykpIHx8ICcnLFxuICAgICAgICApO1xuICAgIH1cbn1cbiJdfQ==