import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, inject, Input, ViewChild, ViewChildren, } from '@angular/core';
import { EMPTY_QUERY } from '@taiga-ui/cdk/constants';
import { TUI_IS_MOBILE } from '@taiga-ui/cdk/tokens';
import { tuiInjectElement } from '@taiga-ui/cdk/utils/dom';
import { tuiIsNativeFocused, tuiIsNativeFocusedIn } from '@taiga-ui/cdk/utils/focus';
import { tuiClamp, tuiRound } from '@taiga-ui/cdk/utils/math';
import { tuiPure } from '@taiga-ui/cdk/utils/miscellaneous';
import { tuiGetFractionPartPadded } from '@taiga-ui/core/utils/format';
import { TuiRange } from '@taiga-ui/kit/components/range';
import { TUI_FLOATING_PRECISION, tuiSliderOptionsProvider, } from '@taiga-ui/kit/components/slider';
import { AbstractTuiControl, tuiAsControl } from '@taiga-ui/legacy/classes';
import { TuiInputNumberComponent } from '@taiga-ui/legacy/components/input-number';
import { TEXTFIELD_CONTROLLER_PROVIDER, TUI_TEXTFIELD_WATCHED_CONTROLLER, } from '@taiga-ui/legacy/directives';
import { tuiAsFocusableItemAccessor } from '@taiga-ui/legacy/tokens';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/forms";
import * as i3 from "@taiga-ui/polymorpheus";
import * as i4 from "@taiga-ui/cdk/directives/active-zone";
import * as i5 from "@taiga-ui/legacy/components/input-number";
import * as i6 from "@taiga-ui/kit/components/range";
import * as i7 from "@taiga-ui/legacy/directives";
import * as i8 from "@taiga-ui/core/directives/number-format";
class TuiInputRangeComponent extends AbstractTuiControl {
    constructor() {
        super(...arguments);
        this.inputNumberRefs = EMPTY_QUERY;
        this.isMobile = inject(TUI_IS_MOBILE);
        this.el = tuiInjectElement();
        this.leftTextfieldValue = this.safeCurrentValue[0];
        this.rightTextfieldValue = this.safeCurrentValue[1];
        this.lastActiveSide = 'left';
        this.controller = inject(TUI_TEXTFIELD_WATCHED_CONTROLLER);
        this.min = 0;
        this.max = 100;
        this.quantum = 1;
        this.steps = 0;
        this.segments = 1;
        this.keySteps = null;
        this.pluralize = null;
    }
    get nativeFocusableElement() {
        return this.disabled
            ? null
            : this.leftFocusableElement || this.rightFocusableElement;
    }
    get focused() {
        return tuiIsNativeFocusedIn(this.el);
    }
    writeValue(value) {
        super.writeValue(value);
        this.updateTextfieldValues(this.value);
    }
    get leftFocusableElement() {
        return this.inputNumberRefs.first?.nativeFocusableElement || null;
    }
    get rightFocusableElement() {
        return this.inputNumberRefs.last?.nativeFocusableElement || null;
    }
    get appearance() {
        return this.controller.appearance;
    }
    get showLeftValueContent() {
        return Boolean(this.leftValueContent &&
            !tuiIsNativeFocused(this.leftFocusableElement) &&
            !(tuiIsNativeFocusedIn(this.range?.nativeElement) &&
                this.lastActiveSide === 'left'));
    }
    get showRightValueContent() {
        return Boolean(this.rightValueContent &&
            !tuiIsNativeFocused(this.rightFocusableElement) &&
            !(tuiIsNativeFocusedIn(this.range?.nativeElement) &&
                this.lastActiveSide === 'right'));
    }
    get precision() {
        return tuiGetFractionPartPadded(this.quantum).length;
    }
    get computedSteps() {
        return this.steps || (this.max - this.min) / this.quantum;
    }
    get step() {
        return (this.max - this.min) / this.computedSteps;
    }
    computeKeySteps(keySteps, min, max) {
        return (keySteps || [
            [0, min],
            [100, max],
        ]);
    }
    onActiveZone(active) {
        this.updateFocused(active);
    }
    onTextInputFocused(focused) {
        if (!focused) {
            this.updateTextfieldValues(this.value);
        }
    }
    changeByStep(event, [leftCoefficient, rightCoefficient]) {
        if (this.readOnly) {
            return;
        }
        event.preventDefault();
        const newValue = this.valueGuard([
            this.value[0] + leftCoefficient * this.step,
            this.value[1] + rightCoefficient * this.step,
        ]);
        if (newValue[0] !== this.value[0] || newValue[1] !== this.value[1]) {
            this.onExternalValueUpdate(newValue);
        }
    }
    onInputLeft(value) {
        this.safelyUpdateValue([value ?? this.safeCurrentValue[0], this.value[1]]);
    }
    onInputRight(value) {
        this.safelyUpdateValue([this.value[0], value ?? this.safeCurrentValue[1]]);
    }
    onExternalValueUpdate(value) {
        this.safelyUpdateValue(value);
        this.updateTextfieldValues(this.value);
    }
    focusToTextInput() {
        const element = this.lastActiveSide === 'left'
            ? this.leftFocusableElement
            : this.rightFocusableElement;
        if (!this.isMobile && element) {
            element.focus();
        }
    }
    onActiveThumbChange(activeThumb) {
        this.lastActiveSide = activeThumb;
    }
    getFallbackValue() {
        return [0, 0];
    }
    safelyUpdateValue(value) {
        this.value = this.valueGuard(value);
    }
    valueGuard([leftValue, rightValue]) {
        const leftCalibratedValue = this.calibrate(leftValue);
        const rightCalibratedValue = this.calibrate(rightValue);
        return [
            Math.min(leftCalibratedValue, this.value[1]),
            Math.max(rightCalibratedValue, this.value[0]),
        ];
    }
    calibrate(value) {
        const roundedValue = tuiRound(Math.round(value / this.quantum) * this.quantum, TUI_FLOATING_PRECISION);
        return tuiClamp(roundedValue, this.min, this.max);
    }
    updateTextfieldValues([leftValue, rightValue]) {
        this.leftTextfieldValue = leftValue;
        this.rightTextfieldValue = rightValue;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputRangeComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiInputRangeComponent, selector: "tui-input-range", inputs: { min: "min", max: "max", quantum: "quantum", steps: "steps", segments: "segments", keySteps: "keySteps", leftValueContent: "leftValueContent", rightValueContent: "rightValueContent", pluralize: "pluralize" }, host: { properties: { "attr.data-size": "controller.size", "class._label-outside": "controller.labelOutside" } }, providers: [
            tuiAsFocusableItemAccessor(TuiInputRangeComponent),
            tuiAsControl(TuiInputRangeComponent),
            tuiSliderOptionsProvider({ trackColor: 'transparent' }),
            TEXTFIELD_CONTROLLER_PROVIDER,
        ], viewQueries: [{ propertyName: "range", first: true, predicate: TuiRange, descendants: true, read: ElementRef }, { propertyName: "inputNumberRefs", predicate: TuiInputNumberComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<div\n    tuiWrapper\n    class=\"t-wrapper\"\n    [appearance]=\"appearance\"\n    [disabled]=\"disabled\"\n    [focus]=\"computedFocused\"\n    [hover]=\"pseudoHover\"\n    [invalid]=\"computedInvalid\"\n    [readOnly]=\"readOnly\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n>\n    <tui-input-number\n        automation-id=\"tui-input-range__left-input\"\n        tuiTextfieldAppearance=\"none\"\n        class=\"t-left\"\n        [disabled]=\"computedDisabled\"\n        [max]=\"value[1]\"\n        [min]=\"min\"\n        [ngModelOptions]=\"{standalone: true}\"\n        [readOnly]=\"readOnly\"\n        [tuiNumberFormat]=\"{precision}\"\n        [tuiTextfieldPostfix]=\"pluralize ? (value[0] | i18nPlural: pluralize) : ''\"\n        [(ngModel)]=\"leftTextfieldValue\"\n        (focusedChange)=\"onTextInputFocused($event)\"\n        (keydown.arrowDown)=\"changeByStep($event, [-1, 0])\"\n        (keydown.arrowUp)=\"changeByStep($event, [1, 0])\"\n        (ngModelChange)=\"onInputLeft($event)\"\n    >\n        <ng-content />\n        <div\n            *ngIf=\"showLeftValueContent\"\n            ngProjectAs=\"tuiContent\"\n        >\n            <ng-container *polymorpheusOutlet=\"leftValueContent as text; context: {$implicit: value[0]}\">\n                {{ text }}\n            </ng-container>\n        </div>\n    </tui-input-number>\n\n    <tui-input-number\n        automation-id=\"tui-input-range__right-input\"\n        tuiTextfieldAppearance=\"none\"\n        class=\"t-right\"\n        [disabled]=\"computedDisabled\"\n        [max]=\"max\"\n        [min]=\"value[0]\"\n        [ngModelOptions]=\"{standalone: true}\"\n        [readOnly]=\"readOnly\"\n        [tuiNumberFormat]=\"{precision}\"\n        [tuiTextfieldPostfix]=\"pluralize ? (value[1] | i18nPlural: pluralize) : ''\"\n        [(ngModel)]=\"rightTextfieldValue\"\n        (focusedChange)=\"onTextInputFocused($event)\"\n        (keydown.arrowDown)=\"changeByStep($event, [0, -1])\"\n        (keydown.arrowUp)=\"changeByStep($event, [0, 1])\"\n        (ngModelChange)=\"onInputRight($event)\"\n    >\n        <div\n            *ngIf=\"showRightValueContent\"\n            ngProjectAs=\"tuiContent\"\n        >\n            <ng-container *polymorpheusOutlet=\"rightValueContent as text; context: {$implicit: value[1]}\">\n                {{ text }}\n            </ng-container>\n        </div>\n    </tui-input-number>\n\n    <tui-range\n        class=\"t-range\"\n        [disabled]=\"readOnly || disabled\"\n        [focusable]=\"false\"\n        [keySteps]=\"computeKeySteps(keySteps, min, max)\"\n        [max]=\"max\"\n        [min]=\"min\"\n        [ngModel]=\"value\"\n        [ngModelOptions]=\"{standalone: true}\"\n        [segments]=\"segments\"\n        [step]=\"step\"\n        (activeThumbChange)=\"onActiveThumbChange($event)\"\n        (mousedown.prevent)=\"focusToTextInput()\"\n        (ngModelChange)=\"onExternalValueUpdate($event)\"\n    />\n</div>\n", styles: [".t-wrapper{position:relative}.t-left{inline-size:100%}.t-right{position:absolute;right:0;top:0;display:flex;inline-size:50%;block-size:100%;text-align:end}:host{display:block;border-radius:var(--tui-radius-m)}.t-range{position:absolute;top:100%;left:0;right:0;z-index:1;margin:-.125rem 0 0}\n"], dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i3.PolymorpheusOutlet, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { kind: "directive", type: i4.TuiActiveZone, selector: "[tuiActiveZone]:not(ng-container), [tuiActiveZoneChange]:not(ng-container), [tuiActiveZoneParent]:not(ng-container)", inputs: ["tuiActiveZoneParent"], outputs: ["tuiActiveZoneChange"], exportAs: ["tuiActiveZone"] }, { kind: "component", type: i5.TuiInputNumberComponent, selector: "tui-input-number", inputs: ["min", "max", "step"] }, { kind: "directive", type: i5.TuiInputNumberDirective, selector: "tui-input-number" }, { kind: "component", type: i6.TuiRange, selector: "tui-range", inputs: ["min", "max", "step", "size", "segments", "keySteps", "focusable", "margin", "limit"] }, { kind: "directive", type: i7.TuiWrapperDirective, selector: "[tuiWrapper]", inputs: ["disabled", "readOnly", "hover", "active", "focus", "invalid", "appearance"] }, { kind: "directive", type: i7.TuiTextfieldAppearanceDirective, selector: "[tuiTextfieldAppearance]", inputs: ["tuiTextfieldAppearance"] }, { kind: "directive", type: i7.TuiTextfieldPostfixDirective, selector: "[tuiTextfieldPostfix]", inputs: ["tuiTextfieldPostfix"] }, { kind: "directive", type: i8.TuiNumberFormat, selector: "[tuiNumberFormat]", inputs: ["tuiNumberFormat"] }, { kind: "pipe", type: i1.I18nPluralPipe, name: "i18nPlural" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
__decorate([
    tuiPure
], TuiInputRangeComponent.prototype, "computeKeySteps", null);
export { TuiInputRangeComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputRangeComponent, decorators: [{
            type: Component,
            args: [{ selector: 'tui-input-range', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        tuiAsFocusableItemAccessor(TuiInputRangeComponent),
                        tuiAsControl(TuiInputRangeComponent),
                        tuiSliderOptionsProvider({ trackColor: 'transparent' }),
                        TEXTFIELD_CONTROLLER_PROVIDER,
                    ], host: {
                        '[attr.data-size]': 'controller.size',
                        '[class._label-outside]': 'controller.labelOutside',
                    }, template: "<div\n    tuiWrapper\n    class=\"t-wrapper\"\n    [appearance]=\"appearance\"\n    [disabled]=\"disabled\"\n    [focus]=\"computedFocused\"\n    [hover]=\"pseudoHover\"\n    [invalid]=\"computedInvalid\"\n    [readOnly]=\"readOnly\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n>\n    <tui-input-number\n        automation-id=\"tui-input-range__left-input\"\n        tuiTextfieldAppearance=\"none\"\n        class=\"t-left\"\n        [disabled]=\"computedDisabled\"\n        [max]=\"value[1]\"\n        [min]=\"min\"\n        [ngModelOptions]=\"{standalone: true}\"\n        [readOnly]=\"readOnly\"\n        [tuiNumberFormat]=\"{precision}\"\n        [tuiTextfieldPostfix]=\"pluralize ? (value[0] | i18nPlural: pluralize) : ''\"\n        [(ngModel)]=\"leftTextfieldValue\"\n        (focusedChange)=\"onTextInputFocused($event)\"\n        (keydown.arrowDown)=\"changeByStep($event, [-1, 0])\"\n        (keydown.arrowUp)=\"changeByStep($event, [1, 0])\"\n        (ngModelChange)=\"onInputLeft($event)\"\n    >\n        <ng-content />\n        <div\n            *ngIf=\"showLeftValueContent\"\n            ngProjectAs=\"tuiContent\"\n        >\n            <ng-container *polymorpheusOutlet=\"leftValueContent as text; context: {$implicit: value[0]}\">\n                {{ text }}\n            </ng-container>\n        </div>\n    </tui-input-number>\n\n    <tui-input-number\n        automation-id=\"tui-input-range__right-input\"\n        tuiTextfieldAppearance=\"none\"\n        class=\"t-right\"\n        [disabled]=\"computedDisabled\"\n        [max]=\"max\"\n        [min]=\"value[0]\"\n        [ngModelOptions]=\"{standalone: true}\"\n        [readOnly]=\"readOnly\"\n        [tuiNumberFormat]=\"{precision}\"\n        [tuiTextfieldPostfix]=\"pluralize ? (value[1] | i18nPlural: pluralize) : ''\"\n        [(ngModel)]=\"rightTextfieldValue\"\n        (focusedChange)=\"onTextInputFocused($event)\"\n        (keydown.arrowDown)=\"changeByStep($event, [0, -1])\"\n        (keydown.arrowUp)=\"changeByStep($event, [0, 1])\"\n        (ngModelChange)=\"onInputRight($event)\"\n    >\n        <div\n            *ngIf=\"showRightValueContent\"\n            ngProjectAs=\"tuiContent\"\n        >\n            <ng-container *polymorpheusOutlet=\"rightValueContent as text; context: {$implicit: value[1]}\">\n                {{ text }}\n            </ng-container>\n        </div>\n    </tui-input-number>\n\n    <tui-range\n        class=\"t-range\"\n        [disabled]=\"readOnly || disabled\"\n        [focusable]=\"false\"\n        [keySteps]=\"computeKeySteps(keySteps, min, max)\"\n        [max]=\"max\"\n        [min]=\"min\"\n        [ngModel]=\"value\"\n        [ngModelOptions]=\"{standalone: true}\"\n        [segments]=\"segments\"\n        [step]=\"step\"\n        (activeThumbChange)=\"onActiveThumbChange($event)\"\n        (mousedown.prevent)=\"focusToTextInput()\"\n        (ngModelChange)=\"onExternalValueUpdate($event)\"\n    />\n</div>\n", styles: [".t-wrapper{position:relative}.t-left{inline-size:100%}.t-right{position:absolute;right:0;top:0;display:flex;inline-size:50%;block-size:100%;text-align:end}:host{display:block;border-radius:var(--tui-radius-m)}.t-range{position:absolute;top:100%;left:0;right:0;z-index:1;margin:-.125rem 0 0}\n"] }]
        }], propDecorators: { inputNumberRefs: [{
                type: ViewChildren,
                args: [TuiInputNumberComponent]
            }], range: [{
                type: ViewChild,
                args: [TuiRange, { read: ElementRef }]
            }], min: [{
                type: Input
            }], max: [{
                type: Input
            }], quantum: [{
                type: Input
            }], steps: [{
                type: Input
            }], segments: [{
                type: Input
            }], keySteps: [{
                type: Input
            }], leftValueContent: [{
                type: Input
            }], rightValueContent: [{
                type: Input
            }], pluralize: [{
                type: Input
            }], computeKeySteps: [] } });
//# sourceMappingURL=data:application/json;base64,