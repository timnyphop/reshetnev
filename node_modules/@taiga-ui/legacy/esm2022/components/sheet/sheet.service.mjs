import { DOCUMENT } from '@angular/common';
import { inject, Injectable } from '@angular/core';
import { tuiIsHTMLElement } from '@taiga-ui/cdk/utils/dom';
import { tuiGetNativeFocused } from '@taiga-ui/cdk/utils/focus';
import { BehaviorSubject, EMPTY, Observable } from 'rxjs';
import { TUI_SHEET_OPTIONS } from './sheet-options';
import * as i0 from "@angular/core";
/**
 * @deprecated: use {@link TuiSheetDialogService}
 * https://taiga-ui.dev/components/sheet-dialog
 */
class TuiSheetService {
    constructor() {
        this.doc = inject(DOCUMENT);
        this.options = inject(TUI_SHEET_OPTIONS);
        this.sheets$ = new BehaviorSubject([]);
    }
    open(content, options = {}) {
        return new Observable(($implicit) => {
            const completeWith = (result) => {
                $implicit.next(result);
                $implicit.complete();
            };
            const sheet = {
                ...this.options,
                ...options,
                content,
                completeWith,
                $implicit,
                scroll$: EMPTY,
            };
            const focused = tuiGetNativeFocused(this.doc);
            if (tuiIsHTMLElement(focused) && sheet.overlay) {
                focused.blur();
            }
            this.sheets$.next([...this.sheets$.value, sheet]);
            return () => {
                this.sheets$.next(this.sheets$.value.filter((item) => item !== sheet));
            };
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSheetService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSheetService, providedIn: 'root' }); }
}
export { TuiSheetService };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSheetService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hlZXQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2xlZ2FjeS9jb21wb25lbnRzL3NoZWV0L3NoZWV0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQ3pDLE9BQU8sRUFBQyxNQUFNLEVBQUUsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ2pELE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQ3pELE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBRTlELE9BQU8sRUFBQyxlQUFlLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUl4RCxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQzs7QUFFbEQ7OztHQUdHO0FBQ0gsTUFHYSxlQUFlO0lBSDVCO1FBSXFCLFFBQUcsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdkIsWUFBTyxHQUFHLE1BQU0sQ0FBa0IsaUJBQWlCLENBQUMsQ0FBQztRQUN0RCxZQUFPLEdBQUcsSUFBSSxlQUFlLENBQTRCLEVBQUUsQ0FBQyxDQUFDO0tBZ0NoRjtJQTlCVSxJQUFJLENBQ1AsT0FBeUMsRUFDekMsVUFBb0MsRUFBRTtRQUV0QyxPQUFPLElBQUksVUFBVSxDQUFDLENBQUMsU0FBUyxFQUFFLEVBQUU7WUFDaEMsTUFBTSxZQUFZLEdBQUcsQ0FBQyxNQUFTLEVBQVEsRUFBRTtnQkFDckMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDdkIsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ3pCLENBQUMsQ0FBQztZQUNGLE1BQU0sS0FBSyxHQUFrQjtnQkFDekIsR0FBRyxJQUFJLENBQUMsT0FBTztnQkFDZixHQUFHLE9BQU87Z0JBQ1YsT0FBTztnQkFDUCxZQUFZO2dCQUNaLFNBQVM7Z0JBQ1QsT0FBTyxFQUFFLEtBQUs7YUFDakIsQ0FBQztZQUNGLE1BQU0sT0FBTyxHQUFHLG1CQUFtQixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUU5QyxJQUFJLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUU7Z0JBQzVDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQzthQUNsQjtZQUVELElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBRWxELE9BQU8sR0FBRyxFQUFFO2dCQUNSLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDM0UsQ0FBQyxDQUFDO1FBQ04sQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDOytHQWxDUSxlQUFlO21IQUFmLGVBQWUsY0FGWixNQUFNOztTQUVULGVBQWU7NEZBQWYsZUFBZTtrQkFIM0IsVUFBVTttQkFBQztvQkFDUixVQUFVLEVBQUUsTUFBTTtpQkFDckIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RPQ1VNRU5UfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtpbmplY3QsIEluamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHt0dWlJc0hUTUxFbGVtZW50fSBmcm9tICdAdGFpZ2EtdWkvY2RrL3V0aWxzL2RvbSc7XG5pbXBvcnQge3R1aUdldE5hdGl2ZUZvY3VzZWR9IGZyb20gJ0B0YWlnYS11aS9jZGsvdXRpbHMvZm9jdXMnO1xuaW1wb3J0IHR5cGUge1BvbHltb3JwaGV1c0NvbnRlbnR9IGZyb20gJ0B0YWlnYS11aS9wb2x5bW9ycGhldXMnO1xuaW1wb3J0IHtCZWhhdmlvclN1YmplY3QsIEVNUFRZLCBPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHR5cGUge1R1aVNoZWV0fSBmcm9tICcuL3NoZWV0JztcbmltcG9ydCB0eXBlIHtUdWlTaGVldE9wdGlvbnN9IGZyb20gJy4vc2hlZXQtb3B0aW9ucyc7XG5pbXBvcnQge1RVSV9TSEVFVF9PUFRJT05TfSBmcm9tICcuL3NoZWV0LW9wdGlvbnMnO1xuXG4vKipcbiAqIEBkZXByZWNhdGVkOiB1c2Uge0BsaW5rIFR1aVNoZWV0RGlhbG9nU2VydmljZX1cbiAqIGh0dHBzOi8vdGFpZ2EtdWkuZGV2L2NvbXBvbmVudHMvc2hlZXQtZGlhbG9nXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIFR1aVNoZWV0U2VydmljZSB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBkb2MgPSBpbmplY3QoRE9DVU1FTlQpO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgb3B0aW9ucyA9IGluamVjdDxUdWlTaGVldE9wdGlvbnM+KFRVSV9TSEVFVF9PUFRJT05TKTtcbiAgICBwdWJsaWMgcmVhZG9ubHkgc2hlZXRzJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8QXJyYXk8VHVpU2hlZXQ8YW55LCBhbnk+Pj4oW10pO1xuXG4gICAgcHVibGljIG9wZW48Rz4oXG4gICAgICAgIGNvbnRlbnQ6IFBvbHltb3JwaGV1c0NvbnRlbnQ8VHVpU2hlZXQ8Rz4+LFxuICAgICAgICBvcHRpb25zOiBQYXJ0aWFsPFR1aVNoZWV0T3B0aW9ucz4gPSB7fSxcbiAgICApOiBPYnNlcnZhYmxlPEc+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKCgkaW1wbGljaXQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNvbXBsZXRlV2l0aCA9IChyZXN1bHQ6IEcpOiB2b2lkID0+IHtcbiAgICAgICAgICAgICAgICAkaW1wbGljaXQubmV4dChyZXN1bHQpO1xuICAgICAgICAgICAgICAgICRpbXBsaWNpdC5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHNoZWV0OiBUdWlTaGVldDxhbnk+ID0ge1xuICAgICAgICAgICAgICAgIC4uLnRoaXMub3B0aW9ucyxcbiAgICAgICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgICAgIGNvbnRlbnQsXG4gICAgICAgICAgICAgICAgY29tcGxldGVXaXRoLFxuICAgICAgICAgICAgICAgICRpbXBsaWNpdCxcbiAgICAgICAgICAgICAgICBzY3JvbGwkOiBFTVBUWSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBmb2N1c2VkID0gdHVpR2V0TmF0aXZlRm9jdXNlZCh0aGlzLmRvYyk7XG5cbiAgICAgICAgICAgIGlmICh0dWlJc0hUTUxFbGVtZW50KGZvY3VzZWQpICYmIHNoZWV0Lm92ZXJsYXkpIHtcbiAgICAgICAgICAgICAgICBmb2N1c2VkLmJsdXIoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5zaGVldHMkLm5leHQoWy4uLnRoaXMuc2hlZXRzJC52YWx1ZSwgc2hlZXRdKTtcblxuICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNoZWV0cyQubmV4dCh0aGlzLnNoZWV0cyQudmFsdWUuZmlsdGVyKChpdGVtKSA9PiBpdGVtICE9PSBzaGVldCkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl19