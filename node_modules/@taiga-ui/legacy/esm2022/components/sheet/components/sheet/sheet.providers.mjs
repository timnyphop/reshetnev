import { DOCUMENT } from '@angular/common';
import { ElementRef, forwardRef, NgZone } from '@angular/core';
import { TUI_FALSE_HANDLER, TUI_TRUE_HANDLER } from '@taiga-ui/cdk/constants';
import { tuiTypedFromEvent, tuiZonefree } from '@taiga-ui/cdk/observables';
import { TUI_IS_IOS } from '@taiga-ui/cdk/tokens';
import { tuiProvide } from '@taiga-ui/cdk/utils/miscellaneous';
import { TUI_SCROLL_REF } from '@taiga-ui/core/tokens';
import { concat, delay, map, merge, share, switchMap, take, takeUntil, zip } from 'rxjs';
import { TUI_SHEET, TUI_SHEET_DRAGGED, TUI_SHEET_SCROLL } from '../../sheet-tokens';
import { TuiSheetComponent } from './sheet.component';
export const TUI_SHEET_PROVIDERS = [
    {
        provide: TUI_SHEET_DRAGGED,
        deps: [ElementRef],
        useFactory: ({ nativeElement }) => merge(tuiTypedFromEvent(nativeElement, 'touchstart', { passive: true }).pipe(map(TUI_TRUE_HANDLER)), tuiTypedFromEvent(nativeElement, 'touchend').pipe(map(TUI_FALSE_HANDLER))),
    },
    {
        provide: TUI_SHEET_SCROLL,
        deps: [ElementRef, NgZone, DOCUMENT, TUI_IS_IOS],
        useFactory: ({ nativeElement }, zone, doc, isIos) => isIos
            ? iosScrollFactory(nativeElement, doc, zone)
            : merge(tuiTypedFromEvent(nativeElement, 'scroll'), tuiTypedFromEvent(nativeElement, 'load', { capture: true })).pipe(map(() => nativeElement.scrollTop), tuiZonefree(zone), share()),
    },
    tuiProvide(TUI_SCROLL_REF, ElementRef),
    tuiProvide(TUI_SHEET, forwardRef(() => TuiSheetComponent)),
];
function iosScrollFactory(element, doc, zone) {
    const load$ = tuiTypedFromEvent(element, 'load', { capture: true });
    const touchstart$ = tuiTypedFromEvent(element, 'touchstart', { passive: true });
    const touchmove$ = tuiTypedFromEvent(doc, 'touchmove', { passive: true });
    const touchend$ = tuiTypedFromEvent(doc, 'touchend');
    const scroll$ = tuiTypedFromEvent(element, 'scroll').pipe(map(() => element.scrollTop));
    const result$ = merge(load$.pipe(delay(0), map(() => element.scrollTop)), touchstart$.pipe(switchMap(({ touches }) => {
        const { screenY = 0 } = touches[0] ?? {};
        const { scrollTop } = element;
        return concat(
        // Sometimes touch is triggered without scroll in iOS, filter that
        zip(touchmove$, scroll$).pipe(map(([{ touches }]) => scrollTop + screenY - (touches[0]?.screenY ?? 0)), takeUntil(touchend$)), scroll$);
    })));
    return concat(scroll$.pipe(take(1)), result$).pipe(tuiZonefree(zone), share());
}
//# sourceMappingURL=data:application/json;base64,