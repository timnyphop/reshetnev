import { Directive, inject, NgZone, Output } from '@angular/core';
import { WA_WINDOW } from '@ng-web-apis/common';
import { tuiIfMap, tuiTypedFromEvent, tuiZonefull } from '@taiga-ui/cdk/observables';
import { tuiInjectElement } from '@taiga-ui/cdk/utils/dom';
import { tuiIsFalsy } from '@taiga-ui/cdk/utils/miscellaneous';
import { distinctUntilChanged, filter, merge, startWith } from 'rxjs';
import { TuiSheetComponent } from '../../components/sheet/sheet.component';
import { TUI_SHEET_CLOSE } from '../../components/sheet-heading/sheet-heading.component';
import { TUI_SHEET_DRAGGED, TUI_SHEET_SCROLL } from '../../sheet-tokens';
import * as i0 from "@angular/core";
class TuiSheetCloseDirective {
    constructor() {
        this.zone = inject(NgZone);
        this.dragged$ = inject(TUI_SHEET_DRAGGED);
        this.scroll$ = inject(TUI_SHEET_SCROLL);
        this.win = inject(WA_WINDOW);
        this.el = tuiInjectElement();
        this.sheet = inject(TuiSheetComponent);
        this.close = merge(tuiTypedFromEvent(this.el, TUI_SHEET_CLOSE), this.dragged$.pipe(tuiIfMap(() => this.scroll$.pipe(startWith(this.el.scrollTop)), tuiIsFalsy), filter((y) => this.sheet.item?.closeable && this.shouldClose(y)), distinctUntilChanged(), tuiZonefull(this.zone)));
    }
    shouldClose(scrollTop) {
        const height = Math.min(this.win.innerHeight, this.el.scrollHeight - this.win.innerHeight);
        const min = Math.min(height, this.sheet.stops[0] || Infinity);
        return scrollTop < min / 2;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSheetCloseDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiSheetCloseDirective, selector: "tui-sheet[close]", outputs: { close: "close" }, ngImport: i0 }); }
}
export { TuiSheetCloseDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSheetCloseDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'tui-sheet[close]',
                }]
        }], propDecorators: { close: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hlZXQtY2xvc2UuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbGVnYWN5L2NvbXBvbmVudHMvc2hlZXQvZGlyZWN0aXZlcy9zaGVldC1jbG9zZS9zaGVldC1jbG9zZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNoRSxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFDOUMsT0FBTyxFQUFDLFFBQVEsRUFBRSxpQkFBaUIsRUFBRSxXQUFXLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUNuRixPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUN6RCxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sbUNBQW1DLENBQUM7QUFFN0QsT0FBTyxFQUFDLG9CQUFvQixFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBRXBFLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLHdDQUF3QyxDQUFDO0FBQ3pFLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSx3REFBd0QsQ0FBQztBQUN2RixPQUFPLEVBQUMsaUJBQWlCLEVBQUUsZ0JBQWdCLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQzs7QUFFdkUsTUFHYSxzQkFBc0I7SUFIbkM7UUFJcUIsU0FBSSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN0QixhQUFRLEdBQUcsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDckMsWUFBTyxHQUFHLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ25DLFFBQUcsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDeEIsT0FBRSxHQUFHLGdCQUFnQixFQUFFLENBQUM7UUFDeEIsVUFBSyxHQUFHLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBR25DLFVBQUssR0FBd0IsS0FBSyxDQUM5QyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLGVBQWUsQ0FBQyxFQUMzQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDZCxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxVQUFVLENBQUMsRUFDM0UsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxTQUFTLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNoRSxvQkFBb0IsRUFBRSxFQUN0QixXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUN6QixDQUNKLENBQUM7S0FXTDtJQVRXLFdBQVcsQ0FBQyxTQUFpQjtRQUNqQyxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUNuQixJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFDcEIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQzlDLENBQUM7UUFDRixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxRQUFRLENBQUMsQ0FBQztRQUU5RCxPQUFPLFNBQVMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBQy9CLENBQUM7K0dBM0JRLHNCQUFzQjttR0FBdEIsc0JBQXNCOztTQUF0QixzQkFBc0I7NEZBQXRCLHNCQUFzQjtrQkFIbEMsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsa0JBQWtCO2lCQUMvQjs4QkFVbUIsS0FBSztzQkFEcEIsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBpbmplY3QsIE5nWm9uZSwgT3V0cHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7V0FfV0lORE9XfSBmcm9tICdAbmctd2ViLWFwaXMvY29tbW9uJztcbmltcG9ydCB7dHVpSWZNYXAsIHR1aVR5cGVkRnJvbUV2ZW50LCB0dWlab25lZnVsbH0gZnJvbSAnQHRhaWdhLXVpL2Nkay9vYnNlcnZhYmxlcyc7XG5pbXBvcnQge3R1aUluamVjdEVsZW1lbnR9IGZyb20gJ0B0YWlnYS11aS9jZGsvdXRpbHMvZG9tJztcbmltcG9ydCB7dHVpSXNGYWxzeX0gZnJvbSAnQHRhaWdhLXVpL2Nkay91dGlscy9taXNjZWxsYW5lb3VzJztcbmltcG9ydCB0eXBlIHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7ZGlzdGluY3RVbnRpbENoYW5nZWQsIGZpbHRlciwgbWVyZ2UsIHN0YXJ0V2l0aH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7VHVpU2hlZXRDb21wb25lbnR9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvc2hlZXQvc2hlZXQuY29tcG9uZW50JztcbmltcG9ydCB7VFVJX1NIRUVUX0NMT1NFfSBmcm9tICcuLi8uLi9jb21wb25lbnRzL3NoZWV0LWhlYWRpbmcvc2hlZXQtaGVhZGluZy5jb21wb25lbnQnO1xuaW1wb3J0IHtUVUlfU0hFRVRfRFJBR0dFRCwgVFVJX1NIRUVUX1NDUk9MTH0gZnJvbSAnLi4vLi4vc2hlZXQtdG9rZW5zJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICd0dWktc2hlZXRbY2xvc2VdJyxcbn0pXG5leHBvcnQgY2xhc3MgVHVpU2hlZXRDbG9zZURpcmVjdGl2ZSB7XG4gICAgcHJpdmF0ZSByZWFkb25seSB6b25lID0gaW5qZWN0KE5nWm9uZSk7XG4gICAgcHJpdmF0ZSByZWFkb25seSBkcmFnZ2VkJCA9IGluamVjdChUVUlfU0hFRVRfRFJBR0dFRCk7XG4gICAgcHJpdmF0ZSByZWFkb25seSBzY3JvbGwkID0gaW5qZWN0KFRVSV9TSEVFVF9TQ1JPTEwpO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgd2luID0gaW5qZWN0KFdBX1dJTkRPVyk7XG4gICAgcHJpdmF0ZSByZWFkb25seSBlbCA9IHR1aUluamVjdEVsZW1lbnQoKTtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHNoZWV0ID0gaW5qZWN0KFR1aVNoZWV0Q29tcG9uZW50KTtcblxuICAgIEBPdXRwdXQoKVxuICAgIHB1YmxpYyByZWFkb25seSBjbG9zZTogT2JzZXJ2YWJsZTx1bmtub3duPiA9IG1lcmdlKFxuICAgICAgICB0dWlUeXBlZEZyb21FdmVudCh0aGlzLmVsLCBUVUlfU0hFRVRfQ0xPU0UpLFxuICAgICAgICB0aGlzLmRyYWdnZWQkLnBpcGUoXG4gICAgICAgICAgICB0dWlJZk1hcCgoKSA9PiB0aGlzLnNjcm9sbCQucGlwZShzdGFydFdpdGgodGhpcy5lbC5zY3JvbGxUb3ApKSwgdHVpSXNGYWxzeSksXG4gICAgICAgICAgICBmaWx0ZXIoKHkpID0+IHRoaXMuc2hlZXQuaXRlbT8uY2xvc2VhYmxlICYmIHRoaXMuc2hvdWxkQ2xvc2UoeSkpLFxuICAgICAgICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKSxcbiAgICAgICAgICAgIHR1aVpvbmVmdWxsKHRoaXMuem9uZSksXG4gICAgICAgICksXG4gICAgKTtcblxuICAgIHByaXZhdGUgc2hvdWxkQ2xvc2Uoc2Nyb2xsVG9wOiBudW1iZXIpOiBib29sZWFuIHtcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gTWF0aC5taW4oXG4gICAgICAgICAgICB0aGlzLndpbi5pbm5lckhlaWdodCxcbiAgICAgICAgICAgIHRoaXMuZWwuc2Nyb2xsSGVpZ2h0IC0gdGhpcy53aW4uaW5uZXJIZWlnaHQsXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IG1pbiA9IE1hdGgubWluKGhlaWdodCwgdGhpcy5zaGVldC5zdG9wc1swXSB8fCBJbmZpbml0eSk7XG5cbiAgICAgICAgcmV0dXJuIHNjcm9sbFRvcCA8IG1pbiAvIDI7XG4gICAgfVxufVxuIl19