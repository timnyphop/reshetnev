import { Directive, inject, NgZone, Output } from '@angular/core';
import { WA_WINDOW } from '@ng-web-apis/common';
import { tuiIfMap, tuiTypedFromEvent, tuiZonefull } from '@taiga-ui/cdk/observables';
import { tuiInjectElement } from '@taiga-ui/cdk/utils/dom';
import { tuiIsFalsy } from '@taiga-ui/cdk/utils/miscellaneous';
import { distinctUntilChanged, filter, merge, startWith } from 'rxjs';
import { TuiSheetComponent } from '../../components/sheet/sheet.component';
import { TUI_SHEET_CLOSE } from '../../components/sheet-heading/sheet-heading.component';
import { TUI_SHEET_DRAGGED, TUI_SHEET_SCROLL } from '../../sheet-tokens';
import * as i0 from "@angular/core";
class TuiSheetCloseDirective {
    constructor() {
        this.zone = inject(NgZone);
        this.dragged$ = inject(TUI_SHEET_DRAGGED);
        this.scroll$ = inject(TUI_SHEET_SCROLL);
        this.win = inject(WA_WINDOW);
        this.el = tuiInjectElement();
        this.sheet = inject(TuiSheetComponent);
        this.close = merge(tuiTypedFromEvent(this.el, TUI_SHEET_CLOSE), this.dragged$.pipe(tuiIfMap(() => this.scroll$.pipe(startWith(this.el.scrollTop)), tuiIsFalsy), filter((y) => this.sheet.item?.closeable && this.shouldClose(y)), distinctUntilChanged(), tuiZonefull(this.zone)));
    }
    shouldClose(scrollTop) {
        const height = Math.min(this.win.innerHeight, this.el.scrollHeight - this.win.innerHeight);
        const min = Math.min(height, this.sheet.stops[0] || Infinity);
        return scrollTop < min / 2;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSheetCloseDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiSheetCloseDirective, selector: "tui-sheet[close]", outputs: { close: "close" }, ngImport: i0 }); }
}
export { TuiSheetCloseDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSheetCloseDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: false,
                    selector: 'tui-sheet[close]',
                }]
        }], propDecorators: { close: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hlZXQtY2xvc2UuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbGVnYWN5L2NvbXBvbmVudHMvc2hlZXQvZGlyZWN0aXZlcy9zaGVldC1jbG9zZS9zaGVldC1jbG9zZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNoRSxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFDOUMsT0FBTyxFQUFDLFFBQVEsRUFBRSxpQkFBaUIsRUFBRSxXQUFXLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUNuRixPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUN6RCxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sbUNBQW1DLENBQUM7QUFFN0QsT0FBTyxFQUFDLG9CQUFvQixFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBRXBFLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLHdDQUF3QyxDQUFDO0FBQ3pFLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSx3REFBd0QsQ0FBQztBQUN2RixPQUFPLEVBQUMsaUJBQWlCLEVBQUUsZ0JBQWdCLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQzs7QUFFdkUsTUFJYSxzQkFBc0I7SUFKbkM7UUFLcUIsU0FBSSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN0QixhQUFRLEdBQUcsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDckMsWUFBTyxHQUFHLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ25DLFFBQUcsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDeEIsT0FBRSxHQUFHLGdCQUFnQixFQUFFLENBQUM7UUFDeEIsVUFBSyxHQUFHLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBR25DLFVBQUssR0FBd0IsS0FBSyxDQUM5QyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLGVBQWUsQ0FBQyxFQUMzQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDZCxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxVQUFVLENBQUMsRUFDM0UsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxTQUFTLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNoRSxvQkFBb0IsRUFBRSxFQUN0QixXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUN6QixDQUNKLENBQUM7S0FXTDtJQVRXLFdBQVcsQ0FBQyxTQUFpQjtRQUNqQyxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUNuQixJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFDcEIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQzlDLENBQUM7UUFDRixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxRQUFRLENBQUMsQ0FBQztRQUU5RCxPQUFPLFNBQVMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBQy9CLENBQUM7K0dBM0JRLHNCQUFzQjttR0FBdEIsc0JBQXNCOztTQUF0QixzQkFBc0I7NEZBQXRCLHNCQUFzQjtrQkFKbEMsU0FBUzttQkFBQztvQkFDUCxVQUFVLEVBQUUsS0FBSztvQkFDakIsUUFBUSxFQUFFLGtCQUFrQjtpQkFDL0I7OEJBVW1CLEtBQUs7c0JBRHBCLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgaW5qZWN0LCBOZ1pvbmUsIE91dHB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1dBX1dJTkRPV30gZnJvbSAnQG5nLXdlYi1hcGlzL2NvbW1vbic7XG5pbXBvcnQge3R1aUlmTWFwLCB0dWlUeXBlZEZyb21FdmVudCwgdHVpWm9uZWZ1bGx9IGZyb20gJ0B0YWlnYS11aS9jZGsvb2JzZXJ2YWJsZXMnO1xuaW1wb3J0IHt0dWlJbmplY3RFbGVtZW50fSBmcm9tICdAdGFpZ2EtdWkvY2RrL3V0aWxzL2RvbSc7XG5pbXBvcnQge3R1aUlzRmFsc3l9IGZyb20gJ0B0YWlnYS11aS9jZGsvdXRpbHMvbWlzY2VsbGFuZW91cyc7XG5pbXBvcnQgdHlwZSB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge2Rpc3RpbmN0VW50aWxDaGFuZ2VkLCBmaWx0ZXIsIG1lcmdlLCBzdGFydFdpdGh9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQge1R1aVNoZWV0Q29tcG9uZW50fSBmcm9tICcuLi8uLi9jb21wb25lbnRzL3NoZWV0L3NoZWV0LmNvbXBvbmVudCc7XG5pbXBvcnQge1RVSV9TSEVFVF9DTE9TRX0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9zaGVldC1oZWFkaW5nL3NoZWV0LWhlYWRpbmcuY29tcG9uZW50JztcbmltcG9ydCB7VFVJX1NIRUVUX0RSQUdHRUQsIFRVSV9TSEVFVF9TQ1JPTEx9IGZyb20gJy4uLy4uL3NoZWV0LXRva2Vucyc7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHN0YW5kYWxvbmU6IGZhbHNlLFxuICAgIHNlbGVjdG9yOiAndHVpLXNoZWV0W2Nsb3NlXScsXG59KVxuZXhwb3J0IGNsYXNzIFR1aVNoZWV0Q2xvc2VEaXJlY3RpdmUge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgem9uZSA9IGluamVjdChOZ1pvbmUpO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZHJhZ2dlZCQgPSBpbmplY3QoVFVJX1NIRUVUX0RSQUdHRUQpO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgc2Nyb2xsJCA9IGluamVjdChUVUlfU0hFRVRfU0NST0xMKTtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHdpbiA9IGluamVjdChXQV9XSU5ET1cpO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZWwgPSB0dWlJbmplY3RFbGVtZW50KCk7XG4gICAgcHJpdmF0ZSByZWFkb25seSBzaGVldCA9IGluamVjdChUdWlTaGVldENvbXBvbmVudCk7XG5cbiAgICBAT3V0cHV0KClcbiAgICBwdWJsaWMgcmVhZG9ubHkgY2xvc2U6IE9ic2VydmFibGU8dW5rbm93bj4gPSBtZXJnZShcbiAgICAgICAgdHVpVHlwZWRGcm9tRXZlbnQodGhpcy5lbCwgVFVJX1NIRUVUX0NMT1NFKSxcbiAgICAgICAgdGhpcy5kcmFnZ2VkJC5waXBlKFxuICAgICAgICAgICAgdHVpSWZNYXAoKCkgPT4gdGhpcy5zY3JvbGwkLnBpcGUoc3RhcnRXaXRoKHRoaXMuZWwuc2Nyb2xsVG9wKSksIHR1aUlzRmFsc3kpLFxuICAgICAgICAgICAgZmlsdGVyKCh5KSA9PiB0aGlzLnNoZWV0Lml0ZW0/LmNsb3NlYWJsZSAmJiB0aGlzLnNob3VsZENsb3NlKHkpKSxcbiAgICAgICAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksXG4gICAgICAgICAgICB0dWlab25lZnVsbCh0aGlzLnpvbmUpLFxuICAgICAgICApLFxuICAgICk7XG5cbiAgICBwcml2YXRlIHNob3VsZENsb3NlKHNjcm9sbFRvcDogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IGhlaWdodCA9IE1hdGgubWluKFxuICAgICAgICAgICAgdGhpcy53aW4uaW5uZXJIZWlnaHQsXG4gICAgICAgICAgICB0aGlzLmVsLnNjcm9sbEhlaWdodCAtIHRoaXMud2luLmlubmVySGVpZ2h0LFxuICAgICAgICApO1xuICAgICAgICBjb25zdCBtaW4gPSBNYXRoLm1pbihoZWlnaHQsIHRoaXMuc2hlZXQuc3RvcHNbMF0gfHwgSW5maW5pdHkpO1xuXG4gICAgICAgIHJldHVybiBzY3JvbGxUb3AgPCBtaW4gLyAyO1xuICAgIH1cbn1cbiJdfQ==