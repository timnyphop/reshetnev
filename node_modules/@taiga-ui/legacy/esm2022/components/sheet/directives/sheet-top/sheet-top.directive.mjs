import { Directive, inject, Input } from '@angular/core';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { WA_WINDOW } from '@ng-web-apis/common';
import { tuiInjectElement } from '@taiga-ui/cdk/utils/dom';
import { tuiClamp } from '@taiga-ui/cdk/utils/math';
import { map } from 'rxjs';
import { TUI_SHEET, TUI_SHEET_SCROLL } from '../../sheet-tokens';
import * as i0 from "@angular/core";
// So that borders get rounded when image is visible for at least 10px
const OFFSET = 10;
class TuiSheetTopDirective {
    constructor() {
        this.scroll$ = inject(TUI_SHEET_SCROLL);
        this.component = inject(TUI_SHEET);
        this.win = inject(WA_WINDOW);
        this.el = tuiInjectElement();
        this.rounded$ = this.scroll$
            .pipe(map((y) => y < this.stop + OFFSET))
            .pipe(takeUntilDestroyed())
            .subscribe((add) => add
            ? this.el.classList.add('_rounded')
            : this.el.classList.remove('_rounded'));
        this.transform$ = this.scroll$
            .pipe(map((y) => `translateY(${this.getY(y)}%) scaleX(-1)`), takeUntilDestroyed())
            .subscribe((transform) => this.el.style.setProperty('transform', transform));
        this.clickthrough$ = this.scroll$
            .pipe(map((y) => !!Math.round(this.getY(y))), takeUntilDestroyed())
            .subscribe((add) => add
            ? this.el.classList.add('_clickthrough')
            : this.el.classList.remove('_clickthrough'));
        this.stop = 0;
    }
    getY(scrollTop) {
        const value = scrollTop - this.stop;
        const total = this.win.innerHeight - this.component.item.offset - this.stop;
        return this.stop && tuiClamp(100 - (value / total) * 100, 0, 100);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSheetTopDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiSheetTopDirective, selector: "[tuiSheetTop]", inputs: { stop: ["tuiSheetTop", "stop"] }, ngImport: i0 }); }
}
export { TuiSheetTopDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSheetTopDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiSheetTop]',
                }]
        }], propDecorators: { stop: [{
                type: Input,
                args: ['tuiSheetTop']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hlZXQtdG9wLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2xlZ2FjeS9jb21wb25lbnRzL3NoZWV0L2RpcmVjdGl2ZXMvc2hlZXQtdG9wL3NoZWV0LXRvcC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3ZELE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLDRCQUE0QixDQUFDO0FBQzlELE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUM5QyxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUN6RCxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDbEQsT0FBTyxFQUFDLEdBQUcsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUV6QixPQUFPLEVBQUMsU0FBUyxFQUFFLGdCQUFnQixFQUFDLE1BQU0sb0JBQW9CLENBQUM7O0FBRS9ELHNFQUFzRTtBQUN0RSxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUM7QUFFbEIsTUFHYSxvQkFBb0I7SUFIakM7UUFJcUIsWUFBTyxHQUFHLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ25DLGNBQVMsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDOUIsUUFBRyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN4QixPQUFFLEdBQUcsZ0JBQWdCLEVBQUUsQ0FBQztRQUV0QixhQUFRLEdBQUcsSUFBSSxDQUFDLE9BQU87YUFDckMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLENBQUM7YUFDeEMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7YUFDMUIsU0FBUyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FDZixHQUFHO1lBQ0MsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUM7WUFDbkMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FDN0MsQ0FBQztRQUVhLGVBQVUsR0FBRyxJQUFJLENBQUMsT0FBTzthQUN2QyxJQUFJLENBQ0QsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxjQUFjLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxFQUNyRCxrQkFBa0IsRUFBRSxDQUN2QjthQUNBLFNBQVMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLFdBQVcsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBRTlELGtCQUFhLEdBQUcsSUFBSSxDQUFDLE9BQU87YUFDMUMsSUFBSSxDQUNELEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ3RDLGtCQUFrQixFQUFFLENBQ3ZCO2FBQ0EsU0FBUyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FDZixHQUFHO1lBQ0MsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUM7WUFDeEMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FDbEQsQ0FBQztRQUdDLFNBQUksR0FBRyxDQUFDLENBQUM7S0FRbkI7SUFOVyxJQUFJLENBQUMsU0FBaUI7UUFDMUIsTUFBTSxLQUFLLEdBQUcsU0FBUyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDcEMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFFNUUsT0FBTyxJQUFJLENBQUMsSUFBSSxJQUFJLFFBQVEsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUN0RSxDQUFDOytHQXpDUSxvQkFBb0I7bUdBQXBCLG9CQUFvQjs7U0FBcEIsb0JBQW9COzRGQUFwQixvQkFBb0I7a0JBSGhDLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLGVBQWU7aUJBQzVCOzhCQW1DVSxJQUFJO3NCQURWLEtBQUs7dUJBQUMsYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBpbmplY3QsIElucHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7dGFrZVVudGlsRGVzdHJveWVkfSBmcm9tICdAYW5ndWxhci9jb3JlL3J4anMtaW50ZXJvcCc7XG5pbXBvcnQge1dBX1dJTkRPV30gZnJvbSAnQG5nLXdlYi1hcGlzL2NvbW1vbic7XG5pbXBvcnQge3R1aUluamVjdEVsZW1lbnR9IGZyb20gJ0B0YWlnYS11aS9jZGsvdXRpbHMvZG9tJztcbmltcG9ydCB7dHVpQ2xhbXB9IGZyb20gJ0B0YWlnYS11aS9jZGsvdXRpbHMvbWF0aCc7XG5pbXBvcnQge21hcH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7VFVJX1NIRUVULCBUVUlfU0hFRVRfU0NST0xMfSBmcm9tICcuLi8uLi9zaGVldC10b2tlbnMnO1xuXG4vLyBTbyB0aGF0IGJvcmRlcnMgZ2V0IHJvdW5kZWQgd2hlbiBpbWFnZSBpcyB2aXNpYmxlIGZvciBhdCBsZWFzdCAxMHB4XG5jb25zdCBPRkZTRVQgPSAxMDtcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbdHVpU2hlZXRUb3BdJyxcbn0pXG5leHBvcnQgY2xhc3MgVHVpU2hlZXRUb3BEaXJlY3RpdmUge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgc2Nyb2xsJCA9IGluamVjdChUVUlfU0hFRVRfU0NST0xMKTtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGNvbXBvbmVudCA9IGluamVjdChUVUlfU0hFRVQpO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgd2luID0gaW5qZWN0KFdBX1dJTkRPVyk7XG4gICAgcHJpdmF0ZSByZWFkb25seSBlbCA9IHR1aUluamVjdEVsZW1lbnQoKTtcblxuICAgIHByb3RlY3RlZCByZWFkb25seSByb3VuZGVkJCA9IHRoaXMuc2Nyb2xsJFxuICAgICAgICAucGlwZShtYXAoKHkpID0+IHkgPCB0aGlzLnN0b3AgKyBPRkZTRVQpKVxuICAgICAgICAucGlwZSh0YWtlVW50aWxEZXN0cm95ZWQoKSlcbiAgICAgICAgLnN1YnNjcmliZSgoYWRkKSA9PlxuICAgICAgICAgICAgYWRkXG4gICAgICAgICAgICAgICAgPyB0aGlzLmVsLmNsYXNzTGlzdC5hZGQoJ19yb3VuZGVkJylcbiAgICAgICAgICAgICAgICA6IHRoaXMuZWwuY2xhc3NMaXN0LnJlbW92ZSgnX3JvdW5kZWQnKSxcbiAgICAgICAgKTtcblxuICAgIHByb3RlY3RlZCByZWFkb25seSB0cmFuc2Zvcm0kID0gdGhpcy5zY3JvbGwkXG4gICAgICAgIC5waXBlKFxuICAgICAgICAgICAgbWFwKCh5KSA9PiBgdHJhbnNsYXRlWSgke3RoaXMuZ2V0WSh5KX0lKSBzY2FsZVgoLTEpYCksXG4gICAgICAgICAgICB0YWtlVW50aWxEZXN0cm95ZWQoKSxcbiAgICAgICAgKVxuICAgICAgICAuc3Vic2NyaWJlKCh0cmFuc2Zvcm0pID0+IHRoaXMuZWwuc3R5bGUuc2V0UHJvcGVydHkoJ3RyYW5zZm9ybScsIHRyYW5zZm9ybSkpO1xuXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGNsaWNrdGhyb3VnaCQgPSB0aGlzLnNjcm9sbCRcbiAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICBtYXAoKHkpID0+ICEhTWF0aC5yb3VuZCh0aGlzLmdldFkoeSkpKSxcbiAgICAgICAgICAgIHRha2VVbnRpbERlc3Ryb3llZCgpLFxuICAgICAgICApXG4gICAgICAgIC5zdWJzY3JpYmUoKGFkZCkgPT5cbiAgICAgICAgICAgIGFkZFxuICAgICAgICAgICAgICAgID8gdGhpcy5lbC5jbGFzc0xpc3QuYWRkKCdfY2xpY2t0aHJvdWdoJylcbiAgICAgICAgICAgICAgICA6IHRoaXMuZWwuY2xhc3NMaXN0LnJlbW92ZSgnX2NsaWNrdGhyb3VnaCcpLFxuICAgICAgICApO1xuXG4gICAgQElucHV0KCd0dWlTaGVldFRvcCcpXG4gICAgcHVibGljIHN0b3AgPSAwO1xuXG4gICAgcHJpdmF0ZSBnZXRZKHNjcm9sbFRvcDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBzY3JvbGxUb3AgLSB0aGlzLnN0b3A7XG4gICAgICAgIGNvbnN0IHRvdGFsID0gdGhpcy53aW4uaW5uZXJIZWlnaHQgLSB0aGlzLmNvbXBvbmVudC5pdGVtLm9mZnNldCAtIHRoaXMuc3RvcDtcblxuICAgICAgICByZXR1cm4gdGhpcy5zdG9wICYmIHR1aUNsYW1wKDEwMCAtICh2YWx1ZSAvIHRvdGFsKSAqIDEwMCwgMCwgMTAwKTtcbiAgICB9XG59XG4iXX0=