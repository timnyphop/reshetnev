import { __decorate } from "tslib";
import { ContentChild, Directive, inject, Input, NgZone } from '@angular/core';
import { WA_WINDOW } from '@ng-web-apis/common';
import { TUI_FALSE_HANDLER } from '@taiga-ui/cdk/constants';
import { tuiZonefull } from '@taiga-ui/cdk/observables';
import { tuiClamp } from '@taiga-ui/cdk/utils/math';
import { tuiIsFalsy, tuiPure } from '@taiga-ui/cdk/utils/miscellaneous';
import { debounceTime, distinctUntilChanged, filter, map, race, startWith, switchMap, take, timer, } from 'rxjs';
import { TuiSheetComponent } from '../../components/sheet/sheet.component';
import { TUI_SHEET_DRAGGED, TUI_SHEET_SCROLL } from '../../sheet-tokens';
import * as i0 from "@angular/core";
// Safety offset for shadow
const OFFSET = 16;
function processDragged(dragged$, scroll$) {
    const touchstart$ = dragged$.pipe(filter(Boolean));
    const touchend$ = dragged$.pipe(filter(tuiIsFalsy));
    const race$ = race(scroll$, timer(100)).pipe(debounceTime(200), take(1), map(TUI_FALSE_HANDLER));
    return touchstart$.pipe(switchMap(() => touchend$.pipe(switchMap(() => race$), startWith(true))), startWith(false));
}
class TuiSheetWrapperDirective {
    constructor() {
        this.zone = inject(NgZone);
        this.win = inject(WA_WINDOW);
        this.tuiSheetWrapper = 16;
    }
    get overlay$() {
        return this.scroll$.pipe(map((y) => y + 16 > this.win.innerHeight - this.tuiSheetWrapper), distinctUntilChanged(), tuiZonefull(this.zone));
    }
    get visible$() {
        return processDragged(this.dragged$, this.scroll$).pipe(distinctUntilChanged(), tuiZonefull(this.zone));
    }
    get height$() {
        return this.scroll$.pipe(map(this.getHeight.bind(this)));
    }
    getHeight(value) {
        return this.sheet?.context.overlay
            ? null
            : tuiClamp(this.withImage(value) + OFFSET, OFFSET, this.win.innerHeight);
    }
    withImage(value) {
        return !this.sheet?.imageStop || Math.floor(value) > this.sheet.imageStop
            ? value
            : value - this.sheet.imageHeight;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSheetWrapperDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiSheetWrapperDirective, selector: "[tuiSheetWrapper]", inputs: { tuiSheetWrapper: "tuiSheetWrapper" }, queries: [{ propertyName: "sheet", first: true, predicate: TuiSheetComponent, descendants: true }, { propertyName: "dragged$", first: true, predicate: TuiSheetComponent, descendants: true, read: TUI_SHEET_DRAGGED, static: true }, { propertyName: "scroll$", first: true, predicate: TuiSheetComponent, descendants: true, read: TUI_SHEET_SCROLL, static: true }], exportAs: ["tuiSheetWrapper"], ngImport: i0 }); }
}
__decorate([
    tuiPure
], TuiSheetWrapperDirective.prototype, "overlay$", null);
__decorate([
    tuiPure
], TuiSheetWrapperDirective.prototype, "visible$", null);
__decorate([
    tuiPure
], TuiSheetWrapperDirective.prototype, "height$", null);
export { TuiSheetWrapperDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSheetWrapperDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiSheetWrapper]',
                    exportAs: 'tuiSheetWrapper',
                }]
        }], propDecorators: { sheet: [{
                type: ContentChild,
                args: [TuiSheetComponent]
            }], dragged$: [{
                type: ContentChild,
                args: [TuiSheetComponent, { read: TUI_SHEET_DRAGGED, static: true }]
            }], scroll$: [{
                type: ContentChild,
                args: [TuiSheetComponent, { read: TUI_SHEET_SCROLL, static: true }]
            }], tuiSheetWrapper: [{
                type: Input
            }], overlay$: [], visible$: [], height$: [] } });
//# sourceMappingURL=data:application/json;base64,