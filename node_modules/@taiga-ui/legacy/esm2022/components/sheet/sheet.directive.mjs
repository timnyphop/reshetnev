import { Directive, inject, Input, Output } from '@angular/core';
import { tuiIfMap } from '@taiga-ui/cdk/observables';
import { PolymorpheusTemplate } from '@taiga-ui/polymorpheus';
import { endWith, ignoreElements, share, Subject } from 'rxjs';
import { TuiSheetService } from './sheet.service';
import * as i0 from "@angular/core";
/**
 * @deprecated: use {@link TuiSheetDialog}
 * https://taiga-ui.dev/components/sheet-dialog
 */
class TuiSheetDirective extends PolymorpheusTemplate {
    constructor() {
        super(...arguments);
        this.service = inject(TuiSheetService);
        this.open$ = new Subject();
        this.options = {};
        this.tuiSheetChange = this.open$.pipe(tuiIfMap(() => this.service.open(this, this.options).pipe(ignoreElements(), endWith(false))), share());
    }
    set tuiSheet(open) {
        this.open$.next(open);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSheetDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiSheetDirective, selector: "ng-template[tuiSheet]", inputs: { options: ["tuiSheetOptions", "options"], tuiSheet: "tuiSheet" }, outputs: { tuiSheetChange: "tuiSheetChange" }, usesInheritance: true, ngImport: i0 }); }
}
export { TuiSheetDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSheetDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ng-template[tuiSheet]',
                }]
        }], propDecorators: { options: [{
                type: Input,
                args: ['tuiSheetOptions']
            }], tuiSheetChange: [{
                type: Output
            }], tuiSheet: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hlZXQuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbGVnYWN5L2NvbXBvbmVudHMvc2hlZXQvc2hlZXQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDL0QsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBQ25ELE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLHdCQUF3QixDQUFDO0FBQzVELE9BQU8sRUFBQyxPQUFPLEVBQUUsY0FBYyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFHN0QsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLGlCQUFpQixDQUFDOztBQUdoRDs7O0dBR0c7QUFDSCxNQUdhLGlCQUFrQixTQUFRLG9CQUFxQztJQUg1RTs7UUFJcUIsWUFBTyxHQUFHLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUNsQyxVQUFLLEdBQUcsSUFBSSxPQUFPLEVBQVcsQ0FBQztRQUd6QyxZQUFPLEdBQTZCLEVBQUUsQ0FBQztRQUc5QixtQkFBYyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUM1QyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQ1YsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQy9FLEVBQ0QsS0FBSyxFQUFFLENBQ1YsQ0FBQztLQU1MO0lBSkcsSUFDVyxRQUFRLENBQUMsSUFBYTtRQUM3QixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMxQixDQUFDOytHQWxCUSxpQkFBaUI7bUdBQWpCLGlCQUFpQjs7U0FBakIsaUJBQWlCOzRGQUFqQixpQkFBaUI7a0JBSDdCLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLHVCQUF1QjtpQkFDcEM7OEJBTVUsT0FBTztzQkFEYixLQUFLO3VCQUFDLGlCQUFpQjtnQkFJUixjQUFjO3NCQUQ3QixNQUFNO2dCQVNJLFFBQVE7c0JBRGxCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgaW5qZWN0LCBJbnB1dCwgT3V0cHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7dHVpSWZNYXB9IGZyb20gJ0B0YWlnYS11aS9jZGsvb2JzZXJ2YWJsZXMnO1xuaW1wb3J0IHtQb2x5bW9ycGhldXNUZW1wbGF0ZX0gZnJvbSAnQHRhaWdhLXVpL3BvbHltb3JwaGV1cyc7XG5pbXBvcnQge2VuZFdpdGgsIGlnbm9yZUVsZW1lbnRzLCBzaGFyZSwgU3ViamVjdH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB0eXBlIHtUdWlTaGVldH0gZnJvbSAnLi9zaGVldCc7XG5pbXBvcnQge1R1aVNoZWV0U2VydmljZX0gZnJvbSAnLi9zaGVldC5zZXJ2aWNlJztcbmltcG9ydCB0eXBlIHtUdWlTaGVldE9wdGlvbnN9IGZyb20gJy4vc2hlZXQtb3B0aW9ucyc7XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQ6IHVzZSB7QGxpbmsgVHVpU2hlZXREaWFsb2d9XG4gKiBodHRwczovL3RhaWdhLXVpLmRldi9jb21wb25lbnRzL3NoZWV0LWRpYWxvZ1xuICovXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ25nLXRlbXBsYXRlW3R1aVNoZWV0XScsXG59KVxuZXhwb3J0IGNsYXNzIFR1aVNoZWV0RGlyZWN0aXZlIGV4dGVuZHMgUG9seW1vcnBoZXVzVGVtcGxhdGU8VHVpU2hlZXQ8bmV2ZXI+PiB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBzZXJ2aWNlID0gaW5qZWN0KFR1aVNoZWV0U2VydmljZSk7XG4gICAgcHJpdmF0ZSByZWFkb25seSBvcGVuJCA9IG5ldyBTdWJqZWN0PGJvb2xlYW4+KCk7XG5cbiAgICBASW5wdXQoJ3R1aVNoZWV0T3B0aW9ucycpXG4gICAgcHVibGljIG9wdGlvbnM6IFBhcnRpYWw8VHVpU2hlZXRPcHRpb25zPiA9IHt9O1xuXG4gICAgQE91dHB1dCgpXG4gICAgcHVibGljIHJlYWRvbmx5IHR1aVNoZWV0Q2hhbmdlID0gdGhpcy5vcGVuJC5waXBlKFxuICAgICAgICB0dWlJZk1hcCgoKSA9PlxuICAgICAgICAgICAgdGhpcy5zZXJ2aWNlLm9wZW4odGhpcywgdGhpcy5vcHRpb25zKS5waXBlKGlnbm9yZUVsZW1lbnRzKCksIGVuZFdpdGgoZmFsc2UpKSxcbiAgICAgICAgKSxcbiAgICAgICAgc2hhcmUoKSxcbiAgICApO1xuXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgc2V0IHR1aVNoZWV0KG9wZW46IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5vcGVuJC5uZXh0KG9wZW4pO1xuICAgIH1cbn1cbiJdfQ==