import { Directive, inject, Input, Output } from '@angular/core';
import { tuiIfMap } from '@taiga-ui/cdk/observables';
import { PolymorpheusTemplate } from '@taiga-ui/polymorpheus';
import { endWith, ignoreElements, share, Subject } from 'rxjs';
import { TuiSheetService } from './sheet.service';
import * as i0 from "@angular/core";
/**
 * @deprecated: use {@link TuiSheetDialog}
 * https://taiga-ui.dev/components/sheet-dialog
 */
class TuiSheetDirective extends PolymorpheusTemplate {
    constructor() {
        super(...arguments);
        this.service = inject(TuiSheetService);
        this.open$ = new Subject();
        this.options = {};
        this.tuiSheetChange = this.open$.pipe(tuiIfMap(() => this.service.open(this, this.options).pipe(ignoreElements(), endWith(false))), share());
    }
    set tuiSheet(open) {
        this.open$.next(open);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSheetDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiSheetDirective, selector: "ng-template[tuiSheet]", inputs: { options: ["tuiSheetOptions", "options"], tuiSheet: "tuiSheet" }, outputs: { tuiSheetChange: "tuiSheetChange" }, usesInheritance: true, ngImport: i0 }); }
}
export { TuiSheetDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSheetDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: false,
                    selector: 'ng-template[tuiSheet]',
                }]
        }], propDecorators: { options: [{
                type: Input,
                args: ['tuiSheetOptions']
            }], tuiSheetChange: [{
                type: Output
            }], tuiSheet: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hlZXQuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbGVnYWN5L2NvbXBvbmVudHMvc2hlZXQvc2hlZXQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDL0QsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBQ25ELE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLHdCQUF3QixDQUFDO0FBQzVELE9BQU8sRUFBQyxPQUFPLEVBQUUsY0FBYyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFHN0QsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLGlCQUFpQixDQUFDOztBQUdoRDs7O0dBR0c7QUFDSCxNQUlhLGlCQUFrQixTQUFRLG9CQUFxQztJQUo1RTs7UUFLcUIsWUFBTyxHQUFHLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUNsQyxVQUFLLEdBQUcsSUFBSSxPQUFPLEVBQVcsQ0FBQztRQUd6QyxZQUFPLEdBQTZCLEVBQUUsQ0FBQztRQUc5QixtQkFBYyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUM1QyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQ1YsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQy9FLEVBQ0QsS0FBSyxFQUFFLENBQ1YsQ0FBQztLQU1MO0lBSkcsSUFDVyxRQUFRLENBQUMsSUFBYTtRQUM3QixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMxQixDQUFDOytHQWxCUSxpQkFBaUI7bUdBQWpCLGlCQUFpQjs7U0FBakIsaUJBQWlCOzRGQUFqQixpQkFBaUI7a0JBSjdCLFNBQVM7bUJBQUM7b0JBQ1AsVUFBVSxFQUFFLEtBQUs7b0JBQ2pCLFFBQVEsRUFBRSx1QkFBdUI7aUJBQ3BDOzhCQU1VLE9BQU87c0JBRGIsS0FBSzt1QkFBQyxpQkFBaUI7Z0JBSVIsY0FBYztzQkFEN0IsTUFBTTtnQkFTSSxRQUFRO3NCQURsQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIGluamVjdCwgSW5wdXQsIE91dHB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge3R1aUlmTWFwfSBmcm9tICdAdGFpZ2EtdWkvY2RrL29ic2VydmFibGVzJztcbmltcG9ydCB7UG9seW1vcnBoZXVzVGVtcGxhdGV9IGZyb20gJ0B0YWlnYS11aS9wb2x5bW9ycGhldXMnO1xuaW1wb3J0IHtlbmRXaXRoLCBpZ25vcmVFbGVtZW50cywgc2hhcmUsIFN1YmplY3R9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgdHlwZSB7VHVpU2hlZXR9IGZyb20gJy4vc2hlZXQnO1xuaW1wb3J0IHtUdWlTaGVldFNlcnZpY2V9IGZyb20gJy4vc2hlZXQuc2VydmljZSc7XG5pbXBvcnQgdHlwZSB7VHVpU2hlZXRPcHRpb25zfSBmcm9tICcuL3NoZWV0LW9wdGlvbnMnO1xuXG4vKipcbiAqIEBkZXByZWNhdGVkOiB1c2Uge0BsaW5rIFR1aVNoZWV0RGlhbG9nfVxuICogaHR0cHM6Ly90YWlnYS11aS5kZXYvY29tcG9uZW50cy9zaGVldC1kaWFsb2dcbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgc3RhbmRhbG9uZTogZmFsc2UsXG4gICAgc2VsZWN0b3I6ICduZy10ZW1wbGF0ZVt0dWlTaGVldF0nLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlTaGVldERpcmVjdGl2ZSBleHRlbmRzIFBvbHltb3JwaGV1c1RlbXBsYXRlPFR1aVNoZWV0PG5ldmVyPj4ge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgc2VydmljZSA9IGluamVjdChUdWlTaGVldFNlcnZpY2UpO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgb3BlbiQgPSBuZXcgU3ViamVjdDxib29sZWFuPigpO1xuXG4gICAgQElucHV0KCd0dWlTaGVldE9wdGlvbnMnKVxuICAgIHB1YmxpYyBvcHRpb25zOiBQYXJ0aWFsPFR1aVNoZWV0T3B0aW9ucz4gPSB7fTtcblxuICAgIEBPdXRwdXQoKVxuICAgIHB1YmxpYyByZWFkb25seSB0dWlTaGVldENoYW5nZSA9IHRoaXMub3BlbiQucGlwZShcbiAgICAgICAgdHVpSWZNYXAoKCkgPT5cbiAgICAgICAgICAgIHRoaXMuc2VydmljZS5vcGVuKHRoaXMsIHRoaXMub3B0aW9ucykucGlwZShpZ25vcmVFbGVtZW50cygpLCBlbmRXaXRoKGZhbHNlKSksXG4gICAgICAgICksXG4gICAgICAgIHNoYXJlKCksXG4gICAgKTtcblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIHNldCB0dWlTaGVldChvcGVuOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMub3BlbiQubmV4dChvcGVuKTtcbiAgICB9XG59XG4iXX0=