const countDigits = (value) => value.replaceAll(/\D/g, '').length;
/**
 * `InputPhone` component sets country code as non-removable prefix.
 * This prefix appears on focus and cannot be erased.
 * But users sometimes can copy complete phone number (from any different source)
 * and try to insert the whole string inside our `InputPhone` textfield.
 * This preprocessor helps to avoid country prefix duplication on paste/drop/autofill events.
 */
export function tuiCreateCompletePhoneInsertionPreprocessor(countryCode, phoneMaskAfterCountryCode) {
    const completePhoneLength = (countryCode + phoneMaskAfterCountryCode).replaceAll(/[^#\d]+/g, '').length;
    const trimCountryPrefix = (value) => countryCode === '+7'
        ? value.replace(/^(\+?7?\s?8?)\s?/, '')
        : value.replace(new RegExp(`^(\\+?${countryCode.replace('+', '')}?)\\s?`), '');
    return ({ elementState, data }) => {
        const { value, selection } = elementState;
        return {
            elementState: {
                selection,
                value: 
                /**
                 * The only possible case when `value` includes digits more
                 * than mask expression allows â€“ browser autofill.
                 * It means that we are inside `input`-event
                 * and mask are ready to reject "extra" characters.
                 * We should cut leading country prefix to save trailing characters!
                 */
                countDigits(value) > completePhoneLength
                    ? trimCountryPrefix(value)
                    : value,
            },
            data: countDigits(data) >= completePhoneLength
                ? /**
                   * User tries to insert/drop the complete phone number (with country prefix).
                   * We should drop already existing non-removable prefix.
                   */
                    trimCountryPrefix(data)
                : data,
        };
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGxldGUtcGhvbmUtaW5zZXJ0aW9uLXByZXByb2Nlc3Nvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2xlZ2FjeS9jb21wb25lbnRzL2lucHV0LXBob25lL3V0aWxzL2NvbXBsZXRlLXBob25lLWluc2VydGlvbi1wcmVwcm9jZXNzb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxXQUFXLEdBQUcsQ0FBQyxLQUFhLEVBQVUsRUFBRSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQztBQUVsRjs7Ozs7O0dBTUc7QUFDSCxNQUFNLFVBQVUsMkNBQTJDLENBQ3ZELFdBQW1CLEVBQ25CLHlCQUFpQztJQUVqQyxNQUFNLG1CQUFtQixHQUFHLENBQUMsV0FBVyxHQUFHLHlCQUF5QixDQUFDLENBQUMsVUFBVSxDQUM1RSxVQUFVLEVBQ1YsRUFBRSxDQUNMLENBQUMsTUFBTSxDQUFDO0lBRVQsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLEtBQWEsRUFBVSxFQUFFLENBQ2hELFdBQVcsS0FBSyxJQUFJO1FBQ2hCLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLGtCQUFrQixFQUFFLEVBQUUsQ0FBQztRQUN2QyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FDVCxJQUFJLE1BQU0sQ0FBQyxTQUFTLFdBQVcsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFDekQsRUFBRSxDQUNMLENBQUM7SUFFWixPQUFPLENBQUMsRUFBQyxZQUFZLEVBQUUsSUFBSSxFQUFDLEVBQUUsRUFBRTtRQUM1QixNQUFNLEVBQUMsS0FBSyxFQUFFLFNBQVMsRUFBQyxHQUFHLFlBQVksQ0FBQztRQUV4QyxPQUFPO1lBQ0gsWUFBWSxFQUFFO2dCQUNWLFNBQVM7Z0JBQ1QsS0FBSztnQkFDRDs7Ozs7O21CQU1HO2dCQUNILFdBQVcsQ0FBQyxLQUFLLENBQUMsR0FBRyxtQkFBbUI7b0JBQ3BDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUM7b0JBQzFCLENBQUMsQ0FBQyxLQUFLO2FBQ2xCO1lBQ0QsSUFBSSxFQUNBLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxtQkFBbUI7Z0JBQ3BDLENBQUMsQ0FBQzs7O3FCQUdHO29CQUNILGlCQUFpQixDQUFDLElBQUksQ0FBQztnQkFDekIsQ0FBQyxDQUFDLElBQUk7U0FDakIsQ0FBQztJQUNOLENBQUMsQ0FBQztBQUNOLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7TWFza2l0b1ByZXByb2Nlc3Nvcn0gZnJvbSAnQG1hc2tpdG8vY29yZSc7XG5cbmNvbnN0IGNvdW50RGlnaXRzID0gKHZhbHVlOiBzdHJpbmcpOiBudW1iZXIgPT4gdmFsdWUucmVwbGFjZUFsbCgvXFxEL2csICcnKS5sZW5ndGg7XG5cbi8qKlxuICogYElucHV0UGhvbmVgIGNvbXBvbmVudCBzZXRzIGNvdW50cnkgY29kZSBhcyBub24tcmVtb3ZhYmxlIHByZWZpeC5cbiAqIFRoaXMgcHJlZml4IGFwcGVhcnMgb24gZm9jdXMgYW5kIGNhbm5vdCBiZSBlcmFzZWQuXG4gKiBCdXQgdXNlcnMgc29tZXRpbWVzIGNhbiBjb3B5IGNvbXBsZXRlIHBob25lIG51bWJlciAoZnJvbSBhbnkgZGlmZmVyZW50IHNvdXJjZSlcbiAqIGFuZCB0cnkgdG8gaW5zZXJ0IHRoZSB3aG9sZSBzdHJpbmcgaW5zaWRlIG91ciBgSW5wdXRQaG9uZWAgdGV4dGZpZWxkLlxuICogVGhpcyBwcmVwcm9jZXNzb3IgaGVscHMgdG8gYXZvaWQgY291bnRyeSBwcmVmaXggZHVwbGljYXRpb24gb24gcGFzdGUvZHJvcC9hdXRvZmlsbCBldmVudHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0dWlDcmVhdGVDb21wbGV0ZVBob25lSW5zZXJ0aW9uUHJlcHJvY2Vzc29yKFxuICAgIGNvdW50cnlDb2RlOiBzdHJpbmcsXG4gICAgcGhvbmVNYXNrQWZ0ZXJDb3VudHJ5Q29kZTogc3RyaW5nLFxuKTogTWFza2l0b1ByZXByb2Nlc3NvciB7XG4gICAgY29uc3QgY29tcGxldGVQaG9uZUxlbmd0aCA9IChjb3VudHJ5Q29kZSArIHBob25lTWFza0FmdGVyQ291bnRyeUNvZGUpLnJlcGxhY2VBbGwoXG4gICAgICAgIC9bXiNcXGRdKy9nLFxuICAgICAgICAnJyxcbiAgICApLmxlbmd0aDtcblxuICAgIGNvbnN0IHRyaW1Db3VudHJ5UHJlZml4ID0gKHZhbHVlOiBzdHJpbmcpOiBzdHJpbmcgPT5cbiAgICAgICAgY291bnRyeUNvZGUgPT09ICcrNydcbiAgICAgICAgICAgID8gdmFsdWUucmVwbGFjZSgvXihcXCs/Nz9cXHM/OD8pXFxzPy8sICcnKVxuICAgICAgICAgICAgOiB2YWx1ZS5yZXBsYWNlKFxuICAgICAgICAgICAgICAgICAgbmV3IFJlZ0V4cChgXihcXFxcKz8ke2NvdW50cnlDb2RlLnJlcGxhY2UoJysnLCAnJyl9PylcXFxccz9gKSxcbiAgICAgICAgICAgICAgICAgICcnLFxuICAgICAgICAgICAgICApO1xuXG4gICAgcmV0dXJuICh7ZWxlbWVudFN0YXRlLCBkYXRhfSkgPT4ge1xuICAgICAgICBjb25zdCB7dmFsdWUsIHNlbGVjdGlvbn0gPSBlbGVtZW50U3RhdGU7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGVsZW1lbnRTdGF0ZToge1xuICAgICAgICAgICAgICAgIHNlbGVjdGlvbixcbiAgICAgICAgICAgICAgICB2YWx1ZTpcbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIFRoZSBvbmx5IHBvc3NpYmxlIGNhc2Ugd2hlbiBgdmFsdWVgIGluY2x1ZGVzIGRpZ2l0cyBtb3JlXG4gICAgICAgICAgICAgICAgICAgICAqIHRoYW4gbWFzayBleHByZXNzaW9uIGFsbG93cyDigJMgYnJvd3NlciBhdXRvZmlsbC5cbiAgICAgICAgICAgICAgICAgICAgICogSXQgbWVhbnMgdGhhdCB3ZSBhcmUgaW5zaWRlIGBpbnB1dGAtZXZlbnRcbiAgICAgICAgICAgICAgICAgICAgICogYW5kIG1hc2sgYXJlIHJlYWR5IHRvIHJlamVjdCBcImV4dHJhXCIgY2hhcmFjdGVycy5cbiAgICAgICAgICAgICAgICAgICAgICogV2Ugc2hvdWxkIGN1dCBsZWFkaW5nIGNvdW50cnkgcHJlZml4IHRvIHNhdmUgdHJhaWxpbmcgY2hhcmFjdGVycyFcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIGNvdW50RGlnaXRzKHZhbHVlKSA+IGNvbXBsZXRlUGhvbmVMZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgICAgID8gdHJpbUNvdW50cnlQcmVmaXgodmFsdWUpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHZhbHVlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGE6XG4gICAgICAgICAgICAgICAgY291bnREaWdpdHMoZGF0YSkgPj0gY29tcGxldGVQaG9uZUxlbmd0aFxuICAgICAgICAgICAgICAgICAgICA/IC8qKlxuICAgICAgICAgICAgICAgICAgICAgICAqIFVzZXIgdHJpZXMgdG8gaW5zZXJ0L2Ryb3AgdGhlIGNvbXBsZXRlIHBob25lIG51bWJlciAod2l0aCBjb3VudHJ5IHByZWZpeCkuXG4gICAgICAgICAgICAgICAgICAgICAgICogV2Ugc2hvdWxkIGRyb3AgYWxyZWFkeSBleGlzdGluZyBub24tcmVtb3ZhYmxlIHByZWZpeC5cbiAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgICB0cmltQ291bnRyeVByZWZpeChkYXRhKVxuICAgICAgICAgICAgICAgICAgICA6IGRhdGEsXG4gICAgICAgIH07XG4gICAgfTtcbn1cbiJdfQ==