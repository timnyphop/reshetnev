import { ChangeDetectionStrategy, Component, inject } from '@angular/core';
import { tuiInjectId } from '@taiga-ui/cdk/services';
import { TUI_TEXTFIELD_HOST } from '@taiga-ui/legacy/tokens';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
class TuiNativeTimeComponent {
    constructor() {
        this.host = inject(TUI_TEXTFIELD_HOST);
        this.autoId = tuiInjectId();
    }
    get items() {
        return this.host.items.map((item) => item.toString(this.host.mode));
    }
    get value() {
        return this.host.value.length === this.host.mode.length ? this.host.value : '';
    }
    get step() {
        switch (this.host.mode) {
            case 'HH:MM:SS':
                return 1;
            case 'HH:MM:SS.MSS':
                return 0.001;
            default:
                return 60;
        }
    }
    onChange(value) {
        this.host.onValueChange(value);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiNativeTimeComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiNativeTimeComponent, selector: "input[tuiTime]", host: { attributes: { "type": "time" }, listeners: { "change.stop": "onChange($event.target.value)", "click.stop.silent": "0", "mousedown.stop.silent": "0" }, properties: { "attr.list": "autoId", "tabIndex": "-1", "value": "value", "step": "step" } }, ngImport: i0, template: `
        <datalist
            *ngIf="items.length"
            [id]="autoId"
        >
            <option
                *ngFor="let item of items"
                value="{{ item }}"
            ></option>
        </datalist>
    `, isInline: true, styles: [":host{position:absolute;top:0;left:0;inline-size:100%;block-size:100%;opacity:0;pointer-events:auto;font-size:2rem}\n"], dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { TuiNativeTimeComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiNativeTimeComponent, decorators: [{
            type: Component,
            args: [{ selector: 'input[tuiTime]', template: `
        <datalist
            *ngIf="items.length"
            [id]="autoId"
        >
            <option
                *ngFor="let item of items"
                value="{{ item }}"
            ></option>
        </datalist>
    `, changeDetection: ChangeDetectionStrategy.OnPush, host: {
                        type: 'time',
                        '[attr.list]': 'autoId',
                        '[tabIndex]': '-1',
                        '[value]': 'value',
                        '[step]': 'step',
                        '(change.stop)': 'onChange($event.target.value)',
                        '(click.stop.silent)': '0',
                        '(mousedown.stop.silent)': '0',
                    }, styles: [":host{position:absolute;top:0;left:0;inline-size:100%;block-size:100%;opacity:0;pointer-events:auto;font-size:2rem}\n"] }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF0aXZlLXRpbWUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbGVnYWN5L2NvbXBvbmVudHMvaW5wdXQtdGltZS9uYXRpdmUtdGltZS9uYXRpdmUtdGltZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekUsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLHdCQUF3QixDQUFDO0FBQ25ELE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLHlCQUF5QixDQUFDOzs7QUFJM0QsTUEwQmEsc0JBQXNCO0lBMUJuQztRQTJCdUIsU0FBSSxHQUFHLE1BQU0sQ0FBd0Isa0JBQWtCLENBQUMsQ0FBQztRQUV6RCxXQUFNLEdBQUcsV0FBVyxFQUFFLENBQUM7S0F3QjdDO0lBdEJHLElBQWMsS0FBSztRQUNmLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUN4RSxDQUFDO0lBRUQsSUFBYyxLQUFLO1FBQ2YsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQ25GLENBQUM7SUFFRCxJQUFjLElBQUk7UUFDZCxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ3BCLEtBQUssVUFBVTtnQkFDWCxPQUFPLENBQUMsQ0FBQztZQUNiLEtBQUssY0FBYztnQkFDZixPQUFPLEtBQUssQ0FBQztZQUNqQjtnQkFDSSxPQUFPLEVBQUUsQ0FBQztTQUNqQjtJQUNMLENBQUM7SUFFUyxRQUFRLENBQUMsS0FBYTtRQUM1QixJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuQyxDQUFDOytHQTFCUSxzQkFBc0I7bUdBQXRCLHNCQUFzQixrVEF4QnJCOzs7Ozs7Ozs7O0tBVVQ7O1NBY1Esc0JBQXNCOzRGQUF0QixzQkFBc0I7a0JBMUJsQyxTQUFTOytCQUNJLGdCQUFnQixZQUNoQjs7Ozs7Ozs7OztLQVVULG1CQUVnQix1QkFBdUIsQ0FBQyxNQUFNLFFBQ3pDO3dCQUNGLElBQUksRUFBRSxNQUFNO3dCQUNaLGFBQWEsRUFBRSxRQUFRO3dCQUN2QixZQUFZLEVBQUUsSUFBSTt3QkFDbEIsU0FBUyxFQUFFLE9BQU87d0JBQ2xCLFFBQVEsRUFBRSxNQUFNO3dCQUNoQixlQUFlLEVBQUUsK0JBQStCO3dCQUNoRCxxQkFBcUIsRUFBRSxHQUFHO3dCQUMxQix5QkFBeUIsRUFBRSxHQUFHO3FCQUNqQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgaW5qZWN0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7dHVpSW5qZWN0SWR9IGZyb20gJ0B0YWlnYS11aS9jZGsvc2VydmljZXMnO1xuaW1wb3J0IHtUVUlfVEVYVEZJRUxEX0hPU1R9IGZyb20gJ0B0YWlnYS11aS9sZWdhY3kvdG9rZW5zJztcblxuaW1wb3J0IHR5cGUge1R1aUlucHV0VGltZURpcmVjdGl2ZX0gZnJvbSAnLi4vaW5wdXQtdGltZS5kaXJlY3RpdmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2lucHV0W3R1aVRpbWVdJyxcbiAgICB0ZW1wbGF0ZTogYFxuICAgICAgICA8ZGF0YWxpc3RcbiAgICAgICAgICAgICpuZ0lmPVwiaXRlbXMubGVuZ3RoXCJcbiAgICAgICAgICAgIFtpZF09XCJhdXRvSWRcIlxuICAgICAgICA+XG4gICAgICAgICAgICA8b3B0aW9uXG4gICAgICAgICAgICAgICAgKm5nRm9yPVwibGV0IGl0ZW0gb2YgaXRlbXNcIlxuICAgICAgICAgICAgICAgIHZhbHVlPVwie3sgaXRlbSB9fVwiXG4gICAgICAgICAgICA+PC9vcHRpb24+XG4gICAgICAgIDwvZGF0YWxpc3Q+XG4gICAgYCxcbiAgICBzdHlsZVVybHM6IFsnLi9uYXRpdmUtdGltZS5zdHlsZS5sZXNzJ10sXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gICAgaG9zdDoge1xuICAgICAgICB0eXBlOiAndGltZScsXG4gICAgICAgICdbYXR0ci5saXN0XSc6ICdhdXRvSWQnLFxuICAgICAgICAnW3RhYkluZGV4XSc6ICctMScsXG4gICAgICAgICdbdmFsdWVdJzogJ3ZhbHVlJyxcbiAgICAgICAgJ1tzdGVwXSc6ICdzdGVwJyxcbiAgICAgICAgJyhjaGFuZ2Uuc3RvcCknOiAnb25DaGFuZ2UoJGV2ZW50LnRhcmdldC52YWx1ZSknLFxuICAgICAgICAnKGNsaWNrLnN0b3Auc2lsZW50KSc6ICcwJyxcbiAgICAgICAgJyhtb3VzZWRvd24uc3RvcC5zaWxlbnQpJzogJzAnLFxuICAgIH0sXG59KVxuZXhwb3J0IGNsYXNzIFR1aU5hdGl2ZVRpbWVDb21wb25lbnQge1xuICAgIHByb3RlY3RlZCByZWFkb25seSBob3N0ID0gaW5qZWN0PFR1aUlucHV0VGltZURpcmVjdGl2ZT4oVFVJX1RFWFRGSUVMRF9IT1NUKTtcblxuICAgIHByb3RlY3RlZCByZWFkb25seSBhdXRvSWQgPSB0dWlJbmplY3RJZCgpO1xuXG4gICAgcHJvdGVjdGVkIGdldCBpdGVtcygpOiBzdHJpbmdbXSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhvc3QuaXRlbXMubWFwKChpdGVtKSA9PiBpdGVtLnRvU3RyaW5nKHRoaXMuaG9zdC5tb2RlKSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldCB2YWx1ZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5ob3N0LnZhbHVlLmxlbmd0aCA9PT0gdGhpcy5ob3N0Lm1vZGUubGVuZ3RoID8gdGhpcy5ob3N0LnZhbHVlIDogJyc7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldCBzdGVwKCk6IG51bWJlciB7XG4gICAgICAgIHN3aXRjaCAodGhpcy5ob3N0Lm1vZGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ0hIOk1NOlNTJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgIGNhc2UgJ0hIOk1NOlNTLk1TUyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIDAuMDAxO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gNjA7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgb25DaGFuZ2UodmFsdWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLmhvc3Qub25WYWx1ZUNoYW5nZSh2YWx1ZSk7XG4gICAgfVxufVxuIl19