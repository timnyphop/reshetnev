import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, inject, Input, ViewChild, } from '@angular/core';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { maskitoTimeOptionsGenerator } from '@maskito/kit';
import { TUI_FALSE_HANDLER, TUI_STRICT_MATCHER } from '@taiga-ui/cdk/constants';
import { TuiTime } from '@taiga-ui/cdk/date-time';
import { TUI_IS_IOS, TUI_IS_MOBILE } from '@taiga-ui/cdk/tokens';
import { tuiIsElement, tuiIsInput } from '@taiga-ui/cdk/utils/dom';
import { tuiIsNativeFocused } from '@taiga-ui/cdk/utils/focus';
import { tuiPure } from '@taiga-ui/cdk/utils/miscellaneous';
import { tuiAsDataListHost, tuiAsOptionContent } from '@taiga-ui/core/components/data-list';
import { TUI_TIME_TEXTS, TUI_TIME_VALUE_TRANSFORMER } from '@taiga-ui/kit/tokens';
import { AbstractTuiNullableControl, tuiAsControl } from '@taiga-ui/legacy/classes';
import { TuiPrimitiveTextfieldComponent } from '@taiga-ui/legacy/components/primitive-textfield';
import { TUI_SELECT_OPTION } from '@taiga-ui/legacy/components/select-option';
import { TUI_TEXTFIELD_SIZE } from '@taiga-ui/legacy/directives';
import { tuiAsFocusableItemAccessor } from '@taiga-ui/legacy/tokens';
import { FIXED_DROPDOWN_CONTROLLER_PROVIDER } from '@taiga-ui/legacy/utils';
import { map, timer } from 'rxjs';
import { TUI_INPUT_TIME_OPTIONS } from './input-time.options';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@maskito/angular";
import * as i3 from "@taiga-ui/legacy/components/primitive-textfield";
import * as i4 from "@taiga-ui/legacy/directives";
import * as i5 from "@taiga-ui/polymorpheus";
import * as i6 from "@taiga-ui/core/components/icon";
import * as i7 from "@taiga-ui/core/directives/appearance";
import * as i8 from "@taiga-ui/core/directives/dropdown";
import * as i9 from "@taiga-ui/core/components/data-list";
import * as i10 from "./native-time/native-time.component";
class TuiInputTimeComponent extends AbstractTuiNullableControl {
    constructor() {
        super(...arguments);
        this.timeTexts$ = inject(TUI_TIME_TEXTS);
        this.options = inject(TUI_INPUT_TIME_OPTIONS);
        this.isMobile = inject(TUI_IS_MOBILE);
        this.isIOS = inject(TUI_IS_IOS);
        this.textfieldSize = inject(TUI_TEXTFIELD_SIZE);
        this.valueTransformer = inject(TUI_TIME_VALUE_TRANSFORMER, { optional: true });
        this.open = false;
        this.disabledItemHandler = TUI_FALSE_HANDLER;
        this.items = [];
        this.itemSize = this.options.itemSize;
        this.strict = false;
        this.mode = this.options.mode;
        this.identityMatcher = (controlValue, dropdownValue) => controlValue instanceof TuiTime &&
            controlValue.valueOf() === dropdownValue.valueOf();
    }
    get size() {
        return this.textfieldSize.size;
    }
    get nativeFocusableElement() {
        return this.textfield?.nativeFocusableElement ?? null;
    }
    get focused() {
        return tuiIsNativeFocused(this.nativeFocusableElement);
    }
    get computedValue() {
        return this.value ? this.value.toString(this.mode) : this.nativeValue;
    }
    get nativeValue() {
        return this.nativeFocusableElement?.value || '';
    }
    set nativeValue(value) {
        if (!this.nativeFocusableElement) {
            return;
        }
        this.nativeFocusableElement.value = value;
    }
    checkOption(option) {
        if (option.valueOf() === this.value?.valueOf()) {
            this.value = option;
        }
    }
    handleOption(item) {
        this.focusInput();
        this.value = item;
    }
    writeValue(value) {
        super.writeValue(value);
        this.nativeValue = value ? this.computedValue : '';
    }
    onValueChange(value) {
        this.open = !!this.items.length;
        if (this.control) {
            this.control.updateValueAndValidity({ emitEvent: false });
        }
        const match = this.getMatch(value);
        if (match !== undefined) {
            this.value = match;
            return;
        }
        if (value.length !== this.mode.length) {
            this.value = null;
            return;
        }
        const time = TuiTime.fromString(value);
        this.value = this.strict ? this.findNearestTimeFromItems(time) : time;
    }
    get canOpen() {
        return this.interactive && !!this.filtered.length;
    }
    get filtered() {
        return this.filter(this.items, this.mode, this.computedSearch);
    }
    get showNativePicker() {
        return (this.nativePicker &&
            (!this.isIOS || (this.mode === 'HH:MM' && !this.items.length)));
    }
    get nativeDatalist() {
        return this.nativePicker && !this.isIOS;
    }
    get maskOptions() {
        return this.calculateMask(this.mode);
    }
    get computedSearch() {
        return this.computedValue.length !== this.mode.length ? this.computedValue : '';
    }
    get innerPseudoFocused() {
        if (this.pseudoFocus === false) {
            return false;
        }
        if ((this.open && this.canOpen) || this.computedFocused) {
            return true;
        }
        return null;
    }
    get icon() {
        return this.options.icon;
    }
    getFiller$(mode) {
        return this.timeTexts$.pipe(map((texts) => texts[mode]));
    }
    onClick() {
        this.open = !this.open;
    }
    onFocused(focused) {
        this.updateFocused(focused);
        if (focused || this.value !== null || this.nativeValue === '') {
            return;
        }
        this.value = TuiTime.fromString(this.nativeValue);
        timer(0)
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            if (this.nativeValue.endsWith('.') || this.nativeValue.endsWith(':')) {
                this.nativeValue = this.nativeValue.slice(0, -1);
            }
        });
    }
    onArrowUp(event) {
        if (this.items.length) {
            return;
        }
        this.processArrow(event, 1);
    }
    onArrowDown(event) {
        if (this.items.length) {
            return;
        }
        this.processArrow(event, -1);
    }
    onOpen(open) {
        this.open = open;
    }
    get nativePicker() {
        return !!this.options.nativePicker && this.isMobile;
    }
    calculateMask(mode) {
        const { HH, MM, SS, MS } = this.options.maxValues;
        return maskitoTimeOptionsGenerator({
            mode,
            timeSegmentMaxValues: {
                hours: HH,
                minutes: MM,
                seconds: SS,
                milliseconds: MS,
            },
        });
    }
    filter(items, mode, search) {
        return items.filter((item) => item.toString(mode).includes(search));
    }
    findNearestTimeFromItems(value) {
        return this.items.reduce((previous, current) => Math.abs(current.valueOf() - value.valueOf()) <
            Math.abs(previous.valueOf() - value.valueOf())
            ? current
            : previous, new TuiTime(0, 0));
    }
    getMatch(value) {
        return this.items.find((item) => TUI_STRICT_MATCHER(item, value));
    }
    close() {
        this.open = false;
    }
    processArrow(event, shift) {
        const { target } = event;
        if (this.readOnly || !tuiIsElement(target) || !tuiIsInput(target)) {
            return;
        }
        const selectionStart = target.selectionStart || 0;
        this.shiftTime(this.calculateShift(selectionStart, shift));
        target.setSelectionRange(selectionStart, selectionStart);
        event.preventDefault();
    }
    calculateShift(selectionStart, shift) {
        if (selectionStart <= 2) {
            return { hours: shift };
        }
        if (selectionStart <= 5) {
            return { minutes: shift };
        }
        if (selectionStart <= 8) {
            return { seconds: shift };
        }
        return { ms: shift };
    }
    shiftTime(shift) {
        if (this.value === null) {
            return;
        }
        const increasedTime = this.value.shift(shift);
        // Manual update so we can set caret position properly
        this.nativeValue = increasedTime.toString(this.mode);
        this.value = increasedTime;
    }
    focusInput(preventScroll = false) {
        if (this.nativeFocusableElement) {
            this.nativeFocusableElement.focus({ preventScroll });
            this.close();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputTimeComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiInputTimeComponent, selector: "tui-input-time", inputs: { disabledItemHandler: "disabledItemHandler", items: "items", itemSize: "itemSize", strict: "strict", mode: "mode" }, host: { listeners: { "click": "onClick()" }, properties: { "attr.data-size": "size" } }, providers: [
            tuiAsFocusableItemAccessor(TuiInputTimeComponent),
            tuiAsControl(TuiInputTimeComponent),
            tuiAsDataListHost(TuiInputTimeComponent),
            tuiAsOptionContent(TUI_SELECT_OPTION),
        ], viewQueries: [{ propertyName: "textfield", first: true, predicate: TuiPrimitiveTextfieldComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<div\n    tuiDropdownOpenMonitor\n    class=\"t-wrapper\"\n    [tuiDropdown]=\"dropdownContent\"\n    [tuiDropdownEnabled]=\"canOpen && !nativeDatalist\"\n    [tuiDropdownOpen]=\"canOpen && open\"\n    (tuiActiveZoneChange)=\"onFocused($event)\"\n    (tuiDropdownOpenChange)=\"onOpen($event)\"\n>\n    <tui-primitive-textfield\n        tuiValueAccessor\n        class=\"t-textfield\"\n        [disabled]=\"disabled\"\n        [focusable]=\"focusable\"\n        [invalid]=\"computedInvalid\"\n        [maskito]=\"maskOptions\"\n        [nativeId]=\"nativeId\"\n        [pseudoActive]=\"pseudoActive\"\n        [pseudoFocus]=\"innerPseudoFocused\"\n        [pseudoHover]=\"pseudoHover\"\n        [readOnly]=\"readOnly\"\n        [tuiTextfieldFiller]=\"(getFiller$(mode) | async) || ''\"\n        [tuiTextfieldIcon]=\"iconContent\"\n        [value]=\"computedValue\"\n        (keydown.arrowDown)=\"onArrowDown($event)\"\n        (keydown.arrowUp)=\"onArrowUp($event)\"\n        (valueChange)=\"onValueChange($event)\"\n    >\n        <ng-content />\n        <input\n            inputmode=\"numeric\"\n            tuiTextfieldLegacy\n        />\n    </tui-primitive-textfield>\n</div>\n<ng-template #dropdownContent>\n    <tui-data-list\n        automation-id=\"tui-input-time__dropdown\"\n        [size]=\"itemSize\"\n    >\n        <button\n            *ngFor=\"let item of filtered\"\n            automation-id=\"tui-input-time__item\"\n            tuiOption\n            [disabled]=\"disabledItemHandler(item)\"\n            [value]=\"item\"\n        >\n            {{ item }}\n        </button>\n    </tui-data-list>\n</ng-template>\n\n<ng-template #iconContent>\n    <tui-icon\n        *polymorpheusOutlet=\"icon as src; context: {$implicit: size}\"\n        tuiAppearance=\"icon\"\n        [class.t-icon_small]=\"size === 's'\"\n        [icon]=\"src.toString()\"\n    />\n    <input\n        *ngIf=\"showNativePicker\"\n        tuiTime\n    />\n</ng-template>\n", styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:start}:host._disabled{pointer-events:none}.t-wrapper{display:block;border-radius:inherit}.t-textfield{border-radius:inherit;text-align:inherit}.t-icon_small{border:.25rem solid transparent}\n"], dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.MaskitoDirective, selector: "[maskito]", inputs: ["maskito", "maskitoElement"] }, { kind: "component", type: i3.TuiPrimitiveTextfieldComponent, selector: "tui-primitive-textfield", inputs: ["editable", "iconCleaner", "readOnly", "invalid", "disabled", "value"], outputs: ["valueChange"] }, { kind: "directive", type: i3.TuiPrimitiveTextfieldDirective, selector: "tui-primitive-textfield" }, { kind: "component", type: i3.TuiTextfieldComponent, selector: "input[tuiTextfieldLegacy], textarea[tuiTextfieldLegacy]" }, { kind: "directive", type: i4.TuiValueAccessorDirective, selector: "[tuiValueAccessor]" }, { kind: "directive", type: i4.TuiTextfieldIconDirective, selector: "[tuiTextfieldIcon]", inputs: ["tuiTextfieldIcon"] }, { kind: "directive", type: i4.TuiTextfieldFillerDirective, selector: "[tuiTextfieldFiller]", inputs: ["tuiTextfieldFiller"] }, { kind: "directive", type: i5.PolymorpheusOutlet, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { kind: "directive", type: i4.TuiLegacyDropdownOpenMonitorDirective, selector: "[tuiDropdownOpenMonitor]" }, { kind: "component", type: i6.TuiIcon, selector: "tui-icon", inputs: ["icon", "background"] }, { kind: "directive", type: i7.TuiAppearance, selector: "[tuiAppearance]", inputs: ["tuiAppearance", "tuiAppearanceState", "tuiAppearanceFocus"] }, { kind: "directive", type: i8.TuiDropdownDirective, selector: "[tuiDropdown]:not(ng-container):not(ng-template)", inputs: ["tuiDropdown"], exportAs: ["tuiDropdown"] }, { kind: "directive", type: i8.TuiDropdownOpen, selector: "[tuiDropdown][tuiDropdownOpen],[tuiDropdown][tuiDropdownOpenChange]", inputs: ["tuiDropdownEnabled", "tuiDropdownOpen"], outputs: ["tuiDropdownOpenChange"] }, { kind: "component", type: i9.TuiDataListComponent, selector: "tui-data-list", inputs: ["emptyContent", "size"] }, { kind: "component", type: i9.TuiOption, selector: "button[tuiOption], a[tuiOption], label[tuiOption]", inputs: ["disabled", "value"] }, { kind: "component", type: i10.TuiNativeTimeComponent, selector: "input[tuiTime]" }, { kind: "pipe", type: i1.AsyncPipe, name: "async" }], viewProviders: [FIXED_DROPDOWN_CONTROLLER_PROVIDER], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
__decorate([
    tuiPure
], TuiInputTimeComponent.prototype, "getFiller$", null);
__decorate([
    tuiPure
], TuiInputTimeComponent.prototype, "calculateMask", null);
__decorate([
    tuiPure
], TuiInputTimeComponent.prototype, "filter", null);
export { TuiInputTimeComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputTimeComponent, decorators: [{
            type: Component,
            args: [{ selector: 'tui-input-time', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        tuiAsFocusableItemAccessor(TuiInputTimeComponent),
                        tuiAsControl(TuiInputTimeComponent),
                        tuiAsDataListHost(TuiInputTimeComponent),
                        tuiAsOptionContent(TUI_SELECT_OPTION),
                    ], viewProviders: [FIXED_DROPDOWN_CONTROLLER_PROVIDER], host: {
                        '(click)': 'onClick()',
                        '[attr.data-size]': 'size',
                    }, template: "<div\n    tuiDropdownOpenMonitor\n    class=\"t-wrapper\"\n    [tuiDropdown]=\"dropdownContent\"\n    [tuiDropdownEnabled]=\"canOpen && !nativeDatalist\"\n    [tuiDropdownOpen]=\"canOpen && open\"\n    (tuiActiveZoneChange)=\"onFocused($event)\"\n    (tuiDropdownOpenChange)=\"onOpen($event)\"\n>\n    <tui-primitive-textfield\n        tuiValueAccessor\n        class=\"t-textfield\"\n        [disabled]=\"disabled\"\n        [focusable]=\"focusable\"\n        [invalid]=\"computedInvalid\"\n        [maskito]=\"maskOptions\"\n        [nativeId]=\"nativeId\"\n        [pseudoActive]=\"pseudoActive\"\n        [pseudoFocus]=\"innerPseudoFocused\"\n        [pseudoHover]=\"pseudoHover\"\n        [readOnly]=\"readOnly\"\n        [tuiTextfieldFiller]=\"(getFiller$(mode) | async) || ''\"\n        [tuiTextfieldIcon]=\"iconContent\"\n        [value]=\"computedValue\"\n        (keydown.arrowDown)=\"onArrowDown($event)\"\n        (keydown.arrowUp)=\"onArrowUp($event)\"\n        (valueChange)=\"onValueChange($event)\"\n    >\n        <ng-content />\n        <input\n            inputmode=\"numeric\"\n            tuiTextfieldLegacy\n        />\n    </tui-primitive-textfield>\n</div>\n<ng-template #dropdownContent>\n    <tui-data-list\n        automation-id=\"tui-input-time__dropdown\"\n        [size]=\"itemSize\"\n    >\n        <button\n            *ngFor=\"let item of filtered\"\n            automation-id=\"tui-input-time__item\"\n            tuiOption\n            [disabled]=\"disabledItemHandler(item)\"\n            [value]=\"item\"\n        >\n            {{ item }}\n        </button>\n    </tui-data-list>\n</ng-template>\n\n<ng-template #iconContent>\n    <tui-icon\n        *polymorpheusOutlet=\"icon as src; context: {$implicit: size}\"\n        tuiAppearance=\"icon\"\n        [class.t-icon_small]=\"size === 's'\"\n        [icon]=\"src.toString()\"\n    />\n    <input\n        *ngIf=\"showNativePicker\"\n        tuiTime\n    />\n</ng-template>\n", styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:start}:host._disabled{pointer-events:none}.t-wrapper{display:block;border-radius:inherit}.t-textfield{border-radius:inherit;text-align:inherit}.t-icon_small{border:.25rem solid transparent}\n"] }]
        }], propDecorators: { textfield: [{
                type: ViewChild,
                args: [TuiPrimitiveTextfieldComponent]
            }], disabledItemHandler: [{
                type: Input
            }], items: [{
                type: Input
            }], itemSize: [{
                type: Input
            }], strict: [{
                type: Input
            }], mode: [{
                type: Input
            }], getFiller$: [], calculateMask: [], filter: [] } });
//# sourceMappingURL=data:application/json;base64,