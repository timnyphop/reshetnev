import { Directive, inject } from '@angular/core';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { AbstractTuiTextfieldHost } from '@taiga-ui/legacy/classes';
import { TUI_MONTH_FORMATTER, tuiAsTextfieldHost } from '@taiga-ui/legacy/tokens';
import { combineLatest, distinctUntilChanged, Subject, switchMap } from 'rxjs';
import * as i0 from "@angular/core";
class TuiInputMonthRangeDirective extends AbstractTuiTextfieldHost {
    constructor() {
        super();
        this.value$ = new Subject();
        this.localizedValue = ['', ''];
        const formatter = inject(TUI_MONTH_FORMATTER);
        this.value$
            .pipe(distinctUntilChanged(), switchMap((value) => combineLatest([
            formatter(value?.from || null),
            formatter(value?.to || null),
        ])), takeUntilDestroyed())
            .subscribe((localizedValue) => {
            this.localizedValue = localizedValue;
        });
    }
    get readOnly() {
        return true;
    }
    get value() {
        return this.localizedValue[0]
            ? this.host.computeValue(...this.localizedValue)
            : '';
    }
    ngDoCheck() {
        this.value$.next(this.host.value);
    }
    onValueChange(value) {
        this.host.onValueChange(value);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputMonthRangeDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiInputMonthRangeDirective, selector: "tui-input-month-range", providers: [tuiAsTextfieldHost(TuiInputMonthRangeDirective)], usesInheritance: true, ngImport: i0 }); }
}
export { TuiInputMonthRangeDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputMonthRangeDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'tui-input-month-range',
                    providers: [tuiAsTextfieldHost(TuiInputMonthRangeDirective)],
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtbW9udGgtcmFuZ2UuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbGVnYWN5L2NvbXBvbmVudHMvaW5wdXQtbW9udGgtcmFuZ2UvaW5wdXQtbW9udGgtcmFuZ2UuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBQyxTQUFTLEVBQUUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ2hELE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLDRCQUE0QixDQUFDO0FBRTlELE9BQU8sRUFBQyx3QkFBd0IsRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBQ2xFLE9BQU8sRUFBQyxtQkFBbUIsRUFBRSxrQkFBa0IsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQ2hGLE9BQU8sRUFBQyxhQUFhLEVBQUUsb0JBQW9CLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBQyxNQUFNLE1BQU0sQ0FBQzs7QUFJN0UsTUFJYSwyQkFDVCxTQUFRLHdCQUFxRDtJQU83RDtRQUNJLEtBQUssRUFBRSxDQUFDO1FBTEssV0FBTSxHQUFHLElBQUksT0FBTyxFQUF3QixDQUFDO1FBRXRELG1CQUFjLEdBQXFCLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBS2hELE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBRTlDLElBQUksQ0FBQyxNQUFNO2FBQ04sSUFBSSxDQUNELG9CQUFvQixFQUFFLEVBQ3RCLFNBQVMsQ0FBQyxDQUFDLEtBQTJCLEVBQUUsRUFBRSxDQUN0QyxhQUFhLENBQUM7WUFDVixTQUFTLENBQUMsS0FBSyxFQUFFLElBQUksSUFBSSxJQUFJLENBQUM7WUFDOUIsU0FBUyxDQUFDLEtBQUssRUFBRSxFQUFFLElBQUksSUFBSSxDQUFDO1NBQy9CLENBQUMsQ0FDTCxFQUNELGtCQUFrQixFQUFFLENBQ3ZCO2FBQ0EsU0FBUyxDQUFDLENBQUMsY0FBYyxFQUFFLEVBQUU7WUFDMUIsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDekMsQ0FBQyxDQUFDLENBQUM7SUFDWCxDQUFDO0lBRUQsSUFBb0IsUUFBUTtRQUN4QixPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQsSUFBb0IsS0FBSztRQUNyQixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO1lBQ3pCLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUM7WUFDaEQsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUNiLENBQUM7SUFFTSxTQUFTO1FBQ1osSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRU0sYUFBYSxDQUFDLEtBQWE7UUFDOUIsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbkMsQ0FBQzsrR0E3Q1EsMkJBQTJCO21HQUEzQiwyQkFBMkIsZ0RBRnpCLENBQUMsa0JBQWtCLENBQUMsMkJBQTJCLENBQUMsQ0FBQzs7U0FFbkQsMkJBQTJCOzRGQUEzQiwyQkFBMkI7a0JBSnZDLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLHVCQUF1QjtvQkFDakMsU0FBUyxFQUFFLENBQUMsa0JBQWtCLDZCQUE2QixDQUFDO2lCQUMvRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHtEb0NoZWNrfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7RGlyZWN0aXZlLCBpbmplY3R9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHt0YWtlVW50aWxEZXN0cm95ZWR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvcnhqcy1pbnRlcm9wJztcbmltcG9ydCB0eXBlIHtUdWlNb250aFJhbmdlfSBmcm9tICdAdGFpZ2EtdWkvY2RrL2RhdGUtdGltZSc7XG5pbXBvcnQge0Fic3RyYWN0VHVpVGV4dGZpZWxkSG9zdH0gZnJvbSAnQHRhaWdhLXVpL2xlZ2FjeS9jbGFzc2VzJztcbmltcG9ydCB7VFVJX01PTlRIX0ZPUk1BVFRFUiwgdHVpQXNUZXh0ZmllbGRIb3N0fSBmcm9tICdAdGFpZ2EtdWkvbGVnYWN5L3Rva2Vucyc7XG5pbXBvcnQge2NvbWJpbmVMYXRlc3QsIGRpc3RpbmN0VW50aWxDaGFuZ2VkLCBTdWJqZWN0LCBzd2l0Y2hNYXB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgdHlwZSB7VHVpSW5wdXRNb250aFJhbmdlQ29tcG9uZW50fSBmcm9tICcuL2lucHV0LW1vbnRoLXJhbmdlLmNvbXBvbmVudCc7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAndHVpLWlucHV0LW1vbnRoLXJhbmdlJyxcbiAgICBwcm92aWRlcnM6IFt0dWlBc1RleHRmaWVsZEhvc3QoVHVpSW5wdXRNb250aFJhbmdlRGlyZWN0aXZlKV0sXG59KVxuZXhwb3J0IGNsYXNzIFR1aUlucHV0TW9udGhSYW5nZURpcmVjdGl2ZVxuICAgIGV4dGVuZHMgQWJzdHJhY3RUdWlUZXh0ZmllbGRIb3N0PFR1aUlucHV0TW9udGhSYW5nZUNvbXBvbmVudD5cbiAgICBpbXBsZW1lbnRzIERvQ2hlY2tcbntcbiAgICBwcml2YXRlIHJlYWRvbmx5IHZhbHVlJCA9IG5ldyBTdWJqZWN0PFR1aU1vbnRoUmFuZ2UgfCBudWxsPigpO1xuXG4gICAgcHJpdmF0ZSBsb2NhbGl6ZWRWYWx1ZTogW3N0cmluZywgc3RyaW5nXSA9IFsnJywgJyddO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgY29uc3QgZm9ybWF0dGVyID0gaW5qZWN0KFRVSV9NT05USF9GT1JNQVRURVIpO1xuXG4gICAgICAgIHRoaXMudmFsdWUkXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpLFxuICAgICAgICAgICAgICAgIHN3aXRjaE1hcCgodmFsdWU6IFR1aU1vbnRoUmFuZ2UgfCBudWxsKSA9PlxuICAgICAgICAgICAgICAgICAgICBjb21iaW5lTGF0ZXN0KFtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcih2YWx1ZT8uZnJvbSB8fCBudWxsKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcih2YWx1ZT8udG8gfHwgbnVsbCksXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgdGFrZVVudGlsRGVzdHJveWVkKCksXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAuc3Vic2NyaWJlKChsb2NhbGl6ZWRWYWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMubG9jYWxpemVkVmFsdWUgPSBsb2NhbGl6ZWRWYWx1ZTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBvdmVycmlkZSBnZXQgcmVhZE9ubHkoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHB1YmxpYyBvdmVycmlkZSBnZXQgdmFsdWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxpemVkVmFsdWVbMF1cbiAgICAgICAgICAgID8gdGhpcy5ob3N0LmNvbXB1dGVWYWx1ZSguLi50aGlzLmxvY2FsaXplZFZhbHVlKVxuICAgICAgICAgICAgOiAnJztcbiAgICB9XG5cbiAgICBwdWJsaWMgbmdEb0NoZWNrKCk6IHZvaWQge1xuICAgICAgICB0aGlzLnZhbHVlJC5uZXh0KHRoaXMuaG9zdC52YWx1ZSk7XG4gICAgfVxuXG4gICAgcHVibGljIG9uVmFsdWVDaGFuZ2UodmFsdWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLmhvc3Qub25WYWx1ZUNoYW5nZSh2YWx1ZSk7XG4gICAgfVxufVxuIl19