import { Directive, inject } from '@angular/core';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { AbstractTuiTextfieldHost } from '@taiga-ui/legacy/classes';
import { TUI_MONTH_FORMATTER, tuiAsTextfieldHost } from '@taiga-ui/legacy/tokens';
import { combineLatest, distinctUntilChanged, Subject, switchMap } from 'rxjs';
import * as i0 from "@angular/core";
class TuiInputMonthRangeDirective extends AbstractTuiTextfieldHost {
    constructor() {
        super();
        this.value$ = new Subject();
        this.localizedValue = ['', ''];
        const formatter = inject(TUI_MONTH_FORMATTER);
        this.value$
            .pipe(distinctUntilChanged(), switchMap((value) => combineLatest([
            formatter(value?.from || null),
            formatter(value?.to || null),
        ])), takeUntilDestroyed())
            .subscribe((localizedValue) => {
            this.localizedValue = localizedValue;
        });
    }
    get readOnly() {
        return true;
    }
    get value() {
        return this.localizedValue[0]
            ? this.host.computeValue(...this.localizedValue)
            : '';
    }
    ngDoCheck() {
        this.value$.next(this.host.value);
    }
    onValueChange(value) {
        this.host.onValueChange(value);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputMonthRangeDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiInputMonthRangeDirective, selector: "tui-input-month-range", providers: [tuiAsTextfieldHost(TuiInputMonthRangeDirective)], usesInheritance: true, ngImport: i0 }); }
}
export { TuiInputMonthRangeDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputMonthRangeDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: false,
                    selector: 'tui-input-month-range',
                    providers: [tuiAsTextfieldHost(TuiInputMonthRangeDirective)],
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtbW9udGgtcmFuZ2UuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbGVnYWN5L2NvbXBvbmVudHMvaW5wdXQtbW9udGgtcmFuZ2UvaW5wdXQtbW9udGgtcmFuZ2UuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBQyxTQUFTLEVBQUUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ2hELE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLDRCQUE0QixDQUFDO0FBRTlELE9BQU8sRUFBQyx3QkFBd0IsRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBQ2xFLE9BQU8sRUFBQyxtQkFBbUIsRUFBRSxrQkFBa0IsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQ2hGLE9BQU8sRUFBQyxhQUFhLEVBQUUsb0JBQW9CLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBQyxNQUFNLE1BQU0sQ0FBQzs7QUFJN0UsTUFLYSwyQkFDVCxTQUFRLHdCQUFxRDtJQU83RDtRQUNJLEtBQUssRUFBRSxDQUFDO1FBTEssV0FBTSxHQUFHLElBQUksT0FBTyxFQUF3QixDQUFDO1FBRXRELG1CQUFjLEdBQXFCLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBS2hELE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBRTlDLElBQUksQ0FBQyxNQUFNO2FBQ04sSUFBSSxDQUNELG9CQUFvQixFQUFFLEVBQ3RCLFNBQVMsQ0FBQyxDQUFDLEtBQTJCLEVBQUUsRUFBRSxDQUN0QyxhQUFhLENBQUM7WUFDVixTQUFTLENBQUMsS0FBSyxFQUFFLElBQUksSUFBSSxJQUFJLENBQUM7WUFDOUIsU0FBUyxDQUFDLEtBQUssRUFBRSxFQUFFLElBQUksSUFBSSxDQUFDO1NBQy9CLENBQUMsQ0FDTCxFQUNELGtCQUFrQixFQUFFLENBQ3ZCO2FBQ0EsU0FBUyxDQUFDLENBQUMsY0FBYyxFQUFFLEVBQUU7WUFDMUIsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDekMsQ0FBQyxDQUFDLENBQUM7SUFDWCxDQUFDO0lBRUQsSUFBb0IsUUFBUTtRQUN4QixPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQsSUFBb0IsS0FBSztRQUNyQixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO1lBQ3pCLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUM7WUFDaEQsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUNiLENBQUM7SUFFTSxTQUFTO1FBQ1osSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRU0sYUFBYSxDQUFDLEtBQWE7UUFDOUIsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbkMsQ0FBQzsrR0E3Q1EsMkJBQTJCO21HQUEzQiwyQkFBMkIsZ0RBRnpCLENBQUMsa0JBQWtCLENBQUMsMkJBQTJCLENBQUMsQ0FBQzs7U0FFbkQsMkJBQTJCOzRGQUEzQiwyQkFBMkI7a0JBTHZDLFNBQVM7bUJBQUM7b0JBQ1AsVUFBVSxFQUFFLEtBQUs7b0JBQ2pCLFFBQVEsRUFBRSx1QkFBdUI7b0JBQ2pDLFNBQVMsRUFBRSxDQUFDLGtCQUFrQiw2QkFBNkIsQ0FBQztpQkFDL0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7RG9DaGVja30gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0RpcmVjdGl2ZSwgaW5qZWN0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7dGFrZVVudGlsRGVzdHJveWVkfSBmcm9tICdAYW5ndWxhci9jb3JlL3J4anMtaW50ZXJvcCc7XG5pbXBvcnQgdHlwZSB7VHVpTW9udGhSYW5nZX0gZnJvbSAnQHRhaWdhLXVpL2Nkay9kYXRlLXRpbWUnO1xuaW1wb3J0IHtBYnN0cmFjdFR1aVRleHRmaWVsZEhvc3R9IGZyb20gJ0B0YWlnYS11aS9sZWdhY3kvY2xhc3Nlcyc7XG5pbXBvcnQge1RVSV9NT05USF9GT1JNQVRURVIsIHR1aUFzVGV4dGZpZWxkSG9zdH0gZnJvbSAnQHRhaWdhLXVpL2xlZ2FjeS90b2tlbnMnO1xuaW1wb3J0IHtjb21iaW5lTGF0ZXN0LCBkaXN0aW5jdFVudGlsQ2hhbmdlZCwgU3ViamVjdCwgc3dpdGNoTWFwfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHR5cGUge1R1aUlucHV0TW9udGhSYW5nZUNvbXBvbmVudH0gZnJvbSAnLi9pbnB1dC1tb250aC1yYW5nZS5jb21wb25lbnQnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzdGFuZGFsb25lOiBmYWxzZSxcbiAgICBzZWxlY3RvcjogJ3R1aS1pbnB1dC1tb250aC1yYW5nZScsXG4gICAgcHJvdmlkZXJzOiBbdHVpQXNUZXh0ZmllbGRIb3N0KFR1aUlucHV0TW9udGhSYW5nZURpcmVjdGl2ZSldLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlJbnB1dE1vbnRoUmFuZ2VEaXJlY3RpdmVcbiAgICBleHRlbmRzIEFic3RyYWN0VHVpVGV4dGZpZWxkSG9zdDxUdWlJbnB1dE1vbnRoUmFuZ2VDb21wb25lbnQ+XG4gICAgaW1wbGVtZW50cyBEb0NoZWNrXG57XG4gICAgcHJpdmF0ZSByZWFkb25seSB2YWx1ZSQgPSBuZXcgU3ViamVjdDxUdWlNb250aFJhbmdlIHwgbnVsbD4oKTtcblxuICAgIHByaXZhdGUgbG9jYWxpemVkVmFsdWU6IFtzdHJpbmcsIHN0cmluZ10gPSBbJycsICcnXTtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIGNvbnN0IGZvcm1hdHRlciA9IGluamVjdChUVUlfTU9OVEhfRk9STUFUVEVSKTtcblxuICAgICAgICB0aGlzLnZhbHVlJFxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKSxcbiAgICAgICAgICAgICAgICBzd2l0Y2hNYXAoKHZhbHVlOiBUdWlNb250aFJhbmdlIHwgbnVsbCkgPT5cbiAgICAgICAgICAgICAgICAgICAgY29tYmluZUxhdGVzdChbXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZXIodmFsdWU/LmZyb20gfHwgbnVsbCksXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZXIodmFsdWU/LnRvIHx8IG51bGwpLFxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIHRha2VVbnRpbERlc3Ryb3llZCgpLFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgLnN1YnNjcmliZSgobG9jYWxpemVkVmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvY2FsaXplZFZhbHVlID0gbG9jYWxpemVkVmFsdWU7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgb3ZlcnJpZGUgZ2V0IHJlYWRPbmx5KCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgb3ZlcnJpZGUgZ2V0IHZhbHVlKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsaXplZFZhbHVlWzBdXG4gICAgICAgICAgICA/IHRoaXMuaG9zdC5jb21wdXRlVmFsdWUoLi4udGhpcy5sb2NhbGl6ZWRWYWx1ZSlcbiAgICAgICAgICAgIDogJyc7XG4gICAgfVxuXG4gICAgcHVibGljIG5nRG9DaGVjaygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy52YWx1ZSQubmV4dCh0aGlzLmhvc3QudmFsdWUpO1xuICAgIH1cblxuICAgIHB1YmxpYyBvblZhbHVlQ2hhbmdlKHZhbHVlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5ob3N0Lm9uVmFsdWVDaGFuZ2UodmFsdWUpO1xuICAgIH1cbn1cbiJdfQ==