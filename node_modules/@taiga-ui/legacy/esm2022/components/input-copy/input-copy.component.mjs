import { __decorate } from "tslib";
import { DOCUMENT } from '@angular/common';
import { ChangeDetectionStrategy, Component, inject, Input, ViewChild, } from '@angular/core';
import { tuiPure } from '@taiga-ui/cdk/utils/miscellaneous';
import { TUI_COPY_TEXTS } from '@taiga-ui/kit/tokens';
import { AbstractTuiControl, tuiAsControl } from '@taiga-ui/legacy/classes';
import { TuiPrimitiveTextfieldComponent } from '@taiga-ui/legacy/components/primitive-textfield';
import { TUI_TEXTFIELD_SIZE, TUI_VALUE_ACCESSOR_PROVIDER, } from '@taiga-ui/legacy/directives';
import { tuiAsFocusableItemAccessor } from '@taiga-ui/legacy/tokens';
import { BehaviorSubject, map, merge, of, switchMap, timer } from 'rxjs';
import { TUI_INPUT_COPY_OPTIONS } from './input-copy.options';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/polymorpheus";
import * as i2 from "@taiga-ui/legacy/components/primitive-textfield";
import * as i3 from "@taiga-ui/legacy/directives";
import * as i4 from "@taiga-ui/core/directives/appearance";
import * as i5 from "@taiga-ui/core/components/icon";
import * as i6 from "@taiga-ui/core/directives/hint";
import * as i7 from "@angular/common";
/**
 * @deprecated use {@link TuiCopy} with {@link TuiTextfield}
 */
class TuiInputCopyComponent extends AbstractTuiControl {
    constructor() {
        super(...arguments);
        this.copied$ = new BehaviorSubject(false);
        this.doc = inject(DOCUMENT);
        this.copyTexts$ = inject(TUI_COPY_TEXTS);
        this.options = inject(TUI_INPUT_COPY_OPTIONS);
        this.textfieldSize = inject(TUI_TEXTFIELD_SIZE);
        this.successMessage = this.options.successMessage;
        this.messageDirection = this.options.messageDirection;
        this.messageAppearance = this.options.messageAppearance;
    }
    get nativeFocusableElement() {
        return this.computedDisabled || !this.textfield
            ? null
            : this.textfield.nativeFocusableElement;
    }
    get focused() {
        return !!this.textfield?.focused;
    }
    onValueChange(value) {
        this.value = value;
    }
    get hintText$() {
        return this.copyTexts$.pipe(switchMap((texts) => this.copied$.pipe(switchMap((copied) => {
            if (!copied) {
                return of(texts[0]);
            }
            this.copied$.next(false);
            return merge(of(this.successMessage || texts[1]), timer(3000).pipe(map(() => texts[0])));
        }))));
    }
    get size() {
        return this.textfieldSize.size;
    }
    get icon() {
        return this.options.icon;
    }
    onFocused(focused) {
        this.updateFocused(focused);
    }
    copy() {
        if (!this.textfield?.nativeFocusableElement) {
            return;
        }
        this.textfield.nativeFocusableElement.select();
        this.doc.execCommand('copy');
        this.copied$.next(true);
    }
    getFallbackValue() {
        return '';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputCopyComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiInputCopyComponent, selector: "tui-input-copy", inputs: { successMessage: "successMessage", messageDirection: "messageDirection", messageAppearance: "messageAppearance" }, host: { properties: { "attr.data-size": "size" } }, providers: [
            TUI_VALUE_ACCESSOR_PROVIDER,
            tuiAsFocusableItemAccessor(TuiInputCopyComponent),
            tuiAsControl(TuiInputCopyComponent),
        ], viewQueries: [{ propertyName: "textfield", first: true, predicate: TuiPrimitiveTextfieldComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<tui-primitive-textfield\n    class=\"t-textfield\"\n    [disabled]=\"computedDisabled\"\n    [focusable]=\"focusable\"\n    [invalid]=\"computedInvalid\"\n    [nativeId]=\"nativeId\"\n    [pseudoActive]=\"pseudoActive\"\n    [pseudoFocus]=\"pseudoFocus\"\n    [pseudoHover]=\"pseudoHover\"\n    [readOnly]=\"readOnly\"\n    [tuiTextfieldIcon]=\"!disabled ? iconContent : ''\"\n    [(value)]=\"value\"\n    (focusedChange)=\"onFocused($event)\"\n>\n    <ng-content />\n    <ng-content\n        ngProjectAs=\"input\"\n        select=\"input\"\n    />\n</tui-primitive-textfield>\n\n<ng-template #iconContent>\n    <tui-icon\n        *polymorpheusOutlet=\"icon as src; context: {$implicit: size}\"\n        automation-id=\"tui-copy__icon\"\n        tuiAppearance=\"icon\"\n        class=\"t-icon\"\n        [class.t-icon_small]=\"size === 's'\"\n        [icon]=\"src.toString()\"\n        [tuiAppearanceState]=\"!value ? 'disabled' : null\"\n        [tuiHint]=\"hint\"\n        [tuiHintAppearance]=\"messageAppearance\"\n        [tuiHintDirection]=\"messageDirection\"\n        (click)=\"copy()\"\n    />\n</ng-template>\n\n<ng-template #hint>\n    <ng-container *polymorpheusOutlet=\"hintText$ | async as text\">\n        {{ text }}\n    </ng-container>\n</ng-template>\n", styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:start}.t-icon{position:relative;cursor:pointer;pointer-events:auto}.t-icon_small{border:.25rem solid transparent}.t-textfield{border-radius:inherit;text-align:inherit}\n"], dependencies: [{ kind: "directive", type: i1.PolymorpheusOutlet, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { kind: "component", type: i2.TuiPrimitiveTextfieldComponent, selector: "tui-primitive-textfield", inputs: ["editable", "iconCleaner", "readOnly", "invalid", "disabled", "value"], outputs: ["valueChange"] }, { kind: "directive", type: i2.TuiPrimitiveTextfieldDirective, selector: "tui-primitive-textfield" }, { kind: "directive", type: i3.TuiTextfieldIconDirective, selector: "[tuiTextfieldIcon]", inputs: ["tuiTextfieldIcon"] }, { kind: "directive", type: i4.TuiAppearance, selector: "[tuiAppearance]", inputs: ["tuiAppearance", "tuiAppearanceState", "tuiAppearanceFocus", "tuiAppearanceMode"] }, { kind: "component", type: i5.TuiIcon, selector: "tui-icon", inputs: ["icon", "background"] }, { kind: "directive", type: i6.TuiHintDirective, selector: "[tuiHint]:not(ng-container):not(ng-template)", inputs: ["tuiHintContext", "tuiHintAppearance", "tuiHint"] }, { kind: "pipe", type: i7.AsyncPipe, name: "async" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
__decorate([
    tuiPure
], TuiInputCopyComponent.prototype, "hintText$", null);
export { TuiInputCopyComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputCopyComponent, decorators: [{
            type: Component,
            args: [{ standalone: false, selector: 'tui-input-copy', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        TUI_VALUE_ACCESSOR_PROVIDER,
                        tuiAsFocusableItemAccessor(TuiInputCopyComponent),
                        tuiAsControl(TuiInputCopyComponent),
                    ], host: {
                        '[attr.data-size]': 'size',
                    }, template: "<tui-primitive-textfield\n    class=\"t-textfield\"\n    [disabled]=\"computedDisabled\"\n    [focusable]=\"focusable\"\n    [invalid]=\"computedInvalid\"\n    [nativeId]=\"nativeId\"\n    [pseudoActive]=\"pseudoActive\"\n    [pseudoFocus]=\"pseudoFocus\"\n    [pseudoHover]=\"pseudoHover\"\n    [readOnly]=\"readOnly\"\n    [tuiTextfieldIcon]=\"!disabled ? iconContent : ''\"\n    [(value)]=\"value\"\n    (focusedChange)=\"onFocused($event)\"\n>\n    <ng-content />\n    <ng-content\n        ngProjectAs=\"input\"\n        select=\"input\"\n    />\n</tui-primitive-textfield>\n\n<ng-template #iconContent>\n    <tui-icon\n        *polymorpheusOutlet=\"icon as src; context: {$implicit: size}\"\n        automation-id=\"tui-copy__icon\"\n        tuiAppearance=\"icon\"\n        class=\"t-icon\"\n        [class.t-icon_small]=\"size === 's'\"\n        [icon]=\"src.toString()\"\n        [tuiAppearanceState]=\"!value ? 'disabled' : null\"\n        [tuiHint]=\"hint\"\n        [tuiHintAppearance]=\"messageAppearance\"\n        [tuiHintDirection]=\"messageDirection\"\n        (click)=\"copy()\"\n    />\n</ng-template>\n\n<ng-template #hint>\n    <ng-container *polymorpheusOutlet=\"hintText$ | async as text\">\n        {{ text }}\n    </ng-container>\n</ng-template>\n", styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:start}.t-icon{position:relative;cursor:pointer;pointer-events:auto}.t-icon_small{border:.25rem solid transparent}.t-textfield{border-radius:inherit;text-align:inherit}\n"] }]
        }], propDecorators: { textfield: [{
                type: ViewChild,
                args: [TuiPrimitiveTextfieldComponent]
            }], successMessage: [{
                type: Input
            }], messageDirection: [{
                type: Input
            }], messageAppearance: [{
                type: Input
            }], hintText$: [] } });
//# sourceMappingURL=data:application/json;base64,