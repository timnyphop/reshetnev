import { Directive, inject } from '@angular/core';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { tuiInjectElement } from '@taiga-ui/cdk/utils/dom';
import { tuiGetClosestFocusable } from '@taiga-ui/cdk/utils/focus';
import { TuiDropdownOpen, TuiDropdownOpenLegacy } from '@taiga-ui/core/directives/dropdown';
import { distinctUntilChanged } from 'rxjs';
import * as i0 from "@angular/core";
class TuiLegacyDropdownOpenMonitorDirective {
    constructor() {
        this.el = tuiInjectElement();
        this.host = inject(TuiDropdownOpen, { self: true });
        this.external = inject(TuiDropdownOpenLegacy, {
            optional: true,
        });
        this.host.driver
            .pipe(distinctUntilChanged(), takeUntilDestroyed())
            .subscribe((open) => this.external?.tuiDropdownOpenChange.next(open));
        this.external?.tuiDropdownOpenChange
            .pipe(distinctUntilChanged(), takeUntilDestroyed())
            .subscribe((open) => {
            if (open) {
                tuiGetClosestFocusable({
                    initial: this.el,
                    root: this.el,
                })?.focus();
            }
            this.host.toggle(open);
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiLegacyDropdownOpenMonitorDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiLegacyDropdownOpenMonitorDirective, isStandalone: true, selector: "[tuiDropdownOpenMonitor]", ngImport: i0 }); }
}
export { TuiLegacyDropdownOpenMonitorDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiLegacyDropdownOpenMonitorDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[tuiDropdownOpenMonitor]',
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVnYWN5LWRyb3Bkb3duLW9wZW4tbW9uaXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2xlZ2FjeS9kaXJlY3RpdmVzL2xlZ2FjeS1kcm9wZG93bi1vcGVuLW1vbml0b3IvbGVnYWN5LWRyb3Bkb3duLW9wZW4tbW9uaXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNoRCxPQUFPLEVBQUMsa0JBQWtCLEVBQUMsTUFBTSw0QkFBNEIsQ0FBQztBQUM5RCxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUN6RCxPQUFPLEVBQUMsc0JBQXNCLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUNqRSxPQUFPLEVBQUMsZUFBZSxFQUFFLHFCQUFxQixFQUFDLE1BQU0sb0NBQW9DLENBQUM7QUFDMUYsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0sTUFBTSxDQUFDOztBQUUxQyxNQUlhLHFDQUFxQztJQU85QztRQU5pQixPQUFFLEdBQUcsZ0JBQWdCLEVBQUUsQ0FBQztRQUN4QixTQUFJLEdBQUcsTUFBTSxDQUFDLGVBQWUsRUFBRSxFQUFDLElBQUksRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDO1FBQzdDLGFBQVEsR0FBRyxNQUFNLENBQUMscUJBQXFCLEVBQUU7WUFDdEQsUUFBUSxFQUFFLElBQUk7U0FDakIsQ0FBQyxDQUFDO1FBR0MsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNO2FBQ1gsSUFBSSxDQUFDLG9CQUFvQixFQUFFLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQzthQUNsRCxTQUFTLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUscUJBQXFCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFFMUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxxQkFBcUI7YUFDL0IsSUFBSSxDQUFDLG9CQUFvQixFQUFFLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQzthQUNsRCxTQUFTLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUNoQixJQUFJLElBQUksRUFBRTtnQkFDTixzQkFBc0IsQ0FBQztvQkFDbkIsT0FBTyxFQUFFLElBQUksQ0FBQyxFQUFFO29CQUNoQixJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUU7aUJBQ2hCLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQzthQUNmO1lBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDM0IsQ0FBQyxDQUFDLENBQUM7SUFDWCxDQUFDOytHQXhCUSxxQ0FBcUM7bUdBQXJDLHFDQUFxQzs7U0FBckMscUNBQXFDOzRGQUFyQyxxQ0FBcUM7a0JBSmpELFNBQVM7bUJBQUM7b0JBQ1AsVUFBVSxFQUFFLElBQUk7b0JBQ2hCLFFBQVEsRUFBRSwwQkFBMEI7aUJBQ3ZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIGluamVjdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge3Rha2VVbnRpbERlc3Ryb3llZH0gZnJvbSAnQGFuZ3VsYXIvY29yZS9yeGpzLWludGVyb3AnO1xuaW1wb3J0IHt0dWlJbmplY3RFbGVtZW50fSBmcm9tICdAdGFpZ2EtdWkvY2RrL3V0aWxzL2RvbSc7XG5pbXBvcnQge3R1aUdldENsb3Nlc3RGb2N1c2FibGV9IGZyb20gJ0B0YWlnYS11aS9jZGsvdXRpbHMvZm9jdXMnO1xuaW1wb3J0IHtUdWlEcm9wZG93bk9wZW4sIFR1aURyb3Bkb3duT3BlbkxlZ2FjeX0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvZGlyZWN0aXZlcy9kcm9wZG93bic7XG5pbXBvcnQge2Rpc3RpbmN0VW50aWxDaGFuZ2VkfSBmcm9tICdyeGpzJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgICBzZWxlY3RvcjogJ1t0dWlEcm9wZG93bk9wZW5Nb25pdG9yXScsXG59KVxuZXhwb3J0IGNsYXNzIFR1aUxlZ2FjeURyb3Bkb3duT3Blbk1vbml0b3JEaXJlY3RpdmUge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZWwgPSB0dWlJbmplY3RFbGVtZW50KCk7XG4gICAgcHJpdmF0ZSByZWFkb25seSBob3N0ID0gaW5qZWN0KFR1aURyb3Bkb3duT3Blbiwge3NlbGY6IHRydWV9KTtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGV4dGVybmFsID0gaW5qZWN0KFR1aURyb3Bkb3duT3BlbkxlZ2FjeSwge1xuICAgICAgICBvcHRpb25hbDogdHJ1ZSxcbiAgICB9KTtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmhvc3QuZHJpdmVyXG4gICAgICAgICAgICAucGlwZShkaXN0aW5jdFVudGlsQ2hhbmdlZCgpLCB0YWtlVW50aWxEZXN0cm95ZWQoKSlcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoKG9wZW4pID0+IHRoaXMuZXh0ZXJuYWw/LnR1aURyb3Bkb3duT3BlbkNoYW5nZS5uZXh0KG9wZW4pKTtcblxuICAgICAgICB0aGlzLmV4dGVybmFsPy50dWlEcm9wZG93bk9wZW5DaGFuZ2VcbiAgICAgICAgICAgIC5waXBlKGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksIHRha2VVbnRpbERlc3Ryb3llZCgpKVxuICAgICAgICAgICAgLnN1YnNjcmliZSgob3BlbikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChvcGVuKSB7XG4gICAgICAgICAgICAgICAgICAgIHR1aUdldENsb3Nlc3RGb2N1c2FibGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbDogdGhpcy5lbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q6IHRoaXMuZWwsXG4gICAgICAgICAgICAgICAgICAgIH0pPy5mb2N1cygpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuaG9zdC50b2dnbGUob3Blbik7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG59XG4iXX0=