export class TuiTextfieldController {
    constructor(change$, options, legacyAppearance, appearanceDirective, cleanerDirective, customContentDirective, iconDirective, iconLeftDirective, labelOutsideDirective, sizeDirective, prefixDirective, postfixDirective, fillerDirective) {
        this.change$ = change$;
        this.options = options;
        this.legacyAppearance = legacyAppearance;
        this.appearanceDirective = appearanceDirective;
        this.cleanerDirective = cleanerDirective;
        this.customContentDirective = customContentDirective;
        this.iconDirective = iconDirective;
        this.iconLeftDirective = iconLeftDirective;
        this.labelOutsideDirective = labelOutsideDirective;
        this.sizeDirective = sizeDirective;
        this.prefixDirective = prefixDirective;
        this.postfixDirective = postfixDirective;
        this.fillerDirective = fillerDirective;
    }
    get appearance() {
        return this.appearanceDirective.appearance || this.legacyAppearance;
    }
    get cleaner() {
        return this.cleanerDirective.cleaner;
    }
    get customContent() {
        return this.customContentDirective.customContent || '';
    }
    get icon() {
        return this.iconDirective.icon;
    }
    get iconStart() {
        return this.iconLeftDirective.iconStart;
    }
    get labelOutside() {
        return this.labelOutsideDirective.labelOutside;
    }
    get size() {
        return this.sizeDirective.size;
    }
    get prefix() {
        return this.prefixDirective.prefix;
    }
    get postfix() {
        return this.postfixDirective.postfix;
    }
    get filler() {
        return this.fillerDirective.filler;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dGZpZWxkLmNvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9sZWdhY3kvZGlyZWN0aXZlcy90ZXh0ZmllbGQtY29udHJvbGxlci90ZXh0ZmllbGQuY29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFpQkEsTUFBTSxPQUFPLHNCQUFzQjtJQUMvQixZQUNvQixPQUF5QixFQUN6QixPQUE0QixFQUMzQixnQkFBd0IsRUFDeEIsbUJBQW9ELEVBQ3BELGdCQUE4QyxFQUM5QyxzQkFBMEQsRUFDMUQsYUFBd0MsRUFDeEMsaUJBQWdELEVBQ2hELHFCQUF3RCxFQUN4RCxhQUF3QyxFQUN4QyxlQUE0QyxFQUM1QyxnQkFBOEMsRUFDOUMsZUFBNEM7UUFaN0MsWUFBTyxHQUFQLE9BQU8sQ0FBa0I7UUFDekIsWUFBTyxHQUFQLE9BQU8sQ0FBcUI7UUFDM0IscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFRO1FBQ3hCLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBaUM7UUFDcEQscUJBQWdCLEdBQWhCLGdCQUFnQixDQUE4QjtRQUM5QywyQkFBc0IsR0FBdEIsc0JBQXNCLENBQW9DO1FBQzFELGtCQUFhLEdBQWIsYUFBYSxDQUEyQjtRQUN4QyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQStCO1FBQ2hELDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBbUM7UUFDeEQsa0JBQWEsR0FBYixhQUFhLENBQTJCO1FBQ3hDLG9CQUFlLEdBQWYsZUFBZSxDQUE2QjtRQUM1QyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQThCO1FBQzlDLG9CQUFlLEdBQWYsZUFBZSxDQUE2QjtJQUM5RCxDQUFDO0lBRUosSUFBVyxVQUFVO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLG1CQUFtQixDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLENBQUM7SUFDeEUsQ0FBQztJQUVELElBQVcsT0FBTztRQUNkLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQztJQUN6QyxDQUFDO0lBRUQsSUFBVyxhQUFhO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLHNCQUFzQixDQUFDLGFBQWEsSUFBSSxFQUFFLENBQUM7SUFDM0QsQ0FBQztJQUVELElBQVcsSUFBSTtRQUNYLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUM7SUFDbkMsQ0FBQztJQUVELElBQVcsU0FBUztRQUNoQixPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUM7SUFDNUMsQ0FBQztJQUVELElBQVcsWUFBWTtRQUNuQixPQUFPLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxZQUFZLENBQUM7SUFDbkQsQ0FBQztJQUVELElBQVcsSUFBSTtRQUNYLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUM7SUFDbkMsQ0FBQztJQUVELElBQVcsTUFBTTtRQUNiLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUM7SUFDdkMsQ0FBQztJQUVELElBQVcsT0FBTztRQUNkLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQztJQUN6QyxDQUFDO0lBRUQsSUFBVyxNQUFNO1FBQ2IsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQztJQUN2QyxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7VHVpQ29udGV4dH0gZnJvbSAnQHRhaWdhLXVpL2Nkay90eXBlcyc7XG5pbXBvcnQgdHlwZSB7VHVpU2l6ZUwsIFR1aVNpemVTfSBmcm9tICdAdGFpZ2EtdWkvY29yZS90eXBlcyc7XG5pbXBvcnQgdHlwZSB7UG9seW1vcnBoZXVzQ29udGVudH0gZnJvbSAnQHRhaWdhLXVpL3BvbHltb3JwaGV1cyc7XG5pbXBvcnQgdHlwZSB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB0eXBlIHtUdWlUZXh0ZmllbGRPcHRpb25zfSBmcm9tICcuL3RleHRmaWVsZC5vcHRpb25zJztcbmltcG9ydCB0eXBlIHtUdWlUZXh0ZmllbGRBcHBlYXJhbmNlRGlyZWN0aXZlfSBmcm9tICcuL3RleHRmaWVsZC1hcHBlYXJhbmNlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgdHlwZSB7VHVpVGV4dGZpZWxkQ2xlYW5lckRpcmVjdGl2ZX0gZnJvbSAnLi90ZXh0ZmllbGQtY2xlYW5lci5kaXJlY3RpdmUnO1xuaW1wb3J0IHR5cGUge1R1aVRleHRmaWVsZEN1c3RvbUNvbnRlbnREaXJlY3RpdmV9IGZyb20gJy4vdGV4dGZpZWxkLWN1c3RvbS1jb250ZW50LmRpcmVjdGl2ZSc7XG5pbXBvcnQgdHlwZSB7VHVpVGV4dGZpZWxkRmlsbGVyRGlyZWN0aXZlfSBmcm9tICcuL3RleHRmaWVsZC1maWxsZXIuZGlyZWN0aXZlJztcbmltcG9ydCB0eXBlIHtUdWlUZXh0ZmllbGRJY29uRGlyZWN0aXZlfSBmcm9tICcuL3RleHRmaWVsZC1pY29uLmRpcmVjdGl2ZSc7XG5pbXBvcnQgdHlwZSB7VHVpVGV4dGZpZWxkSWNvbkxlZnREaXJlY3RpdmV9IGZyb20gJy4vdGV4dGZpZWxkLWljb24tbGVmdC5kaXJlY3RpdmUnO1xuaW1wb3J0IHR5cGUge1R1aVRleHRmaWVsZExhYmVsT3V0c2lkZURpcmVjdGl2ZX0gZnJvbSAnLi90ZXh0ZmllbGQtbGFiZWwtb3V0c2lkZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHR5cGUge1R1aVRleHRmaWVsZFBvc3RmaXhEaXJlY3RpdmV9IGZyb20gJy4vdGV4dGZpZWxkLXBvc3RmaXguZGlyZWN0aXZlJztcbmltcG9ydCB0eXBlIHtUdWlUZXh0ZmllbGRQcmVmaXhEaXJlY3RpdmV9IGZyb20gJy4vdGV4dGZpZWxkLXByZWZpeC5kaXJlY3RpdmUnO1xuaW1wb3J0IHR5cGUge1R1aVRleHRmaWVsZFNpemVEaXJlY3RpdmV9IGZyb20gJy4vdGV4dGZpZWxkLXNpemUuZGlyZWN0aXZlJztcblxuZXhwb3J0IGNsYXNzIFR1aVRleHRmaWVsZENvbnRyb2xsZXIge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwdWJsaWMgcmVhZG9ubHkgY2hhbmdlJDogT2JzZXJ2YWJsZTx2b2lkPixcbiAgICAgICAgcHVibGljIHJlYWRvbmx5IG9wdGlvbnM6IFR1aVRleHRmaWVsZE9wdGlvbnMsXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgbGVnYWN5QXBwZWFyYW5jZTogc3RyaW5nLFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGFwcGVhcmFuY2VEaXJlY3RpdmU6IFR1aVRleHRmaWVsZEFwcGVhcmFuY2VEaXJlY3RpdmUsXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgY2xlYW5lckRpcmVjdGl2ZTogVHVpVGV4dGZpZWxkQ2xlYW5lckRpcmVjdGl2ZSxcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBjdXN0b21Db250ZW50RGlyZWN0aXZlOiBUdWlUZXh0ZmllbGRDdXN0b21Db250ZW50RGlyZWN0aXZlLFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGljb25EaXJlY3RpdmU6IFR1aVRleHRmaWVsZEljb25EaXJlY3RpdmUsXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgaWNvbkxlZnREaXJlY3RpdmU6IFR1aVRleHRmaWVsZEljb25MZWZ0RGlyZWN0aXZlLFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGxhYmVsT3V0c2lkZURpcmVjdGl2ZTogVHVpVGV4dGZpZWxkTGFiZWxPdXRzaWRlRGlyZWN0aXZlLFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHNpemVEaXJlY3RpdmU6IFR1aVRleHRmaWVsZFNpemVEaXJlY3RpdmUsXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgcHJlZml4RGlyZWN0aXZlOiBUdWlUZXh0ZmllbGRQcmVmaXhEaXJlY3RpdmUsXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgcG9zdGZpeERpcmVjdGl2ZTogVHVpVGV4dGZpZWxkUG9zdGZpeERpcmVjdGl2ZSxcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBmaWxsZXJEaXJlY3RpdmU6IFR1aVRleHRmaWVsZEZpbGxlckRpcmVjdGl2ZSxcbiAgICApIHt9XG5cbiAgICBwdWJsaWMgZ2V0IGFwcGVhcmFuY2UoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwZWFyYW5jZURpcmVjdGl2ZS5hcHBlYXJhbmNlIHx8IHRoaXMubGVnYWN5QXBwZWFyYW5jZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGNsZWFuZXIoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsZWFuZXJEaXJlY3RpdmUuY2xlYW5lcjtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGN1c3RvbUNvbnRlbnQoKTogUG9seW1vcnBoZXVzQ29udGVudCB7XG4gICAgICAgIHJldHVybiB0aGlzLmN1c3RvbUNvbnRlbnREaXJlY3RpdmUuY3VzdG9tQ29udGVudCB8fCAnJztcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGljb24oKTogUG9seW1vcnBoZXVzQ29udGVudDxUdWlDb250ZXh0PFR1aVNpemVMIHwgVHVpU2l6ZVM+PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmljb25EaXJlY3RpdmUuaWNvbjtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGljb25TdGFydCgpOiBQb2x5bW9ycGhldXNDb250ZW50PFR1aUNvbnRleHQ8VHVpU2l6ZUwgfCBUdWlTaXplUz4+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaWNvbkxlZnREaXJlY3RpdmUuaWNvblN0YXJ0O1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgbGFiZWxPdXRzaWRlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5sYWJlbE91dHNpZGVEaXJlY3RpdmUubGFiZWxPdXRzaWRlO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgc2l6ZSgpOiBUdWlTaXplTCB8IFR1aVNpemVTIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2l6ZURpcmVjdGl2ZS5zaXplO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgcHJlZml4KCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLnByZWZpeERpcmVjdGl2ZS5wcmVmaXg7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBwb3N0Zml4KCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLnBvc3RmaXhEaXJlY3RpdmUucG9zdGZpeDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGZpbGxlcigpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5maWxsZXJEaXJlY3RpdmUuZmlsbGVyO1xuICAgIH1cbn1cbiJdfQ==