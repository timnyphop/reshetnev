import { ChangeDetectorRef, InjectionToken } from '@angular/core';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { tuiWatch } from '@taiga-ui/cdk/observables';
import { TUI_TEXTFIELD_APPEARANCE } from '@taiga-ui/legacy/tokens';
import { merge, NEVER } from 'rxjs';
import { TuiTextfieldController } from './textfield.controller';
import { TUI_TEXTFIELD_OPTIONS } from './textfield.options';
import { TUI_TEXTFIELD_APPEARANCE_DIRECTIVE } from './textfield-appearance.directive';
import { TUI_TEXTFIELD_CLEANER } from './textfield-cleaner.directive';
import { TUI_TEXTFIELD_CUSTOM_CONTENT } from './textfield-custom-content.directive';
import { TUI_TEXTFIELD_FILLER } from './textfield-filler.directive';
import { TUI_TEXTFIELD_ICON } from './textfield-icon.directive';
import { TUI_TEXTFIELD_ICON_LEFT } from './textfield-icon-left.directive';
import { TUI_TEXTFIELD_LABEL_OUTSIDE } from './textfield-label-outside.directive';
import { TUI_TEXTFIELD_POSTFIX } from './textfield-postfix.directive';
import { TUI_TEXTFIELD_PREFIX } from './textfield-prefix.directive';
import { TUI_TEXTFIELD_SIZE } from './textfield-size.directive';
export const TUI_TEXTFIELD_WATCHED_CONTROLLER = new InjectionToken('[TUI_TEXTFIELD_WATCHED_CONTROLLER]');
export const TEXTFIELD_CONTROLLER_PROVIDER = [
    {
        provide: TUI_TEXTFIELD_WATCHED_CONTROLLER,
        deps: [
            ChangeDetectorRef,
            TUI_TEXTFIELD_OPTIONS,
            TUI_TEXTFIELD_APPEARANCE,
            TUI_TEXTFIELD_APPEARANCE_DIRECTIVE,
            TUI_TEXTFIELD_CLEANER,
            TUI_TEXTFIELD_CUSTOM_CONTENT,
            TUI_TEXTFIELD_ICON,
            TUI_TEXTFIELD_ICON_LEFT,
            TUI_TEXTFIELD_LABEL_OUTSIDE,
            TUI_TEXTFIELD_SIZE,
            TUI_TEXTFIELD_PREFIX,
            TUI_TEXTFIELD_POSTFIX,
            TUI_TEXTFIELD_FILLER,
        ],
        useFactory: (cdr, options, legacyAppearance, ...controllers) => {
            const change$ = merge(...controllers.map(({ change$ }) => change$ || NEVER)).pipe(tuiWatch(cdr), takeUntilDestroyed());
            change$.subscribe();
            return new TuiTextfieldController(change$, options, legacyAppearance, ...controllers);
        },
    },
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dGZpZWxkLWNvbnRyb2xsZXIucHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9sZWdhY3kvZGlyZWN0aXZlcy90ZXh0ZmllbGQtY29udHJvbGxlci90ZXh0ZmllbGQtY29udHJvbGxlci5wcm92aWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUMsaUJBQWlCLEVBQUUsY0FBYyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ2hFLE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLDRCQUE0QixDQUFDO0FBQzlELE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUNuRCxPQUFPLEVBQUMsd0JBQXdCLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUNqRSxPQUFPLEVBQUMsS0FBSyxFQUFFLEtBQUssRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUVsQyxPQUFPLEVBQUMsc0JBQXNCLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQztBQUU5RCxPQUFPLEVBQUMscUJBQXFCLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUUxRCxPQUFPLEVBQUMsa0NBQWtDLEVBQUMsTUFBTSxrQ0FBa0MsQ0FBQztBQUVwRixPQUFPLEVBQUMscUJBQXFCLEVBQUMsTUFBTSwrQkFBK0IsQ0FBQztBQUVwRSxPQUFPLEVBQUMsNEJBQTRCLEVBQUMsTUFBTSxzQ0FBc0MsQ0FBQztBQUVsRixPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSw4QkFBOEIsQ0FBQztBQUVsRSxPQUFPLEVBQUMsa0JBQWtCLEVBQUMsTUFBTSw0QkFBNEIsQ0FBQztBQUU5RCxPQUFPLEVBQUMsdUJBQXVCLEVBQUMsTUFBTSxpQ0FBaUMsQ0FBQztBQUV4RSxPQUFPLEVBQUMsMkJBQTJCLEVBQUMsTUFBTSxxQ0FBcUMsQ0FBQztBQUVoRixPQUFPLEVBQUMscUJBQXFCLEVBQUMsTUFBTSwrQkFBK0IsQ0FBQztBQUVwRSxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSw4QkFBOEIsQ0FBQztBQUVsRSxPQUFPLEVBQUMsa0JBQWtCLEVBQUMsTUFBTSw0QkFBNEIsQ0FBQztBQUU5RCxNQUFNLENBQUMsTUFBTSxnQ0FBZ0MsR0FDekMsSUFBSSxjQUFjLENBQXlCLG9DQUFvQyxDQUFDLENBQUM7QUFFckYsTUFBTSxDQUFDLE1BQU0sNkJBQTZCLEdBQWE7SUFDbkQ7UUFDSSxPQUFPLEVBQUUsZ0NBQWdDO1FBQ3pDLElBQUksRUFBRTtZQUNGLGlCQUFpQjtZQUNqQixxQkFBcUI7WUFDckIsd0JBQXdCO1lBQ3hCLGtDQUFrQztZQUNsQyxxQkFBcUI7WUFDckIsNEJBQTRCO1lBQzVCLGtCQUFrQjtZQUNsQix1QkFBdUI7WUFDdkIsMkJBQTJCO1lBQzNCLGtCQUFrQjtZQUNsQixvQkFBb0I7WUFDcEIscUJBQXFCO1lBQ3JCLG9CQUFvQjtTQUN2QjtRQUNELFVBQVUsRUFBRSxDQUNSLEdBQXNCLEVBQ3RCLE9BQTRCLEVBQzVCLGdCQUF3QixFQUN4QixHQUFHLFdBV0YsRUFDSCxFQUFFO1lBQ0EsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUNqQixHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFDLE9BQU8sRUFBQyxFQUFFLEVBQUUsQ0FBQyxPQUFPLElBQUksS0FBSyxDQUFDLENBQ3RELENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRSxrQkFBa0IsRUFBRSxDQUFDLENBQUM7WUFFNUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBRXBCLE9BQU8sSUFBSSxzQkFBc0IsQ0FDN0IsT0FBTyxFQUNQLE9BQU8sRUFDUCxnQkFBZ0IsRUFDaEIsR0FBRyxXQUFXLENBQ2pCLENBQUM7UUFDTixDQUFDO0tBQ0o7Q0FDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUge1Byb3ZpZGVyfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Q2hhbmdlRGV0ZWN0b3JSZWYsIEluamVjdGlvblRva2VufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7dGFrZVVudGlsRGVzdHJveWVkfSBmcm9tICdAYW5ndWxhci9jb3JlL3J4anMtaW50ZXJvcCc7XG5pbXBvcnQge3R1aVdhdGNofSBmcm9tICdAdGFpZ2EtdWkvY2RrL29ic2VydmFibGVzJztcbmltcG9ydCB7VFVJX1RFWFRGSUVMRF9BUFBFQVJBTkNFfSBmcm9tICdAdGFpZ2EtdWkvbGVnYWN5L3Rva2Vucyc7XG5pbXBvcnQge21lcmdlLCBORVZFUn0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7VHVpVGV4dGZpZWxkQ29udHJvbGxlcn0gZnJvbSAnLi90ZXh0ZmllbGQuY29udHJvbGxlcic7XG5pbXBvcnQgdHlwZSB7VHVpVGV4dGZpZWxkT3B0aW9uc30gZnJvbSAnLi90ZXh0ZmllbGQub3B0aW9ucyc7XG5pbXBvcnQge1RVSV9URVhURklFTERfT1BUSU9OU30gZnJvbSAnLi90ZXh0ZmllbGQub3B0aW9ucyc7XG5pbXBvcnQgdHlwZSB7VHVpVGV4dGZpZWxkQXBwZWFyYW5jZURpcmVjdGl2ZX0gZnJvbSAnLi90ZXh0ZmllbGQtYXBwZWFyYW5jZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHtUVUlfVEVYVEZJRUxEX0FQUEVBUkFOQ0VfRElSRUNUSVZFfSBmcm9tICcuL3RleHRmaWVsZC1hcHBlYXJhbmNlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgdHlwZSB7VHVpVGV4dGZpZWxkQ2xlYW5lckRpcmVjdGl2ZX0gZnJvbSAnLi90ZXh0ZmllbGQtY2xlYW5lci5kaXJlY3RpdmUnO1xuaW1wb3J0IHtUVUlfVEVYVEZJRUxEX0NMRUFORVJ9IGZyb20gJy4vdGV4dGZpZWxkLWNsZWFuZXIuZGlyZWN0aXZlJztcbmltcG9ydCB0eXBlIHtUdWlUZXh0ZmllbGRDdXN0b21Db250ZW50RGlyZWN0aXZlfSBmcm9tICcuL3RleHRmaWVsZC1jdXN0b20tY29udGVudC5kaXJlY3RpdmUnO1xuaW1wb3J0IHtUVUlfVEVYVEZJRUxEX0NVU1RPTV9DT05URU5UfSBmcm9tICcuL3RleHRmaWVsZC1jdXN0b20tY29udGVudC5kaXJlY3RpdmUnO1xuaW1wb3J0IHR5cGUge1R1aVRleHRmaWVsZEZpbGxlckRpcmVjdGl2ZX0gZnJvbSAnLi90ZXh0ZmllbGQtZmlsbGVyLmRpcmVjdGl2ZSc7XG5pbXBvcnQge1RVSV9URVhURklFTERfRklMTEVSfSBmcm9tICcuL3RleHRmaWVsZC1maWxsZXIuZGlyZWN0aXZlJztcbmltcG9ydCB0eXBlIHtUdWlUZXh0ZmllbGRJY29uRGlyZWN0aXZlfSBmcm9tICcuL3RleHRmaWVsZC1pY29uLmRpcmVjdGl2ZSc7XG5pbXBvcnQge1RVSV9URVhURklFTERfSUNPTn0gZnJvbSAnLi90ZXh0ZmllbGQtaWNvbi5kaXJlY3RpdmUnO1xuaW1wb3J0IHR5cGUge1R1aVRleHRmaWVsZEljb25MZWZ0RGlyZWN0aXZlfSBmcm9tICcuL3RleHRmaWVsZC1pY29uLWxlZnQuZGlyZWN0aXZlJztcbmltcG9ydCB7VFVJX1RFWFRGSUVMRF9JQ09OX0xFRlR9IGZyb20gJy4vdGV4dGZpZWxkLWljb24tbGVmdC5kaXJlY3RpdmUnO1xuaW1wb3J0IHR5cGUge1R1aVRleHRmaWVsZExhYmVsT3V0c2lkZURpcmVjdGl2ZX0gZnJvbSAnLi90ZXh0ZmllbGQtbGFiZWwtb3V0c2lkZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHtUVUlfVEVYVEZJRUxEX0xBQkVMX09VVFNJREV9IGZyb20gJy4vdGV4dGZpZWxkLWxhYmVsLW91dHNpZGUuZGlyZWN0aXZlJztcbmltcG9ydCB0eXBlIHtUdWlUZXh0ZmllbGRQb3N0Zml4RGlyZWN0aXZlfSBmcm9tICcuL3RleHRmaWVsZC1wb3N0Zml4LmRpcmVjdGl2ZSc7XG5pbXBvcnQge1RVSV9URVhURklFTERfUE9TVEZJWH0gZnJvbSAnLi90ZXh0ZmllbGQtcG9zdGZpeC5kaXJlY3RpdmUnO1xuaW1wb3J0IHR5cGUge1R1aVRleHRmaWVsZFByZWZpeERpcmVjdGl2ZX0gZnJvbSAnLi90ZXh0ZmllbGQtcHJlZml4LmRpcmVjdGl2ZSc7XG5pbXBvcnQge1RVSV9URVhURklFTERfUFJFRklYfSBmcm9tICcuL3RleHRmaWVsZC1wcmVmaXguZGlyZWN0aXZlJztcbmltcG9ydCB0eXBlIHtUdWlUZXh0ZmllbGRTaXplRGlyZWN0aXZlfSBmcm9tICcuL3RleHRmaWVsZC1zaXplLmRpcmVjdGl2ZSc7XG5pbXBvcnQge1RVSV9URVhURklFTERfU0laRX0gZnJvbSAnLi90ZXh0ZmllbGQtc2l6ZS5kaXJlY3RpdmUnO1xuXG5leHBvcnQgY29uc3QgVFVJX1RFWFRGSUVMRF9XQVRDSEVEX0NPTlRST0xMRVIgPVxuICAgIG5ldyBJbmplY3Rpb25Ub2tlbjxUdWlUZXh0ZmllbGRDb250cm9sbGVyPignW1RVSV9URVhURklFTERfV0FUQ0hFRF9DT05UUk9MTEVSXScpO1xuXG5leHBvcnQgY29uc3QgVEVYVEZJRUxEX0NPTlRST0xMRVJfUFJPVklERVI6IFByb3ZpZGVyID0gW1xuICAgIHtcbiAgICAgICAgcHJvdmlkZTogVFVJX1RFWFRGSUVMRF9XQVRDSEVEX0NPTlRST0xMRVIsXG4gICAgICAgIGRlcHM6IFtcbiAgICAgICAgICAgIENoYW5nZURldGVjdG9yUmVmLFxuICAgICAgICAgICAgVFVJX1RFWFRGSUVMRF9PUFRJT05TLFxuICAgICAgICAgICAgVFVJX1RFWFRGSUVMRF9BUFBFQVJBTkNFLFxuICAgICAgICAgICAgVFVJX1RFWFRGSUVMRF9BUFBFQVJBTkNFX0RJUkVDVElWRSxcbiAgICAgICAgICAgIFRVSV9URVhURklFTERfQ0xFQU5FUixcbiAgICAgICAgICAgIFRVSV9URVhURklFTERfQ1VTVE9NX0NPTlRFTlQsXG4gICAgICAgICAgICBUVUlfVEVYVEZJRUxEX0lDT04sXG4gICAgICAgICAgICBUVUlfVEVYVEZJRUxEX0lDT05fTEVGVCxcbiAgICAgICAgICAgIFRVSV9URVhURklFTERfTEFCRUxfT1VUU0lERSxcbiAgICAgICAgICAgIFRVSV9URVhURklFTERfU0laRSxcbiAgICAgICAgICAgIFRVSV9URVhURklFTERfUFJFRklYLFxuICAgICAgICAgICAgVFVJX1RFWFRGSUVMRF9QT1NURklYLFxuICAgICAgICAgICAgVFVJX1RFWFRGSUVMRF9GSUxMRVIsXG4gICAgICAgIF0sXG4gICAgICAgIHVzZUZhY3Rvcnk6IChcbiAgICAgICAgICAgIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgICAgICAgICBvcHRpb25zOiBUdWlUZXh0ZmllbGRPcHRpb25zLFxuICAgICAgICAgICAgbGVnYWN5QXBwZWFyYW5jZTogc3RyaW5nLFxuICAgICAgICAgICAgLi4uY29udHJvbGxlcnM6IFtcbiAgICAgICAgICAgICAgICBUdWlUZXh0ZmllbGRBcHBlYXJhbmNlRGlyZWN0aXZlLFxuICAgICAgICAgICAgICAgIFR1aVRleHRmaWVsZENsZWFuZXJEaXJlY3RpdmUsXG4gICAgICAgICAgICAgICAgVHVpVGV4dGZpZWxkQ3VzdG9tQ29udGVudERpcmVjdGl2ZSxcbiAgICAgICAgICAgICAgICBUdWlUZXh0ZmllbGRJY29uRGlyZWN0aXZlLFxuICAgICAgICAgICAgICAgIFR1aVRleHRmaWVsZEljb25MZWZ0RGlyZWN0aXZlLFxuICAgICAgICAgICAgICAgIFR1aVRleHRmaWVsZExhYmVsT3V0c2lkZURpcmVjdGl2ZSxcbiAgICAgICAgICAgICAgICBUdWlUZXh0ZmllbGRTaXplRGlyZWN0aXZlLFxuICAgICAgICAgICAgICAgIFR1aVRleHRmaWVsZFByZWZpeERpcmVjdGl2ZSxcbiAgICAgICAgICAgICAgICBUdWlUZXh0ZmllbGRQb3N0Zml4RGlyZWN0aXZlLFxuICAgICAgICAgICAgICAgIFR1aVRleHRmaWVsZEZpbGxlckRpcmVjdGl2ZSxcbiAgICAgICAgICAgIF1cbiAgICAgICAgKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjaGFuZ2UkID0gbWVyZ2UoXG4gICAgICAgICAgICAgICAgLi4uY29udHJvbGxlcnMubWFwKCh7Y2hhbmdlJH0pID0+IGNoYW5nZSQgfHwgTkVWRVIpLFxuICAgICAgICAgICAgKS5waXBlKHR1aVdhdGNoKGNkciksIHRha2VVbnRpbERlc3Ryb3llZCgpKTtcblxuICAgICAgICAgICAgY2hhbmdlJC5zdWJzY3JpYmUoKTtcblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBUdWlUZXh0ZmllbGRDb250cm9sbGVyKFxuICAgICAgICAgICAgICAgIGNoYW5nZSQsXG4gICAgICAgICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgICAgICAgICBsZWdhY3lBcHBlYXJhbmNlLFxuICAgICAgICAgICAgICAgIC4uLmNvbnRyb2xsZXJzLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICB9LFxuXTtcbiJdfQ==