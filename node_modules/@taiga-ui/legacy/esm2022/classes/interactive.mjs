import { Directive, EventEmitter, Input, Output } from '@angular/core';
import * as i0 from "@angular/core";
const TUI = 'tui_interactive_';
/**
 * @deprecated: drop in v5.0
 */
class AbstractTuiInteractive {
    static { this.autoId = 0; }
    constructor() {
        this.focusVisible = false;
        this.pseudoHover = null;
        this.pseudoActive = null;
        this.pseudoFocus = null;
        /**
         * Determines if component is focusable with keyboard.
         */
        this.focusable = true;
        this.nativeId = '';
        /**
         * Emits 'true' on focus and 'false' on blur.
         */
        this.focusedChange = new EventEmitter();
        this.focusVisibleChange = new EventEmitter();
        this.autoIdString = `${TUI}${AbstractTuiInteractive.autoId++}${Date.now()}`;
    }
    get computedDisabled() {
        return this.disabled;
    }
    get computedFocused() {
        return !this.computedDisabled && (this.pseudoFocus ?? this.focused);
    }
    get computedFocusVisible() {
        return !this.computedDisabled && (this.pseudoFocus ?? this.focusVisible);
    }
    get computedFocusable() {
        return !this.computedDisabled && (this.focusable || this.focused);
    }
    // TODO: 3.0 Consider removing since native input is exposed
    get id() {
        return this.nativeId || this.autoIdString;
    }
    updateFocused(focused) {
        this.focusedChange.emit(focused);
    }
    updateFocusVisible(focusVisible) {
        if (this.focusVisible === focusVisible) {
            return;
        }
        this.focusVisible = focusVisible;
        this.focusVisibleChange.emit(focusVisible);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: AbstractTuiInteractive, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: AbstractTuiInteractive, inputs: { pseudoHover: "pseudoHover", pseudoActive: "pseudoActive", pseudoFocus: "pseudoFocus", focusable: "focusable", nativeId: "nativeId" }, outputs: { focusedChange: "focusedChange", focusVisibleChange: "focusVisibleChange" }, host: { properties: { "attr.data-focused": "pseudoFocus", "class._disabled": "computedDisabled", "class._focused": "computedFocused", "class._focus-visible": "computedFocusVisible" } }, ngImport: i0 }); }
}
export { AbstractTuiInteractive };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: AbstractTuiInteractive, decorators: [{
            type: Directive,
            args: [{
                    host: {
                        '[attr.data-focused]': 'pseudoFocus',
                        '[class._disabled]': 'computedDisabled',
                        '[class._focused]': 'computedFocused',
                        '[class._focus-visible]': 'computedFocusVisible',
                    },
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { pseudoHover: [{
                type: Input
            }], pseudoActive: [{
                type: Input
            }], pseudoFocus: [{
                type: Input
            }], focusable: [{
                type: Input
            }], nativeId: [{
                type: Input
            }], focusedChange: [{
                type: Output
            }], focusVisibleChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJhY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9sZWdhY3kvY2xhc3Nlcy9pbnRlcmFjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDOztBQUVyRSxNQUFNLEdBQUcsR0FBRyxrQkFBa0IsQ0FBQztBQUUvQjs7R0FFRztBQUNILE1BUXNCLHNCQUFzQjthQUN6QixXQUFNLEdBQUcsQ0FBQyxBQUFKLENBQUs7SUFxQzFCO1FBN0JVLGlCQUFZLEdBQUcsS0FBSyxDQUFDO1FBR3hCLGdCQUFXLEdBQW1CLElBQUksQ0FBQztRQUduQyxpQkFBWSxHQUFtQixJQUFJLENBQUM7UUFHcEMsZ0JBQVcsR0FBbUIsSUFBSSxDQUFDO1FBRTFDOztXQUVHO1FBRUksY0FBUyxHQUFHLElBQUksQ0FBQztRQUdqQixhQUFRLEdBQUcsRUFBRSxDQUFDO1FBRXJCOztXQUVHO1FBRWEsa0JBQWEsR0FBRyxJQUFJLFlBQVksRUFBVyxDQUFDO1FBRzVDLHVCQUFrQixHQUFHLElBQUksWUFBWSxFQUFXLENBQUM7UUFHN0QsSUFBSSxDQUFDLFlBQVksR0FBRyxHQUFHLEdBQUcsR0FBRyxzQkFBc0IsQ0FBQyxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQztJQUNoRixDQUFDO0lBRUQsSUFBVyxnQkFBZ0I7UUFDdkIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxJQUFXLGVBQWU7UUFDdEIsT0FBTyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3hFLENBQUM7SUFFRCxJQUFXLG9CQUFvQjtRQUMzQixPQUFPLENBQUMsSUFBSSxDQUFDLGdCQUFnQixJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDN0UsQ0FBQztJQUVELElBQVcsaUJBQWlCO1FBQ3hCLE9BQU8sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN0RSxDQUFDO0lBRUQsNERBQTREO0lBQzVELElBQVcsRUFBRTtRQUNULE9BQU8sSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDO0lBQzlDLENBQUM7SUFFUyxhQUFhLENBQUMsT0FBZ0I7UUFDcEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUVTLGtCQUFrQixDQUFDLFlBQXFCO1FBQzlDLElBQUksSUFBSSxDQUFDLFlBQVksS0FBSyxZQUFZLEVBQUU7WUFDcEMsT0FBTztTQUNWO1FBRUQsSUFBSSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7UUFDakMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUMvQyxDQUFDOytHQTFFaUIsc0JBQXNCO21HQUF0QixzQkFBc0I7O1NBQXRCLHNCQUFzQjs0RkFBdEIsc0JBQXNCO2tCQVIzQyxTQUFTO21CQUFDO29CQUNQLElBQUksRUFBRTt3QkFDRixxQkFBcUIsRUFBRSxhQUFhO3dCQUNwQyxtQkFBbUIsRUFBRSxrQkFBa0I7d0JBQ3ZDLGtCQUFrQixFQUFFLGlCQUFpQjt3QkFDckMsd0JBQXdCLEVBQUUsc0JBQXNCO3FCQUNuRDtpQkFDSjswRUFhVSxXQUFXO3NCQURqQixLQUFLO2dCQUlDLFlBQVk7c0JBRGxCLEtBQUs7Z0JBSUMsV0FBVztzQkFEakIsS0FBSztnQkFPQyxTQUFTO3NCQURmLEtBQUs7Z0JBSUMsUUFBUTtzQkFEZCxLQUFLO2dCQU9VLGFBQWE7c0JBRDVCLE1BQU07Z0JBSVMsa0JBQWtCO3NCQURqQyxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmNvbnN0IFRVSSA9ICd0dWlfaW50ZXJhY3RpdmVfJztcblxuLyoqXG4gKiBAZGVwcmVjYXRlZDogZHJvcCBpbiB2NS4wXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIGhvc3Q6IHtcbiAgICAgICAgJ1thdHRyLmRhdGEtZm9jdXNlZF0nOiAncHNldWRvRm9jdXMnLFxuICAgICAgICAnW2NsYXNzLl9kaXNhYmxlZF0nOiAnY29tcHV0ZWREaXNhYmxlZCcsXG4gICAgICAgICdbY2xhc3MuX2ZvY3VzZWRdJzogJ2NvbXB1dGVkRm9jdXNlZCcsXG4gICAgICAgICdbY2xhc3MuX2ZvY3VzLXZpc2libGVdJzogJ2NvbXB1dGVkRm9jdXNWaXNpYmxlJyxcbiAgICB9LFxufSlcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBYnN0cmFjdFR1aUludGVyYWN0aXZlIHtcbiAgICBwcml2YXRlIHN0YXRpYyBhdXRvSWQgPSAwO1xuXG4gICAgcHVibGljIGFic3RyYWN0IGRpc2FibGVkOiBib29sZWFuO1xuXG4gICAgcHVibGljIGFic3RyYWN0IGZvY3VzZWQ6IGJvb2xlYW47XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IGF1dG9JZFN0cmluZzogc3RyaW5nO1xuXG4gICAgcHJvdGVjdGVkIGZvY3VzVmlzaWJsZSA9IGZhbHNlO1xuXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgcHNldWRvSG92ZXI6IGJvb2xlYW4gfCBudWxsID0gbnVsbDtcblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIHBzZXVkb0FjdGl2ZTogYm9vbGVhbiB8IG51bGwgPSBudWxsO1xuXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgcHNldWRvRm9jdXM6IGJvb2xlYW4gfCBudWxsID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgaWYgY29tcG9uZW50IGlzIGZvY3VzYWJsZSB3aXRoIGtleWJvYXJkLlxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGZvY3VzYWJsZSA9IHRydWU7XG5cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBuYXRpdmVJZCA9ICcnO1xuXG4gICAgLyoqXG4gICAgICogRW1pdHMgJ3RydWUnIG9uIGZvY3VzIGFuZCAnZmFsc2UnIG9uIGJsdXIuXG4gICAgICovXG4gICAgQE91dHB1dCgpXG4gICAgcHVibGljIHJlYWRvbmx5IGZvY3VzZWRDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPGJvb2xlYW4+KCk7XG5cbiAgICBAT3V0cHV0KClcbiAgICBwdWJsaWMgcmVhZG9ubHkgZm9jdXNWaXNpYmxlQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuYXV0b0lkU3RyaW5nID0gYCR7VFVJfSR7QWJzdHJhY3RUdWlJbnRlcmFjdGl2ZS5hdXRvSWQrK30ke0RhdGUubm93KCl9YDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGNvbXB1dGVkRGlzYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpc2FibGVkO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgY29tcHV0ZWRGb2N1c2VkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gIXRoaXMuY29tcHV0ZWREaXNhYmxlZCAmJiAodGhpcy5wc2V1ZG9Gb2N1cyA/PyB0aGlzLmZvY3VzZWQpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgY29tcHV0ZWRGb2N1c1Zpc2libGUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAhdGhpcy5jb21wdXRlZERpc2FibGVkICYmICh0aGlzLnBzZXVkb0ZvY3VzID8/IHRoaXMuZm9jdXNWaXNpYmxlKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGNvbXB1dGVkRm9jdXNhYmxlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gIXRoaXMuY29tcHV0ZWREaXNhYmxlZCAmJiAodGhpcy5mb2N1c2FibGUgfHwgdGhpcy5mb2N1c2VkKTtcbiAgICB9XG5cbiAgICAvLyBUT0RPOiAzLjAgQ29uc2lkZXIgcmVtb3Zpbmcgc2luY2UgbmF0aXZlIGlucHV0IGlzIGV4cG9zZWRcbiAgICBwdWJsaWMgZ2V0IGlkKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLm5hdGl2ZUlkIHx8IHRoaXMuYXV0b0lkU3RyaW5nO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCB1cGRhdGVGb2N1c2VkKGZvY3VzZWQ6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgdGhpcy5mb2N1c2VkQ2hhbmdlLmVtaXQoZm9jdXNlZCk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHVwZGF0ZUZvY3VzVmlzaWJsZShmb2N1c1Zpc2libGU6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuZm9jdXNWaXNpYmxlID09PSBmb2N1c1Zpc2libGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZm9jdXNWaXNpYmxlID0gZm9jdXNWaXNpYmxlO1xuICAgICAgICB0aGlzLmZvY3VzVmlzaWJsZUNoYW5nZS5lbWl0KGZvY3VzVmlzaWJsZSk7XG4gICAgfVxufVxuIl19