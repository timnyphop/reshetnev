import { CHAR_PLUS } from '@taiga-ui/cdk/constants';
/**
 * @deprecated: drop in v5.0
 * Use {@link https://maskito.dev/core-concepts/transformer maskitoTransform} instead!
 * @example
 * import {maskitoTransform} from '@maskito/core';
 *
 * const mask = {
 *     mask: ['+', '1', ' ', /\d/, /\d/, /\d/, ')', ' ', /\d/, /\d/, /\d/, '-', /\d/, /\d/, /\d/, /\d/],
 * };
 * maskitoTransform('12125552368', mask); // +1 (212) 555-2368
 * ___
 * @example
 * import {maskitoTransform} from '@maskito/core';
 * import {maskitoPhoneOptionsGenerator} from '@maskito/phone';
 * import metadata from 'libphonenumber-js/min/metadata';
 *
 * const options = maskitoPhoneOptionsGenerator({countryIsoCode: 'US', metadata});
 *
 * maskitoTransform('12125552368', mask); // +1 (212) 555-2368
 * ___
 * @deprecated Use {@link https://maskito.dev/core-concepts/transformer maskitoTransform} instead<br/>
 * Formats a string with the phone format +7XXXXXXXXXXXX or XXXXXXXXXXXX,
 * adding parentheses and hyphens.
 *
 * @param value the input string
 * @param countryCode a country code
 * @param phoneMask a phone number mask
 * @return the formatted phone string of the form +7 XXX XXX-XX-XX
 */
export function tuiFormatPhone(value, countryCode, phoneMask) {
    if (!value) {
        return '';
    }
    let result = countryCode;
    countryCode = countryCode.replaceAll(/[()]/g, '');
    if (!value.startsWith(countryCode)) {
        value = countryCode + value.replace(CHAR_PLUS, '');
    }
    const splitPhoneMask = phoneMask.split('');
    const splitValue = value.slice(countryCode.length).split('');
    result += ' ';
    if (splitValue.length === 0) {
        return result;
    }
    for (const mask of splitPhoneMask) {
        if (splitValue.length === 0) {
            break;
        }
        if (mask === '#') {
            result += splitValue[0] || '';
            splitValue.splice(0, 1);
        }
        else {
            result += mask;
        }
    }
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWF0LXBob25lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbGVnYWN5L3V0aWxzL2Zvcm1hdC1waG9uZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFFbEQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0E0Qkc7QUFDSCxNQUFNLFVBQVUsY0FBYyxDQUMxQixLQUFhLEVBQ2IsV0FBbUIsRUFDbkIsU0FBaUI7SUFFakIsSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNSLE9BQU8sRUFBRSxDQUFDO0tBQ2I7SUFFRCxJQUFJLE1BQU0sR0FBRyxXQUFXLENBQUM7SUFFekIsV0FBVyxHQUFHLFdBQVcsQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBRWxELElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxFQUFFO1FBQ2hDLEtBQUssR0FBRyxXQUFXLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUM7S0FDdEQ7SUFFRCxNQUFNLGNBQWMsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzNDLE1BQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUU3RCxNQUFNLElBQUksR0FBRyxDQUFDO0lBRWQsSUFBSSxVQUFVLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtRQUN6QixPQUFPLE1BQU0sQ0FBQztLQUNqQjtJQUVELEtBQUssTUFBTSxJQUFJLElBQUksY0FBYyxFQUFFO1FBQy9CLElBQUksVUFBVSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDekIsTUFBTTtTQUNUO1FBRUQsSUFBSSxJQUFJLEtBQUssR0FBRyxFQUFFO1lBQ2QsTUFBTSxJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDOUIsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDM0I7YUFBTTtZQUNILE1BQU0sSUFBSSxJQUFJLENBQUM7U0FDbEI7S0FDSjtJQUVELE9BQU8sTUFBTSxDQUFDO0FBQ2xCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NIQVJfUExVU30gZnJvbSAnQHRhaWdhLXVpL2Nkay9jb25zdGFudHMnO1xuXG4vKipcbiAqIEBkZXByZWNhdGVkOiBkcm9wIGluIHY1LjBcbiAqIFVzZSB7QGxpbmsgaHR0cHM6Ly9tYXNraXRvLmRldi9jb3JlLWNvbmNlcHRzL3RyYW5zZm9ybWVyIG1hc2tpdG9UcmFuc2Zvcm19IGluc3RlYWQhXG4gKiBAZXhhbXBsZVxuICogaW1wb3J0IHttYXNraXRvVHJhbnNmb3JtfSBmcm9tICdAbWFza2l0by9jb3JlJztcbiAqXG4gKiBjb25zdCBtYXNrID0ge1xuICogICAgIG1hc2s6IFsnKycsICcxJywgJyAnLCAvXFxkLywgL1xcZC8sIC9cXGQvLCAnKScsICcgJywgL1xcZC8sIC9cXGQvLCAvXFxkLywgJy0nLCAvXFxkLywgL1xcZC8sIC9cXGQvLCAvXFxkL10sXG4gKiB9O1xuICogbWFza2l0b1RyYW5zZm9ybSgnMTIxMjU1NTIzNjgnLCBtYXNrKTsgLy8gKzEgKDIxMikgNTU1LTIzNjhcbiAqIF9fX1xuICogQGV4YW1wbGVcbiAqIGltcG9ydCB7bWFza2l0b1RyYW5zZm9ybX0gZnJvbSAnQG1hc2tpdG8vY29yZSc7XG4gKiBpbXBvcnQge21hc2tpdG9QaG9uZU9wdGlvbnNHZW5lcmF0b3J9IGZyb20gJ0BtYXNraXRvL3Bob25lJztcbiAqIGltcG9ydCBtZXRhZGF0YSBmcm9tICdsaWJwaG9uZW51bWJlci1qcy9taW4vbWV0YWRhdGEnO1xuICpcbiAqIGNvbnN0IG9wdGlvbnMgPSBtYXNraXRvUGhvbmVPcHRpb25zR2VuZXJhdG9yKHtjb3VudHJ5SXNvQ29kZTogJ1VTJywgbWV0YWRhdGF9KTtcbiAqXG4gKiBtYXNraXRvVHJhbnNmb3JtKCcxMjEyNTU1MjM2OCcsIG1hc2spOyAvLyArMSAoMjEyKSA1NTUtMjM2OFxuICogX19fXG4gKiBAZGVwcmVjYXRlZCBVc2Uge0BsaW5rIGh0dHBzOi8vbWFza2l0by5kZXYvY29yZS1jb25jZXB0cy90cmFuc2Zvcm1lciBtYXNraXRvVHJhbnNmb3JtfSBpbnN0ZWFkPGJyLz5cbiAqIEZvcm1hdHMgYSBzdHJpbmcgd2l0aCB0aGUgcGhvbmUgZm9ybWF0ICs3WFhYWFhYWFhYWFhYIG9yIFhYWFhYWFhYWFhYWCxcbiAqIGFkZGluZyBwYXJlbnRoZXNlcyBhbmQgaHlwaGVucy5cbiAqXG4gKiBAcGFyYW0gdmFsdWUgdGhlIGlucHV0IHN0cmluZ1xuICogQHBhcmFtIGNvdW50cnlDb2RlIGEgY291bnRyeSBjb2RlXG4gKiBAcGFyYW0gcGhvbmVNYXNrIGEgcGhvbmUgbnVtYmVyIG1hc2tcbiAqIEByZXR1cm4gdGhlIGZvcm1hdHRlZCBwaG9uZSBzdHJpbmcgb2YgdGhlIGZvcm0gKzcgWFhYIFhYWC1YWC1YWFxuICovXG5leHBvcnQgZnVuY3Rpb24gdHVpRm9ybWF0UGhvbmUoXG4gICAgdmFsdWU6IHN0cmluZyxcbiAgICBjb3VudHJ5Q29kZTogc3RyaW5nLFxuICAgIHBob25lTWFzazogc3RyaW5nLFxuKTogc3RyaW5nIHtcbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0gY291bnRyeUNvZGU7XG5cbiAgICBjb3VudHJ5Q29kZSA9IGNvdW50cnlDb2RlLnJlcGxhY2VBbGwoL1soKV0vZywgJycpO1xuXG4gICAgaWYgKCF2YWx1ZS5zdGFydHNXaXRoKGNvdW50cnlDb2RlKSkge1xuICAgICAgICB2YWx1ZSA9IGNvdW50cnlDb2RlICsgdmFsdWUucmVwbGFjZShDSEFSX1BMVVMsICcnKTtcbiAgICB9XG5cbiAgICBjb25zdCBzcGxpdFBob25lTWFzayA9IHBob25lTWFzay5zcGxpdCgnJyk7XG4gICAgY29uc3Qgc3BsaXRWYWx1ZSA9IHZhbHVlLnNsaWNlKGNvdW50cnlDb2RlLmxlbmd0aCkuc3BsaXQoJycpO1xuXG4gICAgcmVzdWx0ICs9ICcgJztcblxuICAgIGlmIChzcGxpdFZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGZvciAoY29uc3QgbWFzayBvZiBzcGxpdFBob25lTWFzaykge1xuICAgICAgICBpZiAoc3BsaXRWYWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1hc2sgPT09ICcjJykge1xuICAgICAgICAgICAgcmVzdWx0ICs9IHNwbGl0VmFsdWVbMF0gfHwgJyc7XG4gICAgICAgICAgICBzcGxpdFZhbHVlLnNwbGljZSgwLCAxKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSBtYXNrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbiJdfQ==