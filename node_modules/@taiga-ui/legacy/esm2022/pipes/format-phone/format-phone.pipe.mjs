/// <reference types="@taiga-ui/tsconfig/ng-dev-mode" />
import { Pipe } from '@angular/core';
import { CHAR_PLUS } from '@taiga-ui/cdk/constants';
import { tuiFormatPhone } from '@taiga-ui/legacy/utils';
import * as i0 from "@angular/core";
/**
 * @deprecated: drop in v5.0
 */
class TuiFormatPhonePipe {
    /**
     * Use {@link https://maskito.dev/frameworks/angular#pipe MaskitoPipe} instead!
     * ```ts
     * import {maskitoTransform} from '@maskito/core';
     * import {maskitoPhoneOptionsGenerator} from '@maskito/phone';
     * import metadata from 'libphonenumber-js/min/metadata';
     *
     * @Component({
     *     standalone: true,
     *     imports: [MaskitoPipe],
     *     template: `
     *         Phone: {{'12125552368' | maskito: options}}
     *         <!-- Phone: +1 (212) 555-2368 -->
     *     `,
     * })
     * export class YourComponent {
     *     options = maskitoPhoneOptionsGenerator({countryIsoCode: 'US', metadata});
     * }
     * ```
     * ___
     * @deprecated Use {@link https://maskito.dev/frameworks/angular#pipe MaskitoPipe} instead!
     * Formats phone number string of +7XXXXXXXXXX format with adding separator symbols
     * @param value
     * @param countryCode
     * @param phoneMask
     * @return formatted phone number string +7(XXX)XXX-XX-XX
     */
    transform(value, countryCode = `${CHAR_PLUS}7`, phoneMask = '(###) ###-##-##') {
        ngDevMode &&
            console.assert(value !== undefined, 'Undefined was passed to tuiFormatPhone pipe');
        return tuiFormatPhone(value, countryCode, phoneMask);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiFormatPhonePipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "16.2.12", ngImport: i0, type: TuiFormatPhonePipe, isStandalone: true, name: "tuiFormatPhone" }); }
}
export { TuiFormatPhonePipe };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiFormatPhonePipe, decorators: [{
            type: Pipe,
            args: [{
                    standalone: true,
                    name: 'tuiFormatPhone',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWF0LXBob25lLnBpcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9sZWdhY3kvcGlwZXMvZm9ybWF0LXBob25lL2Zvcm1hdC1waG9uZS5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdEQUF3RDtBQUV4RCxPQUFPLEVBQUMsSUFBSSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ25DLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUNsRCxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sd0JBQXdCLENBQUM7O0FBRXREOztHQUVHO0FBQ0gsTUFJYSxrQkFBa0I7SUFDM0I7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O09BMEJHO0lBQ0ksU0FBUyxDQUNaLEtBQWEsRUFDYixXQUFXLEdBQUcsR0FBRyxTQUFTLEdBQUcsRUFDN0IsU0FBUyxHQUFHLGlCQUFpQjtRQUU3QixTQUFTO1lBQ0wsT0FBTyxDQUFDLE1BQU0sQ0FDVixLQUFLLEtBQUssU0FBUyxFQUNuQiw2Q0FBNkMsQ0FDaEQsQ0FBQztRQUVOLE9BQU8sY0FBYyxDQUFDLEtBQUssRUFBRSxXQUFXLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDekQsQ0FBQzsrR0F4Q1Esa0JBQWtCOzZHQUFsQixrQkFBa0I7O1NBQWxCLGtCQUFrQjs0RkFBbEIsa0JBQWtCO2tCQUo5QixJQUFJO21CQUFDO29CQUNGLFVBQVUsRUFBRSxJQUFJO29CQUNoQixJQUFJLEVBQUUsZ0JBQWdCO2lCQUN6QiIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHR5cGVzPVwiQHRhaWdhLXVpL3RzY29uZmlnL25nLWRldi1tb2RlXCIgLz5cbmltcG9ydCB0eXBlIHtQaXBlVHJhbnNmb3JtfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7UGlwZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0NIQVJfUExVU30gZnJvbSAnQHRhaWdhLXVpL2Nkay9jb25zdGFudHMnO1xuaW1wb3J0IHt0dWlGb3JtYXRQaG9uZX0gZnJvbSAnQHRhaWdhLXVpL2xlZ2FjeS91dGlscyc7XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQ6IGRyb3AgaW4gdjUuMFxuICovXG5AUGlwZSh7XG4gICAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgICBuYW1lOiAndHVpRm9ybWF0UGhvbmUnLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlGb3JtYXRQaG9uZVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgICAvKipcbiAgICAgKiBVc2Uge0BsaW5rIGh0dHBzOi8vbWFza2l0by5kZXYvZnJhbWV3b3Jrcy9hbmd1bGFyI3BpcGUgTWFza2l0b1BpcGV9IGluc3RlYWQhXG4gICAgICogYGBgdHNcbiAgICAgKiBpbXBvcnQge21hc2tpdG9UcmFuc2Zvcm19IGZyb20gJ0BtYXNraXRvL2NvcmUnO1xuICAgICAqIGltcG9ydCB7bWFza2l0b1Bob25lT3B0aW9uc0dlbmVyYXRvcn0gZnJvbSAnQG1hc2tpdG8vcGhvbmUnO1xuICAgICAqIGltcG9ydCBtZXRhZGF0YSBmcm9tICdsaWJwaG9uZW51bWJlci1qcy9taW4vbWV0YWRhdGEnO1xuICAgICAqXG4gICAgICogQENvbXBvbmVudCh7XG4gICAgICogICAgIHN0YW5kYWxvbmU6IHRydWUsXG4gICAgICogICAgIGltcG9ydHM6IFtNYXNraXRvUGlwZV0sXG4gICAgICogICAgIHRlbXBsYXRlOiBgXG4gICAgICogICAgICAgICBQaG9uZToge3snMTIxMjU1NTIzNjgnIHwgbWFza2l0bzogb3B0aW9uc319XG4gICAgICogICAgICAgICA8IS0tIFBob25lOiArMSAoMjEyKSA1NTUtMjM2OCAtLT5cbiAgICAgKiAgICAgYCxcbiAgICAgKiB9KVxuICAgICAqIGV4cG9ydCBjbGFzcyBZb3VyQ29tcG9uZW50IHtcbiAgICAgKiAgICAgb3B0aW9ucyA9IG1hc2tpdG9QaG9uZU9wdGlvbnNHZW5lcmF0b3Ioe2NvdW50cnlJc29Db2RlOiAnVVMnLCBtZXRhZGF0YX0pO1xuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKiBfX19cbiAgICAgKiBAZGVwcmVjYXRlZCBVc2Uge0BsaW5rIGh0dHBzOi8vbWFza2l0by5kZXYvZnJhbWV3b3Jrcy9hbmd1bGFyI3BpcGUgTWFza2l0b1BpcGV9IGluc3RlYWQhXG4gICAgICogRm9ybWF0cyBwaG9uZSBudW1iZXIgc3RyaW5nIG9mICs3WFhYWFhYWFhYWCBmb3JtYXQgd2l0aCBhZGRpbmcgc2VwYXJhdG9yIHN5bWJvbHNcbiAgICAgKiBAcGFyYW0gdmFsdWVcbiAgICAgKiBAcGFyYW0gY291bnRyeUNvZGVcbiAgICAgKiBAcGFyYW0gcGhvbmVNYXNrXG4gICAgICogQHJldHVybiBmb3JtYXR0ZWQgcGhvbmUgbnVtYmVyIHN0cmluZyArNyhYWFgpWFhYLVhYLVhYXG4gICAgICovXG4gICAgcHVibGljIHRyYW5zZm9ybShcbiAgICAgICAgdmFsdWU6IHN0cmluZyxcbiAgICAgICAgY291bnRyeUNvZGUgPSBgJHtDSEFSX1BMVVN9N2AsXG4gICAgICAgIHBob25lTWFzayA9ICcoIyMjKSAjIyMtIyMtIyMnLFxuICAgICk6IHN0cmluZyB7XG4gICAgICAgIG5nRGV2TW9kZSAmJlxuICAgICAgICAgICAgY29uc29sZS5hc3NlcnQoXG4gICAgICAgICAgICAgICAgdmFsdWUgIT09IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAnVW5kZWZpbmVkIHdhcyBwYXNzZWQgdG8gdHVpRm9ybWF0UGhvbmUgcGlwZScsXG4gICAgICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiB0dWlGb3JtYXRQaG9uZSh2YWx1ZSwgY291bnRyeUNvZGUsIHBob25lTWFzayk7XG4gICAgfVxufVxuIl19