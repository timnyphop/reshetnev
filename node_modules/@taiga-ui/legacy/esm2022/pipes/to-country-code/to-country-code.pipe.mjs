import { inject, Pipe } from '@angular/core';
import { CHAR_PLUS } from '@taiga-ui/cdk/constants';
import { TUI_COUNTRIES_MASKS } from '@taiga-ui/legacy/tokens';
import { tuiGetMaxAllowedPhoneLength, tuiIsoToCountryCode, tuiNotKzRegion, } from '@taiga-ui/legacy/utils';
import * as i0 from "@angular/core";
/**
 * @deprecated: drop in v5.0
 * use `maskitoGetCountryFromNumber` from `@maskito/phone` instead
 * ```
 * npm i @maskito/phone
 * ```
 *
 * ```ts
 * import {maskitoGetCountryFromNumber} from '@maskito/phone';
 * import metadata from 'libphonenumber-js/min/metadata';
 *
 * maskitoGetCountryFromNumber('+1 (212) 555-2368', metadata); // 'US'
 * maskitoGetCountryFromNumber('+12125552368', metadata); // 'US'
 * ```
 */
class TuiToCountryCodePipe {
    constructor() {
        this.countriesMasks = inject(TUI_COUNTRIES_MASKS);
    }
    /**
     * @deprecated use `maskitoGetCountryFromNumber` from `@maskito/phone` instead
     * ```
     * npm i @maskito/phone
     * ```
     *
     * ```ts
     * import {maskitoGetCountryFromNumber} from '@maskito/phone';
     * import metadata from 'libphonenumber-js/min/metadata';
     *
     * maskitoGetCountryFromNumber('+1 (212) 555-2368', metadata); // 'US'
     * maskitoGetCountryFromNumber('+12125552368', metadata); // 'US'
     * ```
     */
    transform(value, countries) {
        return countries.find((countryIsoCode) => {
            const ruCodeTest = countryIsoCode === 'RU' &&
                /^[78]/.test(value) &&
                /^(?!880[1-9 ])/.test(value) &&
                value.length + 1 ===
                    tuiGetMaxAllowedPhoneLength(this.countriesMasks, 'RU');
            const matched = ruCodeTest ||
                (value.startsWith(tuiIsoToCountryCode(this.countriesMasks, countryIsoCode).replace(CHAR_PLUS, '')) &&
                    value.length + 1 ===
                        tuiGetMaxAllowedPhoneLength(this.countriesMasks, countryIsoCode));
            if (matched) {
                switch (countryIsoCode) {
                    case 'KZ':
                        return !tuiNotKzRegion(value);
                    case 'RU':
                        return tuiNotKzRegion(value);
                    default:
                        return true;
                }
            }
            return false;
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiToCountryCodePipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "16.2.12", ngImport: i0, type: TuiToCountryCodePipe, isStandalone: true, name: "tuiToCountryCode" }); }
}
export { TuiToCountryCodePipe };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiToCountryCodePipe, decorators: [{
            type: Pipe,
            args: [{
                    standalone: true,
                    name: 'tuiToCountryCode',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG8tY291bnRyeS1jb2RlLnBpcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9sZWdhY3kvcGlwZXMvdG8tY291bnRyeS1jb2RlL3RvLWNvdW50cnktY29kZS5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBQyxNQUFNLEVBQUUsSUFBSSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUVsRCxPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUM1RCxPQUFPLEVBQ0gsMkJBQTJCLEVBQzNCLG1CQUFtQixFQUNuQixjQUFjLEdBQ2pCLE1BQU0sd0JBQXdCLENBQUM7O0FBRWhDOzs7Ozs7Ozs7Ozs7OztHQWNHO0FBQ0gsTUFJYSxvQkFBb0I7SUFKakM7UUFLcUIsbUJBQWMsR0FBRyxNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBQztLQXFEakU7SUFuREc7Ozs7Ozs7Ozs7Ozs7T0FhRztJQUNJLFNBQVMsQ0FDWixLQUFhLEVBQ2IsU0FBdUM7UUFFdkMsT0FBTyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsY0FBYyxFQUFFLEVBQUU7WUFDckMsTUFBTSxVQUFVLEdBQ1osY0FBYyxLQUFLLElBQUk7Z0JBQ3ZCLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO2dCQUNuQixnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO2dCQUM1QixLQUFLLENBQUMsTUFBTSxHQUFHLENBQUM7b0JBQ1osMkJBQTJCLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUUvRCxNQUFNLE9BQU8sR0FDVCxVQUFVO2dCQUNWLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FDYixtQkFBbUIsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLGNBQWMsQ0FBQyxDQUFDLE9BQU8sQ0FDNUQsU0FBUyxFQUNULEVBQUUsQ0FDTCxDQUNKO29CQUNHLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQzt3QkFDWiwyQkFBMkIsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLGNBQWMsQ0FBQyxDQUFDLENBQUM7WUFFOUUsSUFBSSxPQUFPLEVBQUU7Z0JBQ1QsUUFBUSxjQUFjLEVBQUU7b0JBQ3BCLEtBQUssSUFBSTt3QkFDTCxPQUFPLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO29CQUNsQyxLQUFLLElBQUk7d0JBQ0wsT0FBTyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7b0JBQ2pDO3dCQUNJLE9BQU8sSUFBSSxDQUFDO2lCQUNuQjthQUNKO1lBRUQsT0FBTyxLQUFLLENBQUM7UUFDakIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDOytHQXJEUSxvQkFBb0I7NkdBQXBCLG9CQUFvQjs7U0FBcEIsb0JBQW9COzRGQUFwQixvQkFBb0I7a0JBSmhDLElBQUk7bUJBQUM7b0JBQ0YsVUFBVSxFQUFFLElBQUk7b0JBQ2hCLElBQUksRUFBRSxrQkFBa0I7aUJBQzNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUge1BpcGVUcmFuc2Zvcm19IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtpbmplY3QsIFBpcGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtDSEFSX1BMVVN9IGZyb20gJ0B0YWlnYS11aS9jZGsvY29uc3RhbnRzJztcbmltcG9ydCB0eXBlIHtUdWlDb3VudHJ5SXNvQ29kZX0gZnJvbSAnQHRhaWdhLXVpL2kxOG4vdHlwZXMnO1xuaW1wb3J0IHtUVUlfQ09VTlRSSUVTX01BU0tTfSBmcm9tICdAdGFpZ2EtdWkvbGVnYWN5L3Rva2Vucyc7XG5pbXBvcnQge1xuICAgIHR1aUdldE1heEFsbG93ZWRQaG9uZUxlbmd0aCxcbiAgICB0dWlJc29Ub0NvdW50cnlDb2RlLFxuICAgIHR1aU5vdEt6UmVnaW9uLFxufSBmcm9tICdAdGFpZ2EtdWkvbGVnYWN5L3V0aWxzJztcblxuLyoqXG4gKiBAZGVwcmVjYXRlZDogZHJvcCBpbiB2NS4wXG4gKiB1c2UgYG1hc2tpdG9HZXRDb3VudHJ5RnJvbU51bWJlcmAgZnJvbSBgQG1hc2tpdG8vcGhvbmVgIGluc3RlYWRcbiAqIGBgYFxuICogbnBtIGkgQG1hc2tpdG8vcGhvbmVcbiAqIGBgYFxuICpcbiAqIGBgYHRzXG4gKiBpbXBvcnQge21hc2tpdG9HZXRDb3VudHJ5RnJvbU51bWJlcn0gZnJvbSAnQG1hc2tpdG8vcGhvbmUnO1xuICogaW1wb3J0IG1ldGFkYXRhIGZyb20gJ2xpYnBob25lbnVtYmVyLWpzL21pbi9tZXRhZGF0YSc7XG4gKlxuICogbWFza2l0b0dldENvdW50cnlGcm9tTnVtYmVyKCcrMSAoMjEyKSA1NTUtMjM2OCcsIG1ldGFkYXRhKTsgLy8gJ1VTJ1xuICogbWFza2l0b0dldENvdW50cnlGcm9tTnVtYmVyKCcrMTIxMjU1NTIzNjgnLCBtZXRhZGF0YSk7IC8vICdVUydcbiAqIGBgYFxuICovXG5AUGlwZSh7XG4gICAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgICBuYW1lOiAndHVpVG9Db3VudHJ5Q29kZScsXG59KVxuZXhwb3J0IGNsYXNzIFR1aVRvQ291bnRyeUNvZGVQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBjb3VudHJpZXNNYXNrcyA9IGluamVjdChUVUlfQ09VTlRSSUVTX01BU0tTKTtcblxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIHVzZSBgbWFza2l0b0dldENvdW50cnlGcm9tTnVtYmVyYCBmcm9tIGBAbWFza2l0by9waG9uZWAgaW5zdGVhZFxuICAgICAqIGBgYFxuICAgICAqIG5wbSBpIEBtYXNraXRvL3Bob25lXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBgYGB0c1xuICAgICAqIGltcG9ydCB7bWFza2l0b0dldENvdW50cnlGcm9tTnVtYmVyfSBmcm9tICdAbWFza2l0by9waG9uZSc7XG4gICAgICogaW1wb3J0IG1ldGFkYXRhIGZyb20gJ2xpYnBob25lbnVtYmVyLWpzL21pbi9tZXRhZGF0YSc7XG4gICAgICpcbiAgICAgKiBtYXNraXRvR2V0Q291bnRyeUZyb21OdW1iZXIoJysxICgyMTIpIDU1NS0yMzY4JywgbWV0YWRhdGEpOyAvLyAnVVMnXG4gICAgICogbWFza2l0b0dldENvdW50cnlGcm9tTnVtYmVyKCcrMTIxMjU1NTIzNjgnLCBtZXRhZGF0YSk7IC8vICdVUydcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBwdWJsaWMgdHJhbnNmb3JtKFxuICAgICAgICB2YWx1ZTogc3RyaW5nLFxuICAgICAgICBjb3VudHJpZXM6IHJlYWRvbmx5IFR1aUNvdW50cnlJc29Db2RlW10sXG4gICAgKTogVHVpQ291bnRyeUlzb0NvZGUgfCB1bmRlZmluZWQge1xuICAgICAgICByZXR1cm4gY291bnRyaWVzLmZpbmQoKGNvdW50cnlJc29Db2RlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBydUNvZGVUZXN0ID1cbiAgICAgICAgICAgICAgICBjb3VudHJ5SXNvQ29kZSA9PT0gJ1JVJyAmJlxuICAgICAgICAgICAgICAgIC9eWzc4XS8udGVzdCh2YWx1ZSkgJiZcbiAgICAgICAgICAgICAgICAvXig/ITg4MFsxLTkgXSkvLnRlc3QodmFsdWUpICYmXG4gICAgICAgICAgICAgICAgdmFsdWUubGVuZ3RoICsgMSA9PT1cbiAgICAgICAgICAgICAgICAgICAgdHVpR2V0TWF4QWxsb3dlZFBob25lTGVuZ3RoKHRoaXMuY291bnRyaWVzTWFza3MsICdSVScpO1xuXG4gICAgICAgICAgICBjb25zdCBtYXRjaGVkID1cbiAgICAgICAgICAgICAgICBydUNvZGVUZXN0IHx8XG4gICAgICAgICAgICAgICAgKHZhbHVlLnN0YXJ0c1dpdGgoXG4gICAgICAgICAgICAgICAgICAgIHR1aUlzb1RvQ291bnRyeUNvZGUodGhpcy5jb3VudHJpZXNNYXNrcywgY291bnRyeUlzb0NvZGUpLnJlcGxhY2UoXG4gICAgICAgICAgICAgICAgICAgICAgICBDSEFSX1BMVVMsXG4gICAgICAgICAgICAgICAgICAgICAgICAnJyxcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICApICYmXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlLmxlbmd0aCArIDEgPT09XG4gICAgICAgICAgICAgICAgICAgICAgICB0dWlHZXRNYXhBbGxvd2VkUGhvbmVMZW5ndGgodGhpcy5jb3VudHJpZXNNYXNrcywgY291bnRyeUlzb0NvZGUpKTtcblxuICAgICAgICAgICAgaWYgKG1hdGNoZWQpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGNvdW50cnlJc29Db2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0taJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhdHVpTm90S3pSZWdpb24odmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdSVSc6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHVpTm90S3pSZWdpb24odmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdfQ==