import { EventEmitter } from '@angular/core';
import type { SafeStyle } from '@angular/platform-browser';
import type { TuiGradientDirection } from '@taiga-ui/cdk/utils/color';
import * as i0 from "@angular/core";
export declare class TuiColorSelectorComponent {
    private readonly selectorOptions;
    private stops;
    private currentStop;
    private direction;
    private readonly sanitizer;
    protected open: boolean;
    colors: ReadonlyMap<string, string>;
    readonly colorChange: EventEmitter<string>;
    color: [number, number, number, number];
    readonly modes: [string, string];
    currentMode: string;
    readonly buttons: readonly TuiGradientDirection[];
    set colorSetter(color: string);
    get selectorMode(): boolean;
    get palette(): Map<string, string>;
    get stopsKeys(): number[];
    get currentColor(): [number, number, number, number];
    get gradient(): SafeStyle;
    get isGradient(): boolean;
    getIcon(direction: TuiGradientDirection): string;
    isModeActive(mode: string): boolean;
    isDirectionActive(direction: TuiGradientDirection): boolean;
    onPalettePick(color: string): void;
    onDirectionChange(direction: TuiGradientDirection): void;
    onModeSelect(mode: string): void;
    onIndexChange(index: number): void;
    onColorChange(color: [number, number, number, number]): void;
    onStopsChange(stopsKeys: readonly number[]): void;
    private getStopsKeys;
    private filterPalette;
    private updateColor;
    private getGradient;
    private getStop;
    private addStop;
    private removeStop;
    private replaceStop;
    private parseGradient;
    private parseColor;
    static ɵfac: i0.ɵɵFactoryDeclaration<TuiColorSelectorComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TuiColorSelectorComponent, "tui-color-selector", never, { "colors": { "alias": "colors"; "required": false; }; "colorSetter": { "alias": "color"; "required": false; }; }, { "colorChange": "colorChange"; }, never, never, false, never>;
}
