import type { MaskitoOptions } from '@maskito/core';
import type { TuiDateMode } from '@taiga-ui/cdk/date-time';
import { TuiDay, TuiMonth } from '@taiga-ui/cdk/date-time';
import type { TuiActiveZone } from '@taiga-ui/cdk/directives/active-zone';
import type { TuiBooleanHandler, TuiContext } from '@taiga-ui/cdk/types';
import type { TuiMarkerHandler } from '@taiga-ui/core/components/calendar';
import type { TuiSizeL, TuiSizeS } from '@taiga-ui/core/types';
import type { TuiInputDateOptions } from '@taiga-ui/kit/tokens';
import type { TuiNamedDay } from '@taiga-ui/legacy/classes';
import { AbstractTuiNullableControl } from '@taiga-ui/legacy/classes';
import type { TuiFocusableElementAccessor } from '@taiga-ui/legacy/tokens';
import type { Observable } from 'rxjs';
import * as i0 from "@angular/core";
export declare class TuiInputDateComponent extends AbstractTuiNullableControl<TuiDay> implements TuiFocusableElementAccessor {
    private readonly textfield?;
    private readonly options;
    private readonly textfieldSize;
    private readonly mobileCalendar;
    private month;
    min: TuiDay | null;
    max: TuiDay | null;
    disabledItemHandler: TuiBooleanHandler<TuiDay>;
    markerHandler: TuiMarkerHandler | null;
    items: readonly TuiNamedDay[];
    defaultActiveYearMonth: TuiMonth;
    dateFormat: import("@taiga-ui/core/tokens").TuiDateFormatSettings;
    protected open: boolean;
    protected readonly dateTexts$: Observable<Record<TuiDateMode, string>>;
    protected readonly valueTransformer: import("@taiga-ui/cdk/classes").TuiValueTransformer<TuiDay | null, unknown> | null;
    protected readonly isMobile: boolean;
    protected readonly type: TuiContext<TuiActiveZone>;
    protected readonly filler$: Observable<string>;
    protected readonly dateFormat$: import("rxjs").Subscription;
    get computedMin(): TuiDay;
    get computedMax(): TuiDay;
    get nativeFocusableElement(): HTMLInputElement | null;
    get focused(): boolean;
    get nativeValue(): string;
    set nativeValue(value: string);
    get computedValue(): string;
    onValueChange(value: string): void;
    setDisabledState(): void;
    writeValue(value: TuiDay | null): void;
    protected get size(): TuiSizeL | TuiSizeS;
    protected get nativePicker(): boolean;
    protected get calendarIcon(): TuiInputDateOptions['icon'];
    protected get computedActiveYearMonth(): TuiMonth;
    protected get computedMask(): MaskitoOptions;
    protected get activeItem(): TuiNamedDay | null;
    protected onClick(): void;
    protected getComputedFiller(filler: string): string;
    protected onIconClick(): void;
    protected onDayClick(value: TuiDay): void;
    protected onMonthChange(month: TuiMonth): void;
    protected onOpenChange(open: boolean): void;
    protected onFocused(focused: boolean): void;
    protected valueIdenticalComparator(oldValue: TuiDay | null, newValue: TuiDay | null): boolean;
    private computeMaskOptions;
    static ɵfac: i0.ɵɵFactoryDeclaration<TuiInputDateComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TuiInputDateComponent, "tui-input-date:not([multiple])", never, { "min": { "alias": "min"; "required": false; }; "max": { "alias": "max"; "required": false; }; "disabledItemHandler": { "alias": "disabledItemHandler"; "required": false; }; "markerHandler": { "alias": "markerHandler"; "required": false; }; "items": { "alias": "items"; "required": false; }; "defaultActiveYearMonth": { "alias": "defaultActiveYearMonth"; "required": false; }; }, {}, never, ["*", "input"], false, never>;
}
