import type { TuiContext } from '@taiga-ui/cdk/types';
import type { TuiKeySteps } from '@taiga-ui/kit/components/slider';
import { AbstractTuiControl } from '@taiga-ui/legacy/classes';
import type { TuiFocusableElementAccessor, TuiNativeFocusableElement } from '@taiga-ui/legacy/tokens';
import type { PolymorpheusContent } from '@taiga-ui/polymorpheus';
import * as i0 from "@angular/core";
export declare class TuiInputSliderComponent extends AbstractTuiControl<number> implements TuiFocusableElementAccessor {
    private readonly inputNumberRef?;
    private readonly sliderRef?;
    protected textfieldValue: number;
    protected readonly controller: import("@taiga-ui/legacy/directives").TuiTextfieldController;
    min: number;
    max: number;
    quantum: number;
    steps: number;
    segments: number;
    keySteps: TuiKeySteps | null;
    valueContent: PolymorpheusContent<TuiContext<number>>;
    get nativeFocusableElement(): TuiNativeFocusableElement | null;
    get focused(): boolean;
    writeValue(value: number | null): void;
    protected get prefix(): string;
    protected get postfix(): string;
    protected get computedSteps(): number;
    protected get precision(): number;
    protected get showValueContent(): boolean;
    protected get step(): number;
    protected computeKeySteps(keySteps: TuiKeySteps | null, min: number, max: number): TuiKeySteps;
    protected focusTextInput(): void;
    protected safelyUpdateValue(value: number | null): void;
    protected onVerticalArrowKeyDown(coefficient: number): void;
    protected onSliderChange(newValue: number): void;
    protected onFocused(focused: boolean): void;
    protected getFallbackValue(): number;
    private valueGuard;
    static ɵfac: i0.ɵɵFactoryDeclaration<TuiInputSliderComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TuiInputSliderComponent, "tui-input-slider", never, { "min": { "alias": "min"; "required": false; }; "max": { "alias": "max"; "required": false; }; "quantum": { "alias": "quantum"; "required": false; }; "steps": { "alias": "steps"; "required": false; }; "segments": { "alias": "segments"; "required": false; }; "keySteps": { "alias": "keySteps"; "required": false; }; "valueContent": { "alias": "valueContent"; "required": false; }; }, {}, never, ["*"], false, never>;
}
