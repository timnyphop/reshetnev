import type { QueryList } from '@angular/core';
import { EventEmitter } from '@angular/core';
import type { TuiContext } from '@taiga-ui/cdk/types';
import { TuiHintOptionsDirective } from '@taiga-ui/core/directives/hint';
import type { TuiSizeL, TuiSizeS } from '@taiga-ui/core/types';
import { AbstractTuiInteractive } from '@taiga-ui/legacy/classes';
import type { PolymorpheusContent } from '@taiga-ui/polymorpheus';
import type { Observable } from 'rxjs';
import type { TuiPrimitiveTextfield } from './primitive-textfield-types';
import * as i0 from "@angular/core";
export declare const TUI_ICON_START_PADDINGS: Record<TuiSizeL | TuiSizeS, number>;
/**
 * @deprecated: use {@link TuiTextfield}
 * https://taiga-ui.dev/components/textfield
 */
export declare class TuiPrimitiveTextfieldComponent extends AbstractTuiInteractive implements TuiPrimitiveTextfield {
    private readonly focusableElement?;
    private readonly legacyOptions;
    private readonly el;
    protected readonly content?: QueryList<unknown>;
    protected readonly options: import("@taiga-ui/core/components/textfield").TuiTextfieldOptions;
    protected readonly controller: import("@taiga-ui/legacy/directives").TuiTextfieldController;
    protected readonly hintOptions: TuiHintOptionsDirective | null;
    protected autofilled: boolean;
    editable: boolean;
    /**
     * @deprecated:
     * use `tuiTextfieldOptionsProvider({iconCleaner: `@tui.chevron-up`})`
     */
    iconCleaner: PolymorpheusContent<TuiContext<"m" | "l" | "s">>;
    readOnly: boolean;
    invalid: boolean;
    disabled: boolean;
    value: string;
    readonly valueChange: EventEmitter<string>;
    get prefix(): string;
    get postfix(): string;
    get filler(): string;
    get nativeFocusableElement(): HTMLInputElement | null;
    get focused(): boolean;
    get appearance(): string;
    onModelChange(value: string): void;
    protected get size(): TuiSizeL | TuiSizeS;
    protected get computedInvalid(): boolean;
    protected get inputHidden(): boolean;
    protected get borderStart(): number;
    protected get borderEnd(): number;
    protected get hasValue(): boolean;
    protected get hasCleaner(): boolean;
    protected get hasTooltip(): boolean;
    protected get hasCustomContent(): boolean;
    protected get placeholderVisible(): boolean;
    protected get hasPlaceholder(): boolean;
    protected get placeholderRaised(): boolean;
    protected get iconContent(): PolymorpheusContent<TuiContext<TuiSizeL | TuiSizeS>>;
    protected get iconLeftContent(): PolymorpheusContent<TuiContext<TuiSizeL | TuiSizeS>>;
    protected get showHint(): boolean;
    protected get name(): 'ccexpiryyear' | null;
    protected get computedId(): string;
    protected getIndent$(element: HTMLElement): Observable<number>;
    protected onFocused(focused: boolean): void;
    protected clear(): void;
    protected onMouseDown(event: MouseEvent): void;
    protected transitionStartHandler({ propertyName, target }: TransitionEvent): void;
    protected onAutofilled(autofilled: boolean): void;
    protected detectRetargetFromLabel(event: Event): void;
    private get iconPaddingLeft();
    private get placeholderRaisable();
    private updateAutofilled;
    private updateValue;
    static ɵfac: i0.ɵɵFactoryDeclaration<TuiPrimitiveTextfieldComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TuiPrimitiveTextfieldComponent, "tui-primitive-textfield", never, { "editable": { "alias": "editable"; "required": false; }; "iconCleaner": { "alias": "iconCleaner"; "required": false; }; "readOnly": { "alias": "readOnly"; "required": false; }; "invalid": { "alias": "invalid"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "value": { "alias": "value"; "required": false; }; }, { "valueChange": "valueChange"; }, ["content"], ["input", "select", "tuiContent", "*"], false, never>;
}
