import { EventEmitter, TemplateRef } from '@angular/core';
import type { TuiActiveZone } from '@taiga-ui/cdk/directives/active-zone';
import type { TuiBooleanHandler, TuiContext } from '@taiga-ui/cdk/types';
import type { TuiDataListHost } from '@taiga-ui/core/components/data-list';
import { TuiHintOptionsDirective } from '@taiga-ui/core/directives/hint';
import type { TuiSizeL, TuiSizeS } from '@taiga-ui/core/types';
import type { TuiStringifiableItem } from '@taiga-ui/legacy/classes';
import { AbstractTuiMultipleControl } from '@taiga-ui/legacy/classes';
import type { TuiFocusableElementAccessor } from '@taiga-ui/legacy/tokens';
import type { TuiStatus } from '@taiga-ui/legacy/utils';
import type { PolymorpheusContent } from '@taiga-ui/polymorpheus';
import * as i0 from "@angular/core";
export declare class TuiInputTagComponent extends AbstractTuiMultipleControl<string> implements TuiFocusableElementAccessor, TuiDataListHost<string> {
    private readonly dropdown?;
    private readonly focusableElement?;
    private readonly tagsContainer?;
    private readonly tags;
    private readonly cleanerSvg?;
    private readonly scrollBar?;
    private readonly el;
    private readonly options;
    protected readonly datalist?: TemplateRef<TuiContext<TuiActiveZone>>;
    protected readonly errorIconTemplate?: TemplateRef<Record<string, unknown>>;
    protected readonly hintOptions: TuiHintOptionsDirective | null;
    protected readonly controller: import("@taiga-ui/legacy/directives").TuiTextfieldController;
    protected readonly icons: import("@taiga-ui/core/tokens").TuiCommonIcons;
    protected status: TuiStatus;
    protected open: boolean;
    separator: RegExp | string;
    search: string | null;
    editable: boolean;
    tagValidator: TuiBooleanHandler<string> | TuiBooleanHandler<TuiStringifiableItem<unknown> | string>;
    rows: number;
    inputHidden: boolean;
    uniqueTags: boolean;
    autoColor: boolean;
    maxLength: number | null;
    placeholder: string;
    removable: boolean;
    /**
     * @deprecated hack
     */
    pseudoOpen: boolean;
    disabledItemHandler: TuiBooleanHandler<TuiStringifiableItem<any> | string>;
    readonly searchChange: EventEmitter<string>;
    set pseudoFocusedSetter(value: boolean | null);
    get labelOutside(): boolean;
    get size(): TuiSizeL | TuiSizeS;
    get nativeFocusableElement(): HTMLInputElement | null;
    get hasValue(): boolean;
    get hasExampleText(): boolean;
    get hasPlaceholder(): boolean;
    get focused(): boolean;
    onTagEdited(value: string, index: number): void;
    handleOption(item: string): void;
    setDisabledState(): void;
    protected get iconStart(): PolymorpheusContent<TuiContext<TuiSizeL | TuiSizeS>>;
    protected get appearance(): string;
    protected get expandable(): boolean;
    protected get icon(): PolymorpheusContent<TuiContext<TuiSizeL | TuiSizeS>>;
    protected get iconCleaner(): PolymorpheusContent<TuiContext<TuiSizeL | TuiSizeS>>;
    protected get hasCleaner(): boolean;
    protected get hasNativeValue(): boolean;
    protected get placeholderRaised(): boolean;
    protected get hasRightIcons(): boolean;
    protected get showHint(): boolean;
    protected get canOpen(): boolean;
    protected get computeMaxHeight(): number | null;
    protected onFocusInOut(): void;
    protected detectRetargetFromLabel(event: Event): void;
    protected getLeftContent(tag: string): PolymorpheusContent;
    protected onCleanerClick(): void;
    protected onActiveZone(active: boolean): void;
    protected onMouseDown(event: MouseEvent): void;
    protected onFieldKeyDownBackspace(event: Event): void;
    protected onFieldKeyDownArrowLeft(event: Event): void;
    protected onFieldKeyDownEnter(): void;
    protected onTagKeyDownArrowLeft(currentIndex: number): void;
    protected onTagKeyDownArrowRight(currentIndex: number): void;
    protected onInput(value: string): void;
    protected onPaste(event: Event): void;
    protected onDrop({ dataTransfer }: DragEvent): void;
    protected trackByFn(_: number, tag: string): string;
    private get lineHeight();
    private scrollTo;
    private filterValue;
    private onScrollKeyDown;
    private updateSearch;
    private addTag;
    private deleteLastEnabledItem;
    private focusInput;
    private clippedValue;
    static ɵfac: i0.ɵɵFactoryDeclaration<TuiInputTagComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TuiInputTagComponent, "tui-input-tag", never, { "separator": { "alias": "separator"; "required": false; }; "search": { "alias": "search"; "required": false; }; "editable": { "alias": "editable"; "required": false; }; "tagValidator": { "alias": "tagValidator"; "required": false; }; "rows": { "alias": "rows"; "required": false; }; "inputHidden": { "alias": "inputHidden"; "required": false; }; "uniqueTags": { "alias": "uniqueTags"; "required": false; }; "autoColor": { "alias": "autoColor"; "required": false; }; "maxLength": { "alias": "maxLength"; "required": false; }; "placeholder": { "alias": "placeholder"; "required": false; }; "removable": { "alias": "removable"; "required": false; }; "pseudoOpen": { "alias": "pseudoOpen"; "required": false; }; "disabledItemHandler": { "alias": "disabledItemHandler"; "required": false; }; "pseudoFocusedSetter": { "alias": "pseudoFocused"; "required": false; }; }, { "searchChange": "searchChange"; }, ["datalist"], ["*", "tuiContent", "select"], false, never>;
}
