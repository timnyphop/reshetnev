import type { MaskitoOptions } from '@maskito/core';
import type { TuiDateMode, TuiDay, TuiDayLike } from '@taiga-ui/cdk/date-time';
import { TuiDayRange, TuiMonth } from '@taiga-ui/cdk/date-time';
import type { TuiBooleanHandler } from '@taiga-ui/cdk/types';
import type { TuiMarkerHandler } from '@taiga-ui/core/components/calendar';
import type { TuiSizeL, TuiSizeS } from '@taiga-ui/core/types';
import type { TuiDayRangePeriod } from '@taiga-ui/kit/components/calendar-range';
import type { TuiInputDateOptions } from '@taiga-ui/kit/tokens';
import { AbstractTuiNullableControl } from '@taiga-ui/legacy/classes';
import type { TuiFocusableElementAccessor } from '@taiga-ui/legacy/tokens';
import type { PolymorpheusContent } from '@taiga-ui/polymorpheus';
import * as i0 from "@angular/core";
export declare class TuiInputDateRangeComponent extends AbstractTuiNullableControl<TuiDayRange> implements TuiFocusableElementAccessor {
    private readonly textfield?;
    private readonly isMobile;
    private readonly mobileCalendar;
    private readonly options;
    private readonly textfieldSize;
    protected readonly dateTexts$: import("rxjs").Observable<Record<TuiDateMode, string>>;
    protected readonly valueTransformer: import("@taiga-ui/cdk/classes").TuiValueTransformer<TuiDayRange | null, unknown> | null;
    protected readonly dateFiller$: import("rxjs").Observable<string>;
    protected dateFormat: import("@taiga-ui/core/tokens").TuiDateFormatSettings;
    protected readonly dateFormat$: import("rxjs").Subscription;
    protected selectedActivePeriod: TuiDayRangePeriod | null;
    disabledItemHandler: TuiBooleanHandler<TuiDay>;
    markerHandler: TuiMarkerHandler | null;
    defaultViewedMonth: TuiMonth;
    items: readonly TuiDayRangePeriod[];
    min: TuiDay | null;
    max: TuiDay | null;
    minLength: TuiDayLike | null;
    maxLength: TuiDayLike | null;
    open: boolean;
    get nativeFocusableElement(): HTMLInputElement | null;
    get focused(): boolean;
    get computedExampleText(): string;
    get computedValue(): string;
    onClick(): void;
    onValueChange(value: string): void;
    onRangeChange(range: TuiDayRange | null): void;
    writeValue(value: TuiDayRange | null): void;
    protected get size(): TuiSizeL | TuiSizeS;
    protected get computedMobile(): boolean;
    protected get calendarIcon(): TuiInputDateOptions['icon'];
    protected get computedMask(): MaskitoOptions;
    protected get activePeriod(): TuiDayRangePeriod | null;
    protected get showValueTemplate(): boolean;
    protected get computedContent(): PolymorpheusContent;
    protected get innerPseudoFocused(): boolean | null;
    protected get nativeValue(): string;
    protected set nativeValue(value: string);
    protected getComputedRangeFiller(dateFiller: string): string;
    protected onIconClick(): void;
    protected onOpenChange(open: boolean): void;
    protected onActiveZone(focused: boolean): void;
    protected valueIdenticalComparator(oldValue: TuiDayRange | null, newValue: TuiDayRange | null): boolean;
    private get itemSelected();
    private calculateMask;
    private toggle;
    private focusInput;
    private getDateRangeFiller;
    static ɵfac: i0.ɵɵFactoryDeclaration<TuiInputDateRangeComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TuiInputDateRangeComponent, "tui-input-date-range", never, { "disabledItemHandler": { "alias": "disabledItemHandler"; "required": false; }; "markerHandler": { "alias": "markerHandler"; "required": false; }; "defaultViewedMonth": { "alias": "defaultViewedMonth"; "required": false; }; "items": { "alias": "items"; "required": false; }; "min": { "alias": "min"; "required": false; }; "max": { "alias": "max"; "required": false; }; "minLength": { "alias": "minLength"; "required": false; }; "maxLength": { "alias": "maxLength"; "required": false; }; }, {}, never, ["*", "input"], false, never>;
}
