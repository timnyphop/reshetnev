import type { TuiYear } from '@taiga-ui/cdk/date-time';
import { TuiMonth } from '@taiga-ui/cdk/date-time';
import type { TuiBooleanHandler } from '@taiga-ui/cdk/types';
import type { TuiSizeL, TuiSizeS } from '@taiga-ui/core/types';
import type { TuiInputDateOptions } from '@taiga-ui/kit/tokens';
import { AbstractTuiNullableControl } from '@taiga-ui/legacy/classes';
import type { TuiFocusableElementAccessor } from '@taiga-ui/legacy/tokens';
import * as i0 from "@angular/core";
export declare class TuiInputMonthComponent extends AbstractTuiNullableControl<TuiMonth> implements TuiFocusableElementAccessor {
    private readonly textfield?;
    private readonly isMobile;
    private readonly options;
    private readonly textfieldSize;
    protected readonly formatter: import("@taiga-ui/cdk/types").TuiHandler<TuiMonth | null, import("rxjs").Observable<string>>;
    protected activeYear?: TuiYear;
    min: TuiMonth | null;
    max: TuiMonth | null;
    disabledItemHandler: TuiBooleanHandler<TuiMonth>;
    defaultActiveYear: TuiYear;
    open: boolean;
    get nativeFocusableElement(): HTMLInputElement | null;
    get focused(): boolean;
    onValueChange(value: string): void;
    onMonthClick(month: TuiMonth): void;
    setDisabledState(): void;
    protected get size(): TuiSizeL | TuiSizeS;
    protected get computedMin(): TuiMonth;
    protected get computedMax(): TuiMonth;
    protected get computedDefaultActiveYear(): TuiYear;
    protected get calendarIcon(): TuiInputDateOptions['icon'];
    protected get nativePicker(): boolean;
    protected get nativePickerMin(): string;
    protected get nativePickerMax(): string;
    protected get nativeValue(): string;
    protected onNativeChange(value: string): void;
    protected onFocused(focused: boolean): void;
    protected onOpenChange(open: boolean): void;
    private close;
    static ɵfac: i0.ɵɵFactoryDeclaration<TuiInputMonthComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TuiInputMonthComponent, "tui-input-month", never, { "min": { "alias": "min"; "required": false; }; "max": { "alias": "max"; "required": false; }; "disabledItemHandler": { "alias": "disabledItemHandler"; "required": false; }; "defaultActiveYear": { "alias": "defaultActiveYear"; "required": false; }; }, {}, never, ["*", "input"], false, never>;
}
