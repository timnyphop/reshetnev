import { ElementRef, EventEmitter } from '@angular/core';
import type { TuiSizeL, TuiSizeS, TuiSizeXS } from '@taiga-ui/core/types';
import type { TuiStatus } from '@taiga-ui/legacy/utils';
import type { PolymorpheusContent } from '@taiga-ui/polymorpheus';
import * as i0 from "@angular/core";
/**
 * @deprecated: drop in v5.0 use {@link TuiChip}
 * https://taiga-ui.dev/components/chip
 */
export declare class TuiTagComponent {
    private readonly el;
    private readonly options;
    protected editing: boolean;
    protected readonly icons: import("@taiga-ui/core/tokens").TuiCommonIcons;
    protected editedText: string | null;
    value: string;
    editable: boolean;
    separator: RegExp | string;
    maxLength: number | null;
    size: TuiSizeL | TuiSizeS;
    showLoader: boolean;
    status: TuiStatus;
    hoverable: boolean;
    removable: boolean;
    disabled: boolean;
    autoColor: boolean;
    leftContent: PolymorpheusContent;
    readonly edited: EventEmitter<string>;
    protected set input(input: ElementRef<HTMLInputElement>);
    protected get backgroundColor(): string | null;
    protected get canRemove(): boolean;
    protected get displayText(): string;
    protected get loaderSize(): TuiSizeXS;
    protected edit(event: Event): void;
    protected remove(event: Event): void;
    protected onInput(value: string): void;
    protected onKeyDown(event: KeyboardEvent): void;
    protected onBlur(): void;
    private get canEdit();
    private stopEditing;
    private save;
    static ɵfac: i0.ɵɵFactoryDeclaration<TuiTagComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TuiTagComponent, "tui-tag, a[tuiTag], button[tuiTag]", never, { "value": { "alias": "value"; "required": false; }; "editable": { "alias": "editable"; "required": false; }; "separator": { "alias": "separator"; "required": false; }; "maxLength": { "alias": "maxLength"; "required": false; }; "size": { "alias": "size"; "required": false; }; "showLoader": { "alias": "showLoader"; "required": false; }; "status": { "alias": "status"; "required": false; }; "hoverable": { "alias": "hoverable"; "required": false; }; "removable": { "alias": "removable"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "autoColor": { "alias": "autoColor"; "required": false; }; "leftContent": { "alias": "leftContent"; "required": false; }; }, { "edited": "edited"; }, never, never, false, never>;
}
