import { EventEmitter } from '@angular/core';
import type { TuiActiveZone } from '@taiga-ui/cdk/directives/active-zone';
import type { TuiBooleanHandler, TuiContext, TuiMapper, TuiStringHandler } from '@taiga-ui/cdk/types';
import type { TuiDataListHost } from '@taiga-ui/core/components/data-list';
import type { TuiSizeL, TuiSizeM, TuiSizeS } from '@taiga-ui/core/types';
import type { TuiItemsHandlers } from '@taiga-ui/kit/tokens';
import { AbstractTuiMultipleControl, TuiStringifiableItem } from '@taiga-ui/legacy/classes';
import { TuiInputTagComponent } from '@taiga-ui/legacy/components/input-tag';
import type { TuiFocusableElementAccessor } from '@taiga-ui/legacy/tokens';
import type { PolymorpheusContent } from '@taiga-ui/polymorpheus';
import type { TuiMultiSelectOptions } from './multi-select.options';
import * as i0 from "@angular/core";
export declare class TuiMultiSelectComponent<T> extends AbstractTuiMultipleControl<T> implements TuiFocusableElementAccessor, TuiDataListHost<T> {
    private readonly accessor?;
    private readonly nativeSelect?;
    private readonly dropdown?;
    private readonly input?;
    private readonly arrowMode;
    private readonly itemsHandlers;
    private readonly options;
    protected readonly datalist: PolymorpheusContent<TuiContext<TuiActiveZone>>;
    protected open: boolean;
    protected readonly controller: import("@taiga-ui/legacy/directives").TuiTextfieldController;
    protected readonly isMobile: boolean;
    stringify: TuiItemsHandlers<T>['stringify'];
    identityMatcher: TuiItemsHandlers<T>['identityMatcher'];
    search: string | null;
    placeholder: string;
    editable: boolean;
    disabledItemHandler: TuiItemsHandlers<T>['disabledItemHandler'];
    valueContent: TuiMultiSelectOptions<T>['valueContent'];
    tagValidator: TuiBooleanHandler<T>;
    rows: TuiMultiSelectOptions<T>['rows'];
    autoColor: boolean;
    readonly searchChange: EventEmitter<string | null>;
    get size(): TuiSizeL | TuiSizeS;
    get nativeFocusableElement(): HTMLInputElement | null;
    get focused(): boolean;
    onValueChange(value: readonly T[]): void;
    onSearch(search: string | null): void;
    setDisabledState(): void;
    handleOption(option: T): void;
    protected get arrow(): PolymorpheusContent<TuiContext<TuiSizeL | TuiSizeM | TuiSizeS>>;
    protected get nativeDropdownMode(): boolean;
    protected get computedValue(): readonly T[];
    protected get searchOrSpace(): string;
    protected get searchString(): string;
    protected get computedGroup(): boolean;
    protected getStringifier(stringify: TuiStringHandler<T>): TuiStringHandler<TuiContext<T>>;
    protected readonly valueMapper: TuiMapper<[
        readonly T[],
        TuiStringHandler<T>,
        boolean?
    ], ReadonlyArray<TuiStringifiableItem<T>>>;
    protected readonly disabledItemHandlerWrapper: TuiMapper<[
        TuiBooleanHandler<T>
    ], TuiBooleanHandler<TuiStringifiableItem<T> | string>>;
    protected onSpace(event: Event): void;
    protected onEnter(event: Event): void;
    protected onClick({ nativeFocusableElement }: TuiInputTagComponent): void;
    protected onInput(value: ReadonlyArray<TuiStringifiableItem<T>>): void;
    protected onActiveZone(active: boolean): void;
    private updateSearch;
    static ɵfac: i0.ɵɵFactoryDeclaration<TuiMultiSelectComponent<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TuiMultiSelectComponent<any>, "tui-multi-select", never, { "stringify": { "alias": "stringify"; "required": false; }; "identityMatcher": { "alias": "identityMatcher"; "required": false; }; "search": { "alias": "search"; "required": false; }; "placeholder": { "alias": "placeholder"; "required": false; }; "editable": { "alias": "editable"; "required": false; }; "disabledItemHandler": { "alias": "disabledItemHandler"; "required": false; }; "valueContent": { "alias": "valueContent"; "required": false; }; "tagValidator": { "alias": "tagValidator"; "required": false; }; "rows": { "alias": "rows"; "required": false; }; "autoColor": { "alias": "autoColor"; "required": false; }; }, { "searchChange": "searchChange"; }, ["accessor", "nativeSelect", "datalist"], ["*", "select"], false, never>;
}
