import type { SafeHtml } from '@angular/platform-browser';
import type { TuiSafeHtml } from '@taiga-ui/cdk/types';
import type { Observable } from 'rxjs';
import * as i0 from "@angular/core";
/**
 * @deprecated: drop in v5.0 use {@link TuiIcon}
 * https://taiga-ui.dev/components/icon
 */
export interface TuiIconError {
    readonly icon: string;
    readonly message: string;
}
/**
 * @deprecated: drop in v5.0 use {@link TuiIcon}
 * https://taiga-ui.dev/components/icon
 */
export declare class TuiSvgComponent {
    private icon;
    private readonly doc;
    private readonly win;
    private readonly options;
    private readonly tuiSanitizer;
    private readonly svgService;
    private readonly staticRequestService;
    private readonly sanitizer;
    private readonly el;
    private readonly baseHref;
    private readonly src$;
    private readonly srcInterceptors;
    protected readonly innerHTML$: Observable<SafeHtml>;
    constructor();
    set src(src: TuiSafeHtml | null | undefined);
    get src(): TuiSafeHtml;
    get use(): string;
    get isInnerHTML(): boolean;
    protected onError(message?: string): void;
    private get isShadowDOM();
    private get isUse();
    private get isExternal();
    private get isUrl();
    private get isSrc();
    private get isName();
    private get isCrossDomain();
    private resolveName;
    private getSafeHtml;
    private process;
    private sanitize;
    private getExternalIcon;
    static ɵfac: i0.ɵɵFactoryDeclaration<TuiSvgComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TuiSvgComponent, "tui-svg", never, { "src": { "alias": "src"; "required": false; }; }, {}, never, never, true, never>;
}
