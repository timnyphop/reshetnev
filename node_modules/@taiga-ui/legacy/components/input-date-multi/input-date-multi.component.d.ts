import type { MaskitoOptions } from '@maskito/core';
import type { TuiValueTransformer } from '@taiga-ui/cdk/classes';
import { TuiDay, TuiMonth } from '@taiga-ui/cdk/date-time';
import type { TuiBooleanHandler, TuiMapper } from '@taiga-ui/cdk/types';
import type { TuiMarkerHandler } from '@taiga-ui/core/components/calendar';
import type { TuiSizeL, TuiSizeS } from '@taiga-ui/core/types';
import type { TuiInputDateOptions } from '@taiga-ui/kit/tokens';
import { AbstractTuiMultipleControl, TuiStringifiableItem } from '@taiga-ui/legacy/classes';
import type { TuiFocusableElementAccessor } from '@taiga-ui/legacy/tokens';
import type { Observable } from 'rxjs';
import * as i0 from "@angular/core";
export declare class TuiInputDateMultiComponent extends AbstractTuiMultipleControl<TuiDay> implements TuiFocusableElementAccessor {
    private readonly textfield?;
    private readonly inputTag?;
    private month;
    private readonly mobileCalendar;
    private readonly options;
    private readonly textfieldSize;
    protected readonly dateTexts$: Observable<Record<import("@taiga-ui/cdk/date-time").TuiDateMode, string>>;
    protected readonly valueTransformer: TuiValueTransformer<readonly TuiDay[], unknown> | null;
    protected open: boolean;
    protected dateFormat: import("@taiga-ui/core/tokens").TuiDateFormatSettings;
    protected readonly isMobile: boolean;
    protected readonly doneWord$: Observable<string>;
    protected readonly filler$: Observable<string>;
    protected readonly dateFormat$: import("rxjs").Subscription;
    min: TuiDay | null;
    max: TuiDay | null;
    disabledItemHandler: TuiBooleanHandler<TuiDay>;
    markerHandler: TuiMarkerHandler | null;
    defaultActiveYearMonth: TuiMonth;
    inputHidden: boolean;
    editable: boolean;
    search: string | null;
    placeholder: string;
    rows: number;
    readonly maskitoOptions: MaskitoOptions;
    get nativeFocusableElement(): HTMLInputElement | null;
    get focused(): boolean;
    tagValidator: TuiBooleanHandler<string>;
    setDisabledState(): void;
    protected get size(): TuiSizeL | TuiSizeS;
    protected get nativeDropdownMode(): boolean;
    protected get computedMin(): TuiDay;
    protected get computedMax(): TuiDay;
    protected get computedMobile(): boolean;
    protected get calendarIcon(): TuiInputDateOptions['icon'];
    protected get computedActiveYearMonth(): TuiMonth;
    protected onClick(): void;
    protected onIconClick(): void;
    protected readonly disabledItemHandlerWrapper: TuiMapper<[
        TuiBooleanHandler<string> | TuiBooleanHandler<TuiDay>
    ], TuiBooleanHandler<TuiStringifiableItem<any> | string>>;
    protected readonly valueMapper: TuiMapper<[
        readonly TuiDay[]
    ], ReadonlyArray<TuiStringifiableItem<TuiDay>>>;
    protected onEnter(search: string): void;
    protected onValueChange(value: ReadonlyArray<TuiStringifiableItem<TuiDay>>): void;
    protected onDayClick(value: TuiDay): void;
    protected done(): void;
    protected onMonthChange(month: TuiMonth): void;
    protected onOpenChange(open: boolean): void;
    protected onFocused(focused: boolean): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<TuiInputDateMultiComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TuiInputDateMultiComponent, "tui-input-date[multiple]", never, { "min": { "alias": "min"; "required": false; }; "max": { "alias": "max"; "required": false; }; "disabledItemHandler": { "alias": "disabledItemHandler"; "required": false; }; "markerHandler": { "alias": "markerHandler"; "required": false; }; "defaultActiveYearMonth": { "alias": "defaultActiveYearMonth"; "required": false; }; "inputHidden": { "alias": "inputHidden"; "required": false; }; "editable": { "alias": "editable"; "required": false; }; "search": { "alias": "search"; "required": false; }; "placeholder": { "alias": "placeholder"; "required": false; }; "rows": { "alias": "rows"; "required": false; }; "tagValidator": { "alias": "tagValidator"; "required": false; }; }, {}, never, ["*", "input"], false, never>;
}
