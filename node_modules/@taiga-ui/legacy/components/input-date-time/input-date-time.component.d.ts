import type { MaskitoOptions } from '@maskito/core';
import type { TuiValueTransformer } from '@taiga-ui/cdk/classes';
import type { TuiDateMode, TuiTimeMode } from '@taiga-ui/cdk/date-time';
import { TuiDay, TuiMonth, TuiTime } from '@taiga-ui/cdk/date-time';
import type { TuiActiveZone } from '@taiga-ui/cdk/directives/active-zone';
import type { TuiBooleanHandler, TuiContext } from '@taiga-ui/cdk/types';
import type { TuiSizeL, TuiSizeS } from '@taiga-ui/core/types';
import type { TuiInputDateOptions } from '@taiga-ui/kit/tokens';
import { AbstractTuiControl } from '@taiga-ui/legacy/classes';
import type { TuiFocusableElementAccessor } from '@taiga-ui/legacy/tokens';
import type { Observable } from 'rxjs';
import * as i0 from "@angular/core";
export declare class TuiInputDateTimeComponent extends AbstractTuiControl<[TuiDay | null, TuiTime | null]> implements TuiFocusableElementAccessor {
    private readonly textfield?;
    private readonly options;
    private readonly textfieldSize;
    private month;
    private readonly timeMode$;
    protected readonly timeTexts$: Observable<{
        'HH:MM': string;
        'HH:MM:SS': string;
        'HH:MM:SS.MSS': string;
    }>;
    protected readonly dateTexts$: Observable<Record<TuiDateMode, string>>;
    protected readonly valueTransformer: TuiValueTransformer<[
        TuiDay | null,
        TuiTime | null
    ]> | null;
    protected readonly type: TuiContext<TuiActiveZone>;
    protected readonly filler$: Observable<string>;
    protected dateFormat: import("@taiga-ui/core/tokens").TuiDateFormatSettings;
    protected readonly isMobile: boolean;
    protected readonly dateFormat$: import("rxjs").Subscription;
    min: TuiDay | [TuiDay | null, TuiTime | null] | null;
    max: TuiDay | [TuiDay | null, TuiTime | null] | null;
    disabledItemHandler: TuiBooleanHandler<TuiDay>;
    defaultActiveYearMonth: TuiMonth;
    open: boolean;
    set timeMode(value: TuiTimeMode);
    get timeMode(): TuiTimeMode;
    get nativeFocusableElement(): HTMLInputElement | null;
    get focused(): boolean;
    get computedValue(): string;
    setDisabledState(): void;
    writeValue(value: [TuiDay | null, TuiTime | null] | null): void;
    onValueChange(value: string): void;
    protected get size(): TuiSizeL | TuiSizeS;
    protected get computedMin(): TuiDay | [TuiDay, TuiTime];
    protected get computedMax(): TuiDay | [TuiDay, TuiTime];
    protected get fillerLength(): number;
    protected get maskOptions(): MaskitoOptions;
    protected get calendarIcon(): TuiInputDateOptions['icon'];
    protected get showNativePicker(): boolean;
    protected get calendarValue(): TuiDay | null;
    protected get calendarMinDay(): TuiDay;
    protected get calendarMaxDay(): TuiDay;
    protected get computedActiveYearMonth(): TuiMonth;
    protected get nativeValue(): string;
    protected set nativeValue(value: string);
    protected onClick(): void;
    protected onDayClick(day: TuiDay): void;
    protected onMonthChange(month: TuiMonth): void;
    protected onOpenChange(open: boolean): void;
    protected onFocused(focused: boolean): void;
    protected getFallbackValue(): [TuiDay | null, TuiTime | null];
    protected valueIdenticalComparator(oldValue: [TuiDay | null, TuiTime | null], newValue: [TuiDay | null, TuiTime | null]): boolean;
    private get nativePicker();
    private calculateMask;
    private getDateTimeString;
    private updateNativeValue;
    private clampTime;
    private trimTrailingSeparator;
    private toNativeDate;
    private toTuiDay;
    static ɵfac: i0.ɵɵFactoryDeclaration<TuiInputDateTimeComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TuiInputDateTimeComponent, "tui-input-date-time", never, { "min": { "alias": "min"; "required": false; }; "max": { "alias": "max"; "required": false; }; "disabledItemHandler": { "alias": "disabledItemHandler"; "required": false; }; "defaultActiveYearMonth": { "alias": "defaultActiveYearMonth"; "required": false; }; "timeMode": { "alias": "timeMode"; "required": false; }; }, {}, never, ["*", "input"], false, never>;
}
