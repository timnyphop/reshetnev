import type { TuiHintDirection } from '@taiga-ui/core/directives/hint';
import type { TuiSizeL, TuiSizeS } from '@taiga-ui/core/types';
import { AbstractTuiControl } from '@taiga-ui/legacy/classes';
import type { TuiFocusableElementAccessor, TuiNativeFocusableElement } from '@taiga-ui/legacy/tokens';
import type { PolymorpheusContent } from '@taiga-ui/polymorpheus';
import type { Observable } from 'rxjs';
import type { TuiInputCopyOptions } from './input-copy.options';
import * as i0 from "@angular/core";
/**
 * @deprecated use {@link TuiCopy} with {@link TuiTextfield}
 */
export declare class TuiInputCopyComponent extends AbstractTuiControl<string> implements TuiFocusableElementAccessor {
    private readonly textfield?;
    private readonly copied$;
    private readonly doc;
    private readonly copyTexts$;
    private readonly options;
    private readonly textfieldSize;
    successMessage: PolymorpheusContent;
    messageDirection: TuiHintDirection;
    messageAppearance: string;
    get nativeFocusableElement(): TuiNativeFocusableElement | null;
    get focused(): boolean;
    onValueChange(value: string): void;
    protected get hintText$(): Observable<PolymorpheusContent>;
    protected get size(): TuiSizeL | TuiSizeS;
    protected get icon(): TuiInputCopyOptions['icon'];
    protected onFocused(focused: boolean): void;
    protected copy(): void;
    protected getFallbackValue(): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<TuiInputCopyComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TuiInputCopyComponent, "tui-input-copy", never, { "successMessage": { "alias": "successMessage"; "required": false; }; "messageDirection": { "alias": "messageDirection"; "required": false; }; "messageAppearance": { "alias": "messageAppearance"; "required": false; }; }, {}, never, ["*", "input"], false, never>;
}
