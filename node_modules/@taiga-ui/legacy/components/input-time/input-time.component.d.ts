import type { MaskitoOptions } from '@maskito/core';
import type { TuiValueTransformer } from '@taiga-ui/cdk/classes';
import type { TuiTimeMode } from '@taiga-ui/cdk/date-time';
import { TuiTime } from '@taiga-ui/cdk/date-time';
import type { TuiBooleanHandler, TuiIdentityMatcher } from '@taiga-ui/cdk/types';
import type { TuiDataListHost } from '@taiga-ui/core/components/data-list';
import type { TuiSizeL, TuiSizeS } from '@taiga-ui/core/types';
import { AbstractTuiNullableControl } from '@taiga-ui/legacy/classes';
import type { TuiFocusableElementAccessor } from '@taiga-ui/legacy/tokens';
import type { Observable } from 'rxjs';
import type { TuiInputTimeOptions } from './input-time.options';
import * as i0 from "@angular/core";
export declare class TuiInputTimeComponent extends AbstractTuiNullableControl<TuiTime> implements TuiFocusableElementAccessor, TuiDataListHost<TuiTime> {
    private readonly textfield?;
    private readonly timeTexts$;
    private readonly options;
    private readonly isMobile;
    private readonly isIOS;
    private readonly textfieldSize;
    protected readonly valueTransformer: TuiValueTransformer<TuiTime | null> | null;
    protected open: boolean;
    disabledItemHandler: TuiBooleanHandler<TuiTime>;
    items: readonly TuiTime[];
    itemSize: TuiInputTimeOptions['itemSize'];
    strict: boolean;
    mode: TuiInputTimeOptions['mode'];
    get size(): TuiSizeL | TuiSizeS;
    get nativeFocusableElement(): HTMLInputElement | null;
    get focused(): boolean;
    get computedValue(): string;
    get nativeValue(): string;
    set nativeValue(value: string);
    readonly identityMatcher: TuiIdentityMatcher<TuiTime>;
    checkOption(option: TuiTime): void;
    handleOption(item: TuiTime): void;
    writeValue(value: TuiTime | null): void;
    onValueChange(value: string): void;
    protected get canOpen(): boolean;
    protected get filtered(): readonly TuiTime[];
    protected get showNativePicker(): boolean;
    protected get nativeDatalist(): boolean;
    protected get maskOptions(): MaskitoOptions;
    protected get computedSearch(): string;
    protected get innerPseudoFocused(): boolean | null;
    protected get icon(): TuiInputTimeOptions['icon'];
    protected getFiller$(mode: TuiTimeMode): Observable<string>;
    protected onClick(): void;
    protected onFocused(focused: boolean): void;
    protected onArrowUp(event: Event): void;
    protected onArrowDown(event: Event): void;
    protected onOpen(open: boolean): void;
    private get nativePicker();
    private calculateMask;
    private filter;
    private findNearestTimeFromItems;
    private getMatch;
    private close;
    private processArrow;
    private calculateShift;
    private shiftTime;
    private focusInput;
    static ɵfac: i0.ɵɵFactoryDeclaration<TuiInputTimeComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TuiInputTimeComponent, "tui-input-time", never, { "disabledItemHandler": { "alias": "disabledItemHandler"; "required": false; }; "items": { "alias": "items"; "required": false; }; "itemSize": { "alias": "itemSize"; "required": false; }; "strict": { "alias": "strict"; "required": false; }; "mode": { "alias": "mode"; "required": false; }; }, {}, never, ["*"], false, never>;
}
