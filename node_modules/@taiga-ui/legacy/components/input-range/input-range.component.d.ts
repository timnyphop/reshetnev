import type { TuiContext } from '@taiga-ui/cdk/types';
import type { TuiKeySteps } from '@taiga-ui/kit/components/slider';
import { AbstractTuiControl } from '@taiga-ui/legacy/classes';
import type { TuiFocusableElementAccessor, TuiNativeFocusableElement } from '@taiga-ui/legacy/tokens';
import type { PolymorpheusContent } from '@taiga-ui/polymorpheus';
import * as i0 from "@angular/core";
export declare class TuiInputRangeComponent extends AbstractTuiControl<[number, number]> implements TuiFocusableElementAccessor {
    private readonly inputNumberRefs;
    private readonly range?;
    private readonly isMobile;
    private readonly el;
    protected leftTextfieldValue: number;
    protected rightTextfieldValue: number;
    protected lastActiveSide: 'left' | 'right';
    protected readonly controller: import("@taiga-ui/legacy/directives").TuiTextfieldController;
    min: number;
    max: number;
    quantum: number;
    steps: number;
    segments: number;
    keySteps: TuiKeySteps | null;
    leftValueContent: PolymorpheusContent<TuiContext<number>>;
    rightValueContent: PolymorpheusContent<TuiContext<number>>;
    pluralize: Record<string, string> | null;
    get nativeFocusableElement(): TuiNativeFocusableElement | null;
    get focused(): boolean;
    writeValue(value: [number, number]): void;
    protected get leftFocusableElement(): HTMLInputElement | null;
    protected get rightFocusableElement(): HTMLInputElement | null;
    protected get appearance(): string;
    protected get showLeftValueContent(): boolean;
    protected get showRightValueContent(): boolean;
    protected get precision(): number;
    protected get computedSteps(): number;
    protected get step(): number;
    protected computeKeySteps(keySteps: TuiKeySteps | null, min: number, max: number): TuiKeySteps;
    protected onActiveZone(active: boolean): void;
    protected onTextInputFocused(focused: boolean): void;
    protected changeByStep(event: Event | KeyboardEvent, [leftCoefficient, rightCoefficient]: [number, number]): void;
    protected onInputLeft(value: number | null): void;
    protected onInputRight(value: number | null): void;
    protected onExternalValueUpdate(value: [number, number]): void;
    protected focusToTextInput(): void;
    protected onActiveThumbChange(activeThumb: 'left' | 'right'): void;
    protected getFallbackValue(): [number, number];
    private safelyUpdateValue;
    private valueGuard;
    private calibrate;
    private updateTextfieldValues;
    static ɵfac: i0.ɵɵFactoryDeclaration<TuiInputRangeComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TuiInputRangeComponent, "tui-input-range", never, { "min": { "alias": "min"; "required": false; }; "max": { "alias": "max"; "required": false; }; "quantum": { "alias": "quantum"; "required": false; }; "steps": { "alias": "steps"; "required": false; }; "segments": { "alias": "segments"; "required": false; }; "keySteps": { "alias": "keySteps"; "required": false; }; "leftValueContent": { "alias": "leftValueContent"; "required": false; }; "rightValueContent": { "alias": "rightValueContent"; "required": false; }; "pluralize": { "alias": "pluralize"; "required": false; }; }, {}, never, ["*"], false, never>;
}
