import type { TuiContext } from '@taiga-ui/cdk/types';
import { TuiHintOptionsDirective } from '@taiga-ui/core/directives/hint';
import type { TuiSizeL, TuiSizeS } from '@taiga-ui/core/types';
import { AbstractTuiControl } from '@taiga-ui/legacy/classes';
import type { TuiFocusableElementAccessor } from '@taiga-ui/legacy/tokens';
import type { PolymorpheusContent } from '@taiga-ui/polymorpheus';
import * as i0 from "@angular/core";
export declare const DEFAULT_ROWS = 20;
export declare const LINE_HEIGHT_M = 20;
export declare const LINE_HEIGHT_L = 24;
export declare class TuiTextareaComponent extends AbstractTuiControl<string> implements TuiFocusableElementAccessor {
    private readonly focusableElement?;
    private readonly textfield?;
    private readonly options;
    protected readonly isIOS: boolean;
    protected readonly controller: import("@taiga-ui/legacy/directives").TuiTextfieldController;
    protected readonly hintOptions: TuiHintOptionsDirective | null;
    rows: number;
    maxLength: number | null;
    expandable: boolean;
    get nativeFocusableElement(): HTMLTextAreaElement | null;
    get focused(): boolean;
    get computeMaxHeight(): number | null;
    onValueChange(value: string): void;
    protected get labelOutside(): boolean;
    protected get size(): TuiSizeL | TuiSizeS;
    protected get borderStart(): number;
    protected get borderEnd(): number;
    protected get hasTooltip(): boolean;
    protected get hasValue(): boolean;
    protected get hasCounter(): boolean;
    protected get appearance(): string;
    protected get hasCleaner(): boolean;
    protected get hasPlaceholder(): boolean;
    protected get hasCustomContent(): boolean;
    protected get iconLeftContent(): PolymorpheusContent<TuiContext<TuiSizeL | TuiSizeS>>;
    protected get iconContent(): PolymorpheusContent<TuiContext<TuiSizeL | TuiSizeS>>;
    protected get iconCleaner(): PolymorpheusContent<TuiContext<TuiSizeL | TuiSizeS>>;
    protected get hasExampleText(): boolean;
    protected get placeholderRaised(): boolean;
    protected get fittedContent(): string;
    protected get extraContent(): string;
    protected onFocused(focused: boolean): void;
    protected onMouseDown(event: MouseEvent): void;
    protected getFallbackValue(): string;
    private get lineHeight();
    private get placeholderRaisable();
    static ɵfac: i0.ɵɵFactoryDeclaration<TuiTextareaComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TuiTextareaComponent, "tui-textarea", never, { "rows": { "alias": "rows"; "required": false; }; "maxLength": { "alias": "maxLength"; "required": false; }; "expandable": { "alias": "expandable"; "required": false; }; }, {}, ["textfield"], ["*", "textarea"], false, never>;
}
