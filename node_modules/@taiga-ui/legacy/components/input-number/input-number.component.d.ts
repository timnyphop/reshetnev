import type { QueryList } from '@angular/core';
import { InjectionToken } from '@angular/core';
import type { MaskitoOptions } from '@maskito/core';
import type { TuiValueTransformer } from '@taiga-ui/cdk/classes';
import type { TuiSizeL, TuiSizeS } from '@taiga-ui/core/types';
import { AbstractTuiNullableControl } from '@taiga-ui/legacy/classes';
import type { TuiFocusableElementAccessor } from '@taiga-ui/legacy/tokens';
import type { TuiInputNumberOptions } from './input-number.options';
import * as i0 from "@angular/core";
export declare const TUI_NUMBER_VALUE_TRANSFORMER: InjectionToken<TuiValueTransformer<number | null, unknown>>;
export declare class TuiInputNumberComponent extends AbstractTuiNullableControl<number> implements TuiFocusableElementAccessor {
    private readonly textfield?;
    private readonly isIOS;
    private readonly textfieldSize;
    private readonly options;
    private unfinishedValue;
    protected readonly polymorpheusValueContent: QueryList<unknown>;
    protected readonly valueTransformer: TuiValueTransformer<number | null, unknown> | null;
    protected numberFormat: import("@taiga-ui/core/tokens").TuiNumberFormatSettings;
    protected readonly controller: import("@taiga-ui/legacy/directives").TuiTextfieldController;
    protected readonly numberFormat$: import("rxjs").Subscription;
    min: number | null;
    max: number | null;
    step: number;
    get nativeFocusableElement(): HTMLInputElement | null;
    get focused(): boolean;
    get inputMode(): string;
    get calculatedMaxLength(): number;
    get computedValue(): string;
    onValueChange(nativeValue: string): void;
    writeValue(value: number | null): void;
    protected get size(): TuiSizeL | TuiSizeS;
    protected get icons(): TuiInputNumberOptions['icons'];
    protected get computedMin(): number;
    protected get computedMax(): number;
    protected get isNegativeAllowed(): boolean;
    protected get formattedValue(): string;
    protected get canDecrement(): boolean;
    protected get canIncrement(): boolean;
    protected get computedPrefix(): string;
    protected get computedPostfix(): string;
    protected get mask(): MaskitoOptions;
    protected get nativeValue(): string;
    protected set nativeValue(value: string);
    protected onArrow(step: number | null): void;
    protected onFocused(focused: boolean): void;
    protected getFormattedValue(value: number): string;
    private get isNativeValueNotFinished();
    private get nativeNumberValue();
    private get precision();
    private computeMin;
    private computeMax;
    private calculateMask;
    static ɵfac: i0.ɵɵFactoryDeclaration<TuiInputNumberComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TuiInputNumberComponent, "tui-input-number", never, { "min": { "alias": "min"; "required": false; }; "max": { "alias": "max"; "required": false; }; "step": { "alias": "step"; "required": false; }; }, {}, ["polymorpheusValueContent"], ["*", "input", "tuiContent"], false, never>;
}
