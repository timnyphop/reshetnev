import { EventEmitter } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * @deprecated: drop in v5.0
 */
export declare abstract class AbstractTuiInteractive {
    private static autoId;
    abstract disabled: boolean;
    abstract focused: boolean;
    private readonly autoIdString;
    protected focusVisible: boolean;
    pseudoHover: boolean | null;
    pseudoActive: boolean | null;
    pseudoFocus: boolean | null;
    /**
     * Determines if component is focusable with keyboard.
     */
    focusable: boolean;
    nativeId: string;
    /**
     * Emits 'true' on focus and 'false' on blur.
     */
    readonly focusedChange: EventEmitter<boolean>;
    readonly focusVisibleChange: EventEmitter<boolean>;
    constructor();
    get computedDisabled(): boolean;
    get computedFocused(): boolean;
    get computedFocusVisible(): boolean;
    get computedFocusable(): boolean;
    get id(): string;
    protected updateFocused(focused: boolean): void;
    protected updateFocusVisible(focusVisible: boolean): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<AbstractTuiInteractive, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<AbstractTuiInteractive, never, never, { "pseudoHover": { "alias": "pseudoHover"; "required": false; }; "pseudoActive": { "alias": "pseudoActive"; "required": false; }; "pseudoFocus": { "alias": "pseudoFocus"; "required": false; }; "focusable": { "alias": "focusable"; "required": false; }; "nativeId": { "alias": "nativeId"; "required": false; }; }, { "focusedChange": "focusedChange"; "focusVisibleChange": "focusVisibleChange"; }, never, never, false, never>;
}
