import type { OnInit, Provider, Type } from '@angular/core';
import { ChangeDetectorRef, DestroyRef } from '@angular/core';
import type { AbstractControl, ControlValueAccessor } from '@angular/forms';
import { TuiValueTransformer } from '@taiga-ui/cdk/classes';
import { AbstractTuiInteractive } from './interactive';
import * as i0 from "@angular/core";
/**
 * @deprecated: drop in v5.0
 * Basic ControlValueAccessor class to build form components upon
 */
export declare abstract class AbstractTuiControl<T> extends AbstractTuiInteractive implements OnInit, ControlValueAccessor {
    private readonly ngControl;
    private previousInternalValue?;
    private readonly refresh$;
    protected onTouched: (...args: any[]) => void;
    protected onChange: (...args: any[]) => void;
    protected readonly fallbackValue: T;
    protected destroyRef: DestroyRef;
    protected readonly cdr: ChangeDetectorRef;
    protected readonly valueTransformer: TuiValueTransformer<T, unknown> | null;
    readOnly: boolean;
    pseudoInvalid: boolean | null;
    constructor();
    protected abstract getFallbackValue(): T;
    get computedInvalid(): boolean;
    get value(): T;
    set value(value: T);
    get safeCurrentValue(): T;
    get invalid(): boolean;
    get valid(): boolean;
    get touched(): boolean;
    get disabled(): boolean;
    get interactive(): boolean;
    get control(): AbstractControl | null;
    get computedName(): string | null;
    get controlName(): string | null;
    ngOnInit(): void;
    checkControlUpdate(): void;
    registerOnChange(onChange: (value: T | unknown) => void): void;
    registerOnTouched(onTouched: () => void): void;
    setDisabledState(): void;
    writeValue(value: T | null): void;
    protected updateFocused(focused: boolean): void;
    /**
     * @deprecated use `value` setter
     */
    protected updateValue(value: T): void;
    protected valueIdenticalComparator(oldValue: T, newValue: T): boolean;
    private get rawValue();
    private safeNgControlData;
    private controlMarkAsTouched;
    private controlSetValue;
    private refreshLocalValue;
    private fromControlValue;
    private toControlValue;
    static ɵfac: i0.ɵɵFactoryDeclaration<AbstractTuiControl<any>, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<AbstractTuiControl<any>, never, never, { "readOnly": { "alias": "readOnly"; "required": false; }; "pseudoInvalid": { "alias": "pseudoInvalid"; "required": false; }; }, {}, never, never, false, never>;
}
export declare function tuiAsControl<T>(control: Type<AbstractTuiControl<T>>): Provider;
