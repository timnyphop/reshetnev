export const TUI_GERMAN_LANGUAGE_ADDON_EDITOR = {
    colorSelectorModeNames: ['Farbe', 'Verlauf'],
    toolbarTools: {
        undo: 'Rückgängig machen',
        redo: 'Wiederholen',
        font: 'Schriftart',
        fontStyle: 'Schriftstil',
        fontSize: 'Schriftgröße',
        bold: 'Fett',
        italic: 'Kursiv',
        underline: 'Unterstrichen',
        strikeThrough: 'Durchgestrichen',
        justify: 'Blocksatz',
        justifyLeft: 'Blocksatz links',
        justifyCenter: 'Blocksatz mittig',
        justifyRight: 'Blocksatz rechts',
        justifyFull: 'Blocksatz',
        list: 'Liste',
        indent: 'Einrücken',
        outdent: 'Ausrücken',
        unorderedList: 'Ungeordnete Liste',
        orderedList: 'Geordnete Liste',
        quote: 'Blockquote',
        foreColor: 'Farbe',
        backColor: 'Hintergrundfarbe',
        hiliteColor: 'Hilite-Farbe',
        clear: 'Löschen',
        link: 'Link',
        attach: 'Datei anhängen',
        tex: 'TeX einfügen',
        code: 'Quelltext',
        image: 'Bild einfügen',
        insertHorizontalRule: 'Horizontale Linie einfügen',
        superscript: 'Hochgestellt',
        subscript: 'Tiefgestellt',
        insertTable: 'Insert table',
        insertGroup: 'Insert group',
        hiliteGroup: 'Hilite group',
        removeGroup: 'Remove group',
        insertAnchor: 'Insert anchor',
        mergeCells: 'Merge cells',
        splitCells: 'Split cells',
        rowsColumnsManaging: 'Managing rows and columns',
        cellColor: 'Cell color',
        setDetails: 'Details',
        removeDetails: 'Remove details',
    },
    editorEditLink: {
        urlExample: 'example.com',
        anchorExample: 'anchor',
    },
    editorTableCommands: [
        ['Insert column before', 'Insert column after'],
        ['Insert row before', 'Insert row after'],
        ['Delete column', 'Delete row'],
    ],
    editorCodeOptions: ['Code in the text', 'Code in block'],
    editorFontOptions: {
        small: 'Small',
        large: 'Large',
        normal: 'Normal',
        title: 'Title',
        subtitle: 'Subtitle',
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkb24tZWRpdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaTE4bi9sYW5ndWFnZXMvZ2VybWFuL2FkZG9uLWVkaXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsTUFBTSxnQ0FBZ0MsR0FBc0I7SUFDL0Qsc0JBQXNCLEVBQUUsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDO0lBQzVDLFlBQVksRUFBRTtRQUNWLElBQUksRUFBRSxtQkFBbUI7UUFDekIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsSUFBSSxFQUFFLFlBQVk7UUFDbEIsU0FBUyxFQUFFLGFBQWE7UUFDeEIsUUFBUSxFQUFFLGNBQWM7UUFDeEIsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUsUUFBUTtRQUNoQixTQUFTLEVBQUUsZUFBZTtRQUMxQixhQUFhLEVBQUUsaUJBQWlCO1FBQ2hDLE9BQU8sRUFBRSxXQUFXO1FBQ3BCLFdBQVcsRUFBRSxpQkFBaUI7UUFDOUIsYUFBYSxFQUFFLGtCQUFrQjtRQUNqQyxZQUFZLEVBQUUsa0JBQWtCO1FBQ2hDLFdBQVcsRUFBRSxXQUFXO1FBQ3hCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLFdBQVc7UUFDbkIsT0FBTyxFQUFFLFdBQVc7UUFDcEIsYUFBYSxFQUFFLG1CQUFtQjtRQUNsQyxXQUFXLEVBQUUsaUJBQWlCO1FBQzlCLEtBQUssRUFBRSxZQUFZO1FBQ25CLFNBQVMsRUFBRSxPQUFPO1FBQ2xCLFNBQVMsRUFBRSxrQkFBa0I7UUFDN0IsV0FBVyxFQUFFLGNBQWM7UUFDM0IsS0FBSyxFQUFFLFNBQVM7UUFDaEIsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUsZ0JBQWdCO1FBQ3hCLEdBQUcsRUFBRSxjQUFjO1FBQ25CLElBQUksRUFBRSxXQUFXO1FBQ2pCLEtBQUssRUFBRSxlQUFlO1FBQ3RCLG9CQUFvQixFQUFFLDRCQUE0QjtRQUNsRCxXQUFXLEVBQUUsY0FBYztRQUMzQixTQUFTLEVBQUUsY0FBYztRQUN6QixXQUFXLEVBQUUsY0FBYztRQUMzQixXQUFXLEVBQUUsY0FBYztRQUMzQixXQUFXLEVBQUUsY0FBYztRQUMzQixXQUFXLEVBQUUsY0FBYztRQUMzQixZQUFZLEVBQUUsZUFBZTtRQUM3QixVQUFVLEVBQUUsYUFBYTtRQUN6QixVQUFVLEVBQUUsYUFBYTtRQUN6QixtQkFBbUIsRUFBRSwyQkFBMkI7UUFDaEQsU0FBUyxFQUFFLFlBQVk7UUFDdkIsVUFBVSxFQUFFLFNBQVM7UUFDckIsYUFBYSxFQUFFLGdCQUFnQjtLQUNsQztJQUNELGNBQWMsRUFBRTtRQUNaLFVBQVUsRUFBRSxhQUFhO1FBQ3pCLGFBQWEsRUFBRSxRQUFRO0tBQzFCO0lBQ0QsbUJBQW1CLEVBQUU7UUFDakIsQ0FBQyxzQkFBc0IsRUFBRSxxQkFBcUIsQ0FBQztRQUMvQyxDQUFDLG1CQUFtQixFQUFFLGtCQUFrQixDQUFDO1FBQ3pDLENBQUMsZUFBZSxFQUFFLFlBQVksQ0FBQztLQUNsQztJQUNELGlCQUFpQixFQUFFLENBQUMsa0JBQWtCLEVBQUUsZUFBZSxDQUFDO0lBQ3hELGlCQUFpQixFQUFFO1FBQ2YsS0FBSyxFQUFFLE9BQU87UUFDZCxLQUFLLEVBQUUsT0FBTztRQUNkLE1BQU0sRUFBRSxRQUFRO1FBQ2hCLEtBQUssRUFBRSxPQUFPO1FBQ2QsUUFBUSxFQUFFLFVBQVU7S0FDdkI7Q0FDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUge1R1aUxhbmd1YWdlRWRpdG9yfSBmcm9tICdAdGFpZ2EtdWkvaTE4bi90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBUVUlfR0VSTUFOX0xBTkdVQUdFX0FERE9OX0VESVRPUjogVHVpTGFuZ3VhZ2VFZGl0b3IgPSB7XG4gICAgY29sb3JTZWxlY3Rvck1vZGVOYW1lczogWydGYXJiZScsICdWZXJsYXVmJ10sXG4gICAgdG9vbGJhclRvb2xzOiB7XG4gICAgICAgIHVuZG86ICdSw7xja2fDpG5naWcgbWFjaGVuJyxcbiAgICAgICAgcmVkbzogJ1dpZWRlcmhvbGVuJyxcbiAgICAgICAgZm9udDogJ1NjaHJpZnRhcnQnLFxuICAgICAgICBmb250U3R5bGU6ICdTY2hyaWZ0c3RpbCcsXG4gICAgICAgIGZvbnRTaXplOiAnU2NocmlmdGdyw7bDn2UnLFxuICAgICAgICBib2xkOiAnRmV0dCcsXG4gICAgICAgIGl0YWxpYzogJ0t1cnNpdicsXG4gICAgICAgIHVuZGVybGluZTogJ1VudGVyc3RyaWNoZW4nLFxuICAgICAgICBzdHJpa2VUaHJvdWdoOiAnRHVyY2hnZXN0cmljaGVuJyxcbiAgICAgICAganVzdGlmeTogJ0Jsb2Nrc2F0eicsXG4gICAgICAgIGp1c3RpZnlMZWZ0OiAnQmxvY2tzYXR6IGxpbmtzJyxcbiAgICAgICAganVzdGlmeUNlbnRlcjogJ0Jsb2Nrc2F0eiBtaXR0aWcnLFxuICAgICAgICBqdXN0aWZ5UmlnaHQ6ICdCbG9ja3NhdHogcmVjaHRzJyxcbiAgICAgICAganVzdGlmeUZ1bGw6ICdCbG9ja3NhdHonLFxuICAgICAgICBsaXN0OiAnTGlzdGUnLFxuICAgICAgICBpbmRlbnQ6ICdFaW5yw7xja2VuJyxcbiAgICAgICAgb3V0ZGVudDogJ0F1c3LDvGNrZW4nLFxuICAgICAgICB1bm9yZGVyZWRMaXN0OiAnVW5nZW9yZG5ldGUgTGlzdGUnLFxuICAgICAgICBvcmRlcmVkTGlzdDogJ0dlb3JkbmV0ZSBMaXN0ZScsXG4gICAgICAgIHF1b3RlOiAnQmxvY2txdW90ZScsXG4gICAgICAgIGZvcmVDb2xvcjogJ0ZhcmJlJyxcbiAgICAgICAgYmFja0NvbG9yOiAnSGludGVyZ3J1bmRmYXJiZScsXG4gICAgICAgIGhpbGl0ZUNvbG9yOiAnSGlsaXRlLUZhcmJlJyxcbiAgICAgICAgY2xlYXI6ICdMw7ZzY2hlbicsXG4gICAgICAgIGxpbms6ICdMaW5rJyxcbiAgICAgICAgYXR0YWNoOiAnRGF0ZWkgYW5ow6RuZ2VuJyxcbiAgICAgICAgdGV4OiAnVGVYIGVpbmbDvGdlbicsXG4gICAgICAgIGNvZGU6ICdRdWVsbHRleHQnLFxuICAgICAgICBpbWFnZTogJ0JpbGQgZWluZsO8Z2VuJyxcbiAgICAgICAgaW5zZXJ0SG9yaXpvbnRhbFJ1bGU6ICdIb3Jpem9udGFsZSBMaW5pZSBlaW5mw7xnZW4nLFxuICAgICAgICBzdXBlcnNjcmlwdDogJ0hvY2hnZXN0ZWxsdCcsXG4gICAgICAgIHN1YnNjcmlwdDogJ1RpZWZnZXN0ZWxsdCcsXG4gICAgICAgIGluc2VydFRhYmxlOiAnSW5zZXJ0IHRhYmxlJyxcbiAgICAgICAgaW5zZXJ0R3JvdXA6ICdJbnNlcnQgZ3JvdXAnLFxuICAgICAgICBoaWxpdGVHcm91cDogJ0hpbGl0ZSBncm91cCcsXG4gICAgICAgIHJlbW92ZUdyb3VwOiAnUmVtb3ZlIGdyb3VwJyxcbiAgICAgICAgaW5zZXJ0QW5jaG9yOiAnSW5zZXJ0IGFuY2hvcicsXG4gICAgICAgIG1lcmdlQ2VsbHM6ICdNZXJnZSBjZWxscycsXG4gICAgICAgIHNwbGl0Q2VsbHM6ICdTcGxpdCBjZWxscycsXG4gICAgICAgIHJvd3NDb2x1bW5zTWFuYWdpbmc6ICdNYW5hZ2luZyByb3dzIGFuZCBjb2x1bW5zJyxcbiAgICAgICAgY2VsbENvbG9yOiAnQ2VsbCBjb2xvcicsXG4gICAgICAgIHNldERldGFpbHM6ICdEZXRhaWxzJyxcbiAgICAgICAgcmVtb3ZlRGV0YWlsczogJ1JlbW92ZSBkZXRhaWxzJyxcbiAgICB9LFxuICAgIGVkaXRvckVkaXRMaW5rOiB7XG4gICAgICAgIHVybEV4YW1wbGU6ICdleGFtcGxlLmNvbScsXG4gICAgICAgIGFuY2hvckV4YW1wbGU6ICdhbmNob3InLFxuICAgIH0sXG4gICAgZWRpdG9yVGFibGVDb21tYW5kczogW1xuICAgICAgICBbJ0luc2VydCBjb2x1bW4gYmVmb3JlJywgJ0luc2VydCBjb2x1bW4gYWZ0ZXInXSxcbiAgICAgICAgWydJbnNlcnQgcm93IGJlZm9yZScsICdJbnNlcnQgcm93IGFmdGVyJ10sXG4gICAgICAgIFsnRGVsZXRlIGNvbHVtbicsICdEZWxldGUgcm93J10sXG4gICAgXSxcbiAgICBlZGl0b3JDb2RlT3B0aW9uczogWydDb2RlIGluIHRoZSB0ZXh0JywgJ0NvZGUgaW4gYmxvY2snXSxcbiAgICBlZGl0b3JGb250T3B0aW9uczoge1xuICAgICAgICBzbWFsbDogJ1NtYWxsJyxcbiAgICAgICAgbGFyZ2U6ICdMYXJnZScsXG4gICAgICAgIG5vcm1hbDogJ05vcm1hbCcsXG4gICAgICAgIHRpdGxlOiAnVGl0bGUnLFxuICAgICAgICBzdWJ0aXRsZTogJ1N1YnRpdGxlJyxcbiAgICB9LFxufTtcbiJdfQ==