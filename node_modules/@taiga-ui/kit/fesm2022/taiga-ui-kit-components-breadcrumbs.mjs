import { NgIf, NgForOf, AsyncPipe, NgTemplateOutlet } from '@angular/common';
import * as i0 from '@angular/core';
import { inject, TemplateRef, Component, ChangeDetectionStrategy, ContentChildren, Input } from '@angular/core';
import { EMPTY_QUERY } from '@taiga-ui/cdk/constants';
import { TuiItem } from '@taiga-ui/cdk/directives/item';
import { TuiIcon } from '@taiga-ui/core/components/icon';
import { tuiLinkOptionsProvider } from '@taiga-ui/core/components/link';
import { tuiCreateToken, tuiProvideOptions } from '@taiga-ui/cdk/utils/miscellaneous';

const TUI_BREADCRUMBS_DEFAULT_OPTIONS = {
    icon: '@tui.chevron-right',
    size: 'm',
};
const TUI_BREADCRUMBS_OPTIONS = tuiCreateToken(TUI_BREADCRUMBS_DEFAULT_OPTIONS);
function tuiBreadcrumbsOptionsProvider(options) {
    return tuiProvideOptions(TUI_BREADCRUMBS_OPTIONS, options, TUI_BREADCRUMBS_DEFAULT_OPTIONS);
}

class TuiBreadcrumbs {
    constructor() {
        this.items = EMPTY_QUERY;
        this.options = inject(TUI_BREADCRUMBS_OPTIONS);
        this.size = this.options.size;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiBreadcrumbs, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiBreadcrumbs, isStandalone: true, selector: "tui-breadcrumbs", inputs: { size: "size" }, host: { properties: { "attr.data-size": "size" } }, providers: [tuiLinkOptionsProvider({ appearance: 'icon' })], queries: [{ propertyName: "items", predicate: TuiItem, read: TemplateRef }], ngImport: i0, template: "<ng-container *ngIf=\"items.changes | async\" />\n<ng-container *ngFor=\"let item of items; let last = last\">\n    <ng-container [ngTemplateOutlet]=\"item\" />\n    <tui-icon\n        *ngIf=\"!last\"\n        class=\"t-icon\"\n        [icon]=\"options.icon\"\n    />\n</ng-container>\n", styles: [":host{display:flex;align-items:center;block-size:2.5rem;white-space:nowrap;font:var(--tui-font-text-s);color:var(--tui-text-primary)}:host[data-size=l]{font:var(--tui-font-text-m)}.t-icon{margin:0 .25rem;opacity:.4;border:.25rem solid transparent}\n"], dependencies: [{ kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "pipe", type: AsyncPipe, name: "async" }, { kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: TuiIcon, selector: "tui-icon", inputs: ["icon", "background"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiBreadcrumbs, decorators: [{
            type: Component,
            args: [{ standalone: true, selector: 'tui-breadcrumbs', imports: [NgIf, NgForOf, AsyncPipe, NgTemplateOutlet, TuiIcon], changeDetection: ChangeDetectionStrategy.OnPush, providers: [tuiLinkOptionsProvider({ appearance: 'icon' })], host: {
                        '[attr.data-size]': 'size',
                    }, template: "<ng-container *ngIf=\"items.changes | async\" />\n<ng-container *ngFor=\"let item of items; let last = last\">\n    <ng-container [ngTemplateOutlet]=\"item\" />\n    <tui-icon\n        *ngIf=\"!last\"\n        class=\"t-icon\"\n        [icon]=\"options.icon\"\n    />\n</ng-container>\n", styles: [":host{display:flex;align-items:center;block-size:2.5rem;white-space:nowrap;font:var(--tui-font-text-s);color:var(--tui-text-primary)}:host[data-size=l]{font:var(--tui-font-text-m)}.t-icon{margin:0 .25rem;opacity:.4;border:.25rem solid transparent}\n"] }]
        }], propDecorators: { items: [{
                type: ContentChildren,
                args: [TuiItem, { read: TemplateRef }]
            }], size: [{
                type: Input
            }] } });

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_BREADCRUMBS_DEFAULT_OPTIONS, TUI_BREADCRUMBS_OPTIONS, TuiBreadcrumbs, tuiBreadcrumbsOptionsProvider };
//# sourceMappingURL=taiga-ui-kit-components-breadcrumbs.mjs.map
