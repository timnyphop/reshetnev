{"version":3,"file":"taiga-ui-kit-components-input-password.mjs","sources":["../../../projects/kit/components/input-password/input-password.options.ts","../../../projects/kit/components/input-password/input-password.component.ts","../../../projects/kit/components/input-password/taiga-ui-kit-components-input-password.ts"],"sourcesContent":["import type {Provider} from '@angular/core';\nimport type {TuiStringHandler} from '@taiga-ui/cdk/types';\nimport {tuiCreateToken, tuiProvideOptions} from '@taiga-ui/cdk/utils/miscellaneous';\nimport type {TuiSizeL, TuiSizeS} from '@taiga-ui/core/types';\n\nexport interface TuiInputPasswordOptions {\n    readonly icons: Readonly<{\n        hide: TuiStringHandler<TuiSizeL | TuiSizeS> | string;\n        show: TuiStringHandler<TuiSizeL | TuiSizeS> | string;\n    }>;\n}\n\nexport const TUI_INPUT_PASSWORD_DEFAULT_OPTIONS: TuiInputPasswordOptions = {\n    icons: {\n        hide: '@tui.eye-off',\n        show: '@tui.eye',\n    },\n};\n\nexport const TUI_INPUT_PASSWORD_OPTIONS = tuiCreateToken(\n    TUI_INPUT_PASSWORD_DEFAULT_OPTIONS,\n);\n\nexport function tuiInputPasswordOptionsProvider(\n    options: Partial<TuiInputPasswordOptions>,\n): Provider {\n    return tuiProvideOptions(\n        TUI_INPUT_PASSWORD_OPTIONS,\n        options,\n        TUI_INPUT_PASSWORD_DEFAULT_OPTIONS,\n    );\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    computed,\n    inject,\n    signal,\n} from '@angular/core';\nimport {toSignal} from '@angular/core/rxjs-interop';\nimport {tuiFallbackValueProvider} from '@taiga-ui/cdk/tokens';\nimport {tuiInjectElement} from '@taiga-ui/cdk/utils/dom';\nimport {tuiIsString} from '@taiga-ui/cdk/utils/miscellaneous';\nimport {TuiIcon} from '@taiga-ui/core/components/icon';\nimport {\n    TUI_TEXTFIELD_OPTIONS,\n    TuiTextfieldContent,\n    TuiTextfieldDirective,\n} from '@taiga-ui/core/components/textfield';\nimport {TuiTooltip} from '@taiga-ui/kit/directives';\nimport {TUI_PASSWORD_TEXTS} from '@taiga-ui/kit/tokens';\n\nimport {TUI_INPUT_PASSWORD_OPTIONS} from './input-password.options';\n\n@Component({\n    standalone: true,\n    selector: 'input[tuiInputPassword]',\n    imports: [TuiIcon, TuiTooltip, TuiTextfieldContent],\n    template: `\n        <tui-icon\n            *tuiTextfieldContent\n            [icon]=\"icon()\"\n            [style.border]=\"size() === 's' ? null : 'none'\"\n            [tuiTooltip]=\"text()\"\n            (click)=\"hidden.set(!hidden())\"\n            (mousedown.capture.prevent.stop)=\"el.focus()\"\n        />\n    `,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [tuiFallbackValueProvider('')],\n    hostDirectives: [TuiTextfieldDirective],\n    host: {\n        '[type]': 'hidden() ? \"password\" : \"text\"',\n    },\n})\nexport class TuiInputPassword {\n    private readonly options = inject(TUI_INPUT_PASSWORD_OPTIONS);\n    private readonly texts = toSignal(inject(TUI_PASSWORD_TEXTS), {\n        initialValue: ['', ''] as const,\n    });\n\n    protected readonly el = tuiInjectElement<HTMLInputElement>();\n    protected readonly size = inject(TUI_TEXTFIELD_OPTIONS).size;\n    protected readonly hidden = signal(true);\n    protected readonly text = computed(() =>\n        this.hidden() ? this.texts()[0] : this.texts()[1],\n    );\n\n    protected readonly icon = computed(() => {\n        const icon = this.hidden() ? this.options.icons.show : this.options.icons.hide;\n\n        return tuiIsString(icon) ? icon : icon(this.size());\n    });\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}