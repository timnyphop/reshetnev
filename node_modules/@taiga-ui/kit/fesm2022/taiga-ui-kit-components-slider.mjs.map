{"version":3,"file":"taiga-ui-kit-components-slider.mjs","sources":["../../../projects/kit/components/slider/helpers/key-steps.ts","../../../projects/kit/components/slider/slider.options.ts","../../../projects/kit/components/slider/slider.component.ts","../../../projects/kit/components/slider/helpers/slider-key-steps.directive.ts","../../../projects/kit/components/slider/helpers/slider-readonly.directive.ts","../../../projects/kit/components/slider/helpers/slider-thumb-label.component.ts","../../../projects/kit/components/slider/helpers/slider-thumb-label.template.html","../../../projects/kit/components/slider/slider.ts","../../../projects/kit/components/slider/taiga-ui-kit-components-slider.ts"],"sourcesContent":["import {tuiRound} from '@taiga-ui/cdk/utils/math';\n\n/**\n * Used as a limit for eliminating JS issues with floating point math\n */\nexport const TUI_FLOATING_PRECISION = 7;\n\n/**\n * Steps for splitting sliders into different linear dependencies.\n * Each element of the array has the form [percent, value]\n *\n * Thus, to set a field from 50,000 to 30,000,000 in steps:\n * 1) From 50 000 to 200 000 by 5000 per step (30 steps)\n * 2) From 200 000 to 1 000 000 by 50 000 per step (16 steps)\n * 3) From 1 000 000 to 30 000 000 by 500 000 per step (58 steps)\n *\n * You need to pass the following keyStep (where 104 = 30 + 16 + 58 is the total number of steps):\n *  [\n *      [0, 50_000],\n *      [100 / 104 * 30, 200_000],\n *      [100 / 104 * (30 + 16), 1_000_000],\n *      [100, 30_000_000],\n *  ];\n *\n */\nexport type TuiKeySteps = [[0, number], ...Array<[number, number]>, [100, number]];\n\nfunction tuiFindKeyStepsBoundariesByFn(\n    keySteps: TuiKeySteps,\n    fn: ([keyStepPercent, keyStepValue]: [number, number]) => boolean,\n): [[number, number], [number, number]] {\n    const keyStepUpperIndex = keySteps.findIndex((keyStep, i) => i && fn(keyStep));\n\n    const lowerStep = keySteps[keyStepUpperIndex - 1] || keySteps[0];\n    const upperStep = keySteps[keyStepUpperIndex] ||\n        keySteps[keySteps.length - 1] || [0, 0];\n\n    return [lowerStep, upperStep];\n}\n\nexport function tuiPercentageToKeyStepValue(\n    valuePercentage: number,\n    keySteps: TuiKeySteps,\n): number {\n    const [[lowerStepPercent, lowerStepValue], [upperStepPercent, upperStepValue]] =\n        tuiFindKeyStepsBoundariesByFn(\n            keySteps,\n            ([keyStepPercentage, _]) => valuePercentage <= keyStepPercentage,\n        );\n    const ratio =\n        (valuePercentage - lowerStepPercent) / (upperStepPercent - lowerStepPercent);\n    const controlValue = (upperStepValue - lowerStepValue) * ratio + lowerStepValue;\n\n    return tuiRound(controlValue, TUI_FLOATING_PRECISION);\n}\n\nexport function tuiKeyStepValueToPercentage(\n    value: number,\n    keySteps: TuiKeySteps,\n): number {\n    const [[lowerStepPercent, lowerStepValue], [upperStepPercent, upperStepValue]] =\n        tuiFindKeyStepsBoundariesByFn(\n            keySteps,\n            ([_, keyStepValue]) => value <= keyStepValue,\n        );\n    const ratio = (value - lowerStepValue) / (upperStepValue - lowerStepValue) || 0;\n\n    return (upperStepPercent - lowerStepPercent) * ratio + lowerStepPercent;\n}\n","import type {Provider} from '@angular/core';\nimport {tuiCreateToken, tuiProvideOptions} from '@taiga-ui/cdk/utils/miscellaneous';\nimport type {TuiSizeS} from '@taiga-ui/core/types';\n\nexport interface TuiSliderOptions {\n    readonly size: TuiSizeS;\n    readonly trackColor: string;\n}\n\nexport const TUI_SLIDER_DEFAULT_OPTIONS: TuiSliderOptions = {\n    size: 'm',\n    trackColor: 'var(--tui-background-neutral-2)',\n};\n\n/**\n * Default parameters for Slider component\n */\nexport const TUI_SLIDER_OPTIONS = tuiCreateToken(TUI_SLIDER_DEFAULT_OPTIONS);\n\nexport function tuiSliderOptionsProvider(options: Partial<TuiSliderOptions>): Provider {\n    return tuiProvideOptions(TUI_SLIDER_OPTIONS, options, TUI_SLIDER_DEFAULT_OPTIONS);\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    inject,\n    INJECTOR,\n    Input,\n} from '@angular/core';\nimport {NgControl, NgModel} from '@angular/forms';\nimport {tuiWatch} from '@taiga-ui/cdk/observables';\nimport {tuiInjectElement} from '@taiga-ui/cdk/utils/dom';\nimport {tuiPure} from '@taiga-ui/cdk/utils/miscellaneous';\nimport type {TuiSizeS} from '@taiga-ui/core/types';\nimport {take} from 'rxjs';\n\nimport {TuiSliderKeySteps} from './helpers/slider-key-steps.directive';\nimport {TUI_SLIDER_OPTIONS} from './slider.options';\n\n@Component({\n    standalone: true,\n    selector: 'input[type=range][tuiSlider]',\n    template: '',\n    styleUrls: ['./slider.style.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        /**\n         * For change detection.\n         * Webkit does not have built-in method for customization of filling progress (as Firefox).\n         * We draw filling of progress by `background: linear-gradient(...)` of the track.\n         * This function triggers change detection (for {@link valueRatio} getter) when we drag thumb of the input.\n         */\n        '(input)': '0',\n        '[style.--tui-slider-track-color]': 'options.trackColor',\n        '[style.--tui-slider-segment-width.%]': 'segmentWidth',\n        '[style.--tui-slider-fill-ratio]': 'valueRatio',\n        '[attr.data-size]': 'size',\n    },\n})\nexport class TuiSliderComponent {\n    private readonly injector = inject(INJECTOR);\n    private readonly control = inject(NgControl, {self: true, optional: true});\n\n    protected readonly options = inject(TUI_SLIDER_OPTIONS);\n\n    @Input()\n    public size: TuiSizeS = this.options.size;\n\n    @Input()\n    public segments = 1;\n\n    public readonly el = tuiInjectElement<HTMLInputElement>();\n\n    constructor() {\n        if (this.control instanceof NgModel) {\n            /**\n             * The ValueAccessor.writeValue method is called twice on any value accessor during component initialization,\n             * when a control is bound using [(ngModel)], first time with a phantom null value.\n             * With `changeDetection: ChangeDetectionStrategy.OnPush` the second call of writeValue with real value don't re-render the view.\n             * ___\n             * See this {@link https://github.com/angular/angular/issues/14988 issue}\n             */\n            this.control.valueChanges\n                ?.pipe(tuiWatch(inject(ChangeDetectorRef)), take(1))\n                .subscribe();\n        }\n    }\n\n    public get valueRatio(): number {\n        return (this.value - this.min) / (this.max - this.min) || 0;\n    }\n\n    public get min(): number {\n        return Number(this.el.min);\n    }\n\n    public get max(): number {\n        return Number(this.el.max || 100);\n    }\n\n    public get value(): number {\n        if (!this.hasKeySteps && this.control instanceof NgModel) {\n            /**\n             * If developer uses `[(ngModel)]` and programmatically change value,\n             * the `el.nativeElement.value` is equal to the previous value at this moment.\n             */\n            return this.control.viewModel;\n        }\n\n        return Number(this.el.value) || 0;\n    }\n\n    public set value(newValue: number) {\n        this.el.value = `${newValue}`;\n    }\n\n    @tuiPure\n    protected get hasKeySteps(): boolean {\n        return Boolean(this.injector.get(TuiSliderKeySteps, null));\n    }\n\n    protected get segmentWidth(): number {\n        return 100 / Math.max(1, this.segments);\n    }\n\n    protected get step(): number {\n        return Number(this.el.step) || 1;\n    }\n}\n","import {Directive, forwardRef, inject, Input} from '@angular/core';\nimport {TuiControl} from '@taiga-ui/cdk/classes';\nimport {tuiFallbackValueProvider} from '@taiga-ui/cdk/tokens';\nimport {tuiClamp} from '@taiga-ui/cdk/utils/math';\n\nimport {TuiSliderComponent} from '../slider.component';\nimport type {TuiKeySteps} from './key-steps';\nimport {tuiKeyStepValueToPercentage, tuiPercentageToKeyStepValue} from './key-steps';\n\n@Directive({\n    standalone: true,\n    selector: 'input[tuiSlider][keySteps]',\n    providers: [tuiFallbackValueProvider(0)],\n    host: {\n        '[attr.aria-valuenow]': 'value()',\n        '[attr.aria-valuemin]': 'min',\n        '[attr.aria-valuemax]': 'max',\n        '[disabled]': 'disabled()',\n        '(blur)': 'onTouched()',\n        '(input)': 'updateControlValue()',\n        '(change)': 'updateControlValue()',\n    },\n})\nexport class TuiSliderKeySteps extends TuiControl<number> {\n    private readonly slider = inject<TuiSliderComponent>(\n        forwardRef(() => TuiSliderComponent),\n    );\n\n    @Input()\n    public keySteps!: TuiKeySteps;\n\n    public override writeValue(controlValue: number | null): void {\n        if (controlValue === null) {\n            return;\n        }\n\n        const clampedControlValue = tuiClamp(controlValue, this.min, this.max);\n\n        ngDevMode &&\n            console.assert(\n                controlValue === clampedControlValue,\n                '\\n[SliderKeySteps]: You cannot programmatically set value which is less/more than min/max',\n            );\n\n        this.slider.value = this.transformToNativeValue(clampedControlValue);\n    }\n\n    protected get min(): number {\n        return this.keySteps[0][1];\n    }\n\n    protected get max(): number {\n        return this.keySteps[this.keySteps.length - 1]?.[1] ?? 0;\n    }\n\n    protected updateControlValue(): void {\n        this.onChange(\n            tuiPercentageToKeyStepValue(this.slider.valueRatio * 100, this.keySteps),\n        );\n    }\n\n    private transformToNativeValue(controlValue: number): number {\n        const {min, max} = this.slider;\n        const newValuePercentage = tuiKeyStepValueToPercentage(\n            controlValue,\n            this.keySteps,\n        );\n\n        return (newValuePercentage * (max - min)) / 100 + min;\n    }\n}\n","import type {BooleanInput} from '@angular/cdk/coercion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {Directive, inject, Input} from '@angular/core';\nimport {takeUntilDestroyed} from '@angular/core/rxjs-interop';\nimport {TUI_FALSE_HANDLER, TUI_TRUE_HANDLER} from '@taiga-ui/cdk/constants';\nimport {tuiTypedFromEvent} from '@taiga-ui/cdk/observables';\nimport {tuiInjectElement} from '@taiga-ui/cdk/utils/dom';\nimport {combineLatest, filter, map, merge, tap} from 'rxjs';\n\nconst SLIDER_INTERACTION_KEYS = new Set([\n    'ArrowLeft',\n    'ArrowRight',\n    'ArrowUp',\n    'ArrowDown',\n    'Home',\n    'End',\n    'PageUp',\n    'PageDown',\n]);\n\n/**\n * Native <input type='range' readonly> doesn't work.\n * This directive imitates this native behaviour.\n */\n@Directive({\n    standalone: true,\n    selector: 'input[tuiSlider][readonly]',\n    host: {\n        '(keydown)': 'preventKeyboardInteraction($event)',\n        '(mousedown)': 'preventEvent($event)',\n    },\n})\nexport class TuiSliderReadonly {\n    private readonly el = tuiInjectElement<HTMLInputElement>();\n    private readonly doc = inject(DOCUMENT);\n\n    @Input({transform: coerceBooleanProperty})\n    public readonly: BooleanInput = true;\n\n    constructor() {\n        const touchStart$ = tuiTypedFromEvent(this.el, 'touchstart', {\n            passive: false,\n        });\n        const touchMove$ = tuiTypedFromEvent(this.doc, 'touchmove', {\n            passive: false,\n        });\n        const touchEnd$ = tuiTypedFromEvent(this.doc, 'touchend', {\n            passive: true,\n        });\n\n        const shouldPreventMove$ = merge(\n            touchStart$.pipe(\n                tap((e) => this.preventEvent(e)),\n                map(TUI_TRUE_HANDLER),\n            ),\n            touchEnd$.pipe(map(TUI_FALSE_HANDLER)),\n        );\n\n        /**\n         * @bad TODO think about another solution.\n         * Keep in mind that preventing touch event (on slider) inside `@HostListener('touchstart')` doesn't work for mobile chrome.\n         */\n        combineLatest([touchMove$, shouldPreventMove$])\n            .pipe(\n                filter(([_, shouldPreventMove]) => shouldPreventMove),\n                takeUntilDestroyed(),\n            )\n            .subscribe(([moveEvent]) => this.preventEvent(moveEvent));\n    }\n\n    protected preventEvent(event: Event): void {\n        if (event.cancelable && this.readonly) {\n            event.preventDefault();\n        }\n    }\n\n    protected preventKeyboardInteraction(event: KeyboardEvent): void {\n        if (SLIDER_INTERACTION_KEYS.has(event.key)) {\n            this.preventEvent(event);\n        }\n    }\n}\n","/// <reference types=\"@taiga-ui/tsconfig/ng-dev-mode\" />\nimport {AsyncPipe, NgIf} from '@angular/common';\nimport type {AfterContentInit} from '@angular/core';\nimport {ChangeDetectionStrategy, Component, ContentChild} from '@angular/core';\nimport {NgControl} from '@angular/forms';\nimport type {TuiSizeS} from '@taiga-ui/core/types';\n\nimport {TuiSliderComponent} from '../slider.component';\n\n@Component({\n    standalone: true,\n    selector: '[tuiSliderThumbLabel]',\n    imports: [AsyncPipe, NgIf],\n    templateUrl: './slider-thumb-label.template.html',\n    styleUrls: ['./slider-thumb-label.style.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TuiSliderThumbLabel implements AfterContentInit {\n    @ContentChild(TuiSliderComponent)\n    protected readonly slider?: TuiSliderComponent;\n\n    @ContentChild(NgControl)\n    protected readonly control?: NgControl;\n\n    public ngAfterContentInit(): void {\n        ngDevMode &&\n            console.assert(\n                Boolean(this.control?.valueChanges),\n                '\\n[tuiSliderThumbLabel] expected <input tuiSlider type=\"range\" /> to use Angular Forms.\\n' +\n                    'Use [(ngModel)] or [formControl] or formControlName for correct work.',\n            );\n    }\n\n    protected get size(): TuiSizeS {\n        return this.slider?.size || 'm';\n    }\n\n    protected get ratio(): number {\n        return this.slider?.valueRatio || 0;\n    }\n\n    protected get ghostLeft(): number {\n        return this.ratio * (this.slider?.el.offsetWidth || 0);\n    }\n}\n","<ng-container *ngIf=\"control?.valueChanges | async\" />\n\n<div\n    class=\"t-ghost\"\n    [attr.data-size]=\"size\"\n    [style.--tui-slider-thumb-ratio]=\"ratio\"\n    [style.left.px]=\"ghostLeft\"\n>\n    <ng-content />\n</div>\n\n<ng-content select=\"input[type=range]\" />\n","import {TuiSliderKeySteps} from './helpers/slider-key-steps.directive';\nimport {TuiSliderReadonly} from './helpers/slider-readonly.directive';\nimport {TuiSliderThumbLabel} from './helpers/slider-thumb-label.component';\nimport {TuiSliderComponent} from './slider.component';\n\nexport const TuiSlider = [\n    TuiSliderComponent,\n    TuiSliderThumbLabel,\n    TuiSliderKeySteps,\n    TuiSliderReadonly,\n] as const;\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}