import type { AfterViewChecked, AfterViewInit, QueryList } from '@angular/core';
import { EventEmitter, TemplateRef } from '@angular/core';
import type { TuiActiveZone } from '@taiga-ui/cdk/directives/active-zone';
import type { TuiContext } from '@taiga-ui/cdk/types';
import type { TuiSizeL } from '@taiga-ui/core/types';
import type { PolymorpheusContent } from '@taiga-ui/polymorpheus';
import * as i0 from "@angular/core";
export declare class TuiTabsWithMore implements AfterViewChecked, AfterViewInit {
    private readonly moreButton?;
    private readonly dir?;
    private readonly options;
    private readonly refresh$;
    private readonly el;
    private readonly cdr;
    private maxIndex;
    protected readonly items: QueryList<TemplateRef<Record<string, unknown>>>;
    protected readonly moreWord$: import("rxjs").Observable<string>;
    protected open: boolean;
    size: TuiSizeL;
    moreContent: PolymorpheusContent;
    dropdownContent: PolymorpheusContent<TuiContext<TuiActiveZone>>;
    underline: string | boolean;
    itemsLimit: number;
    readonly activeItemIndexChange: EventEmitter<number>;
    activeItemIndex: number;
    set itemIndex(activeItemIndex: number);
    get lastVisibleIndex(): number;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    protected get tabs(): readonly HTMLElement[];
    protected get activeElement(): HTMLElement | null;
    protected get isMoreAlone(): boolean;
    protected get isMoreVisible(): boolean;
    protected get isMoreFocusable(): boolean;
    protected get isMoreActive(): boolean;
    protected onActiveItemIndexChange(activeItemIndex: number): void;
    protected onClick(index: number): void;
    protected onArrowRight(event: Event): void;
    protected onArrowLeft(): void;
    protected onWrapperArrow(event: Event, wrapper: HTMLElement, previous: boolean): void;
    protected isOverflown(index: number): boolean;
    protected shouldShow(index: number): boolean;
    private get margin();
    private focusMore;
    private getMaxIndex;
    private updateActiveItemIndex;
    private refresh;
    static ɵfac: i0.ɵɵFactoryDeclaration<TuiTabsWithMore, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TuiTabsWithMore, "tui-tabs-with-more, nav[tuiTabsWithMore]", never, { "size": { "alias": "size"; "required": false; }; "moreContent": { "alias": "moreContent"; "required": false; }; "dropdownContent": { "alias": "dropdownContent"; "required": false; }; "underline": { "alias": "underline"; "required": false; }; "itemsLimit": { "alias": "itemsLimit"; "required": false; }; "itemIndex": { "alias": "activeItemIndex"; "required": false; }; }, { "activeItemIndexChange": "activeItemIndexChange"; }, ["items"], never, true, never>;
}
