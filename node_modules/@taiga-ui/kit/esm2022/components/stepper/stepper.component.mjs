import { __decorate } from "tslib";
import { AsyncPipe, NgIf } from '@angular/common';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, DestroyRef, ElementRef, EventEmitter, forwardRef, inject, Input, Output, } from '@angular/core';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { ResizeObserverService } from '@ng-web-apis/resize-observer';
import { EMPTY_QUERY } from '@taiga-ui/cdk/constants';
import { tuiQueryListChanges } from '@taiga-ui/cdk/observables';
import { TuiScrollService } from '@taiga-ui/cdk/services';
import { tuiInjectElement, tuiIsElement } from '@taiga-ui/cdk/utils/dom';
import { tuiMoveFocus } from '@taiga-ui/cdk/utils/focus';
import { tuiGetOriginalArrayFromQueryList, tuiPure, } from '@taiga-ui/cdk/utils/miscellaneous';
import { TUI_ANIMATIONS_SPEED } from '@taiga-ui/core/tokens';
import { tuiGetDuration } from '@taiga-ui/core/utils/miscellaneous';
import { delay } from 'rxjs';
import { TuiStep } from './step.component';
import * as i0 from "@angular/core";
class TuiStepperComponent {
    constructor() {
        this.steps = EMPTY_QUERY;
        this.cdr = inject(ChangeDetectorRef);
        this.el = tuiInjectElement();
        this.scrollService = inject(TuiScrollService);
        this.speed = inject(TUI_ANIMATIONS_SPEED);
        this.destroyRef = inject(DestroyRef);
        this.activeItemIndex = 0;
        this.$ = inject(ResizeObserverService, { self: true })
            .pipe(takeUntilDestroyed())
            .subscribe(() => this.scrollIntoView(this.activeItemIndex));
        this.orientation = 'horizontal';
        this.activeItemIndexChange = new EventEmitter();
    }
    set activeIndex(index) {
        this.activeItemIndex = index;
        this.scrollIntoView(index);
    }
    indexOf(step) {
        return tuiGetOriginalArrayFromQueryList(this.steps).findIndex(({ nativeElement }) => nativeElement === step);
    }
    isActive(index) {
        return index === this.activeItemIndex;
    }
    activate(index) {
        if (this.activeItemIndex === index) {
            return;
        }
        this.activeItemIndex = index;
        this.activeItemIndexChange.emit(index);
        this.cdr.markForCheck();
        this.scrollIntoView(index);
    }
    get changes$() {
        // Delay is required to trigger change detection after steps are rendered,
        // so they can update their "active" status
        return tuiQueryListChanges(this.steps).pipe(delay(0));
    }
    onHorizontal(event, step) {
        if (this.orientation !== 'horizontal' || !event.target) {
            return;
        }
        event.preventDefault();
        this.moveFocus(event.target, step);
    }
    onVertical(event, step) {
        if (this.orientation !== 'vertical' || !event.target) {
            return;
        }
        event.preventDefault();
        this.moveFocus(event.target, step);
    }
    moveFocus(current, step) {
        if (!tuiIsElement(current)) {
            return;
        }
        const stepElements = this.steps.toArray().map(({ nativeElement }) => nativeElement);
        const index = stepElements.findIndex((element) => element === current);
        tuiMoveFocus(index, stepElements, step);
    }
    scrollIntoView(index) {
        const step = this.steps.get(index)?.nativeElement;
        if (!step) {
            return;
        }
        const { clientHeight, clientWidth, offsetTop, offsetLeft } = this.el;
        const { offsetHeight, offsetWidth, offsetTop: stepOffsetTop, offsetLeft: stepOffsetLeft, } = step;
        const top = stepOffsetTop - offsetTop - clientHeight / 2 + offsetHeight / 2;
        const left = stepOffsetLeft - offsetLeft - clientWidth / 2 + offsetWidth / 2;
        this.scrollService
            .scroll$(this.el, Math.max(0, top), Math.max(0, left), tuiGetDuration(this.speed) / 3)
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiStepperComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiStepperComponent, isStandalone: true, selector: "tui-stepper, nav[tuiStepper]", inputs: { orientation: "orientation", activeIndex: ["activeItemIndex", "activeIndex"] }, outputs: { activeItemIndexChange: "activeItemIndexChange" }, host: { listeners: { "keydown.arrowRight": "onHorizontal($event, 1)", "keydown.arrowLeft": "onHorizontal($event, -1)", "keydown.arrowDown": "onVertical($event, 1)", "keydown.arrowUp": "onVertical($event, -1)" }, properties: { "attr.data-orientation": "orientation" } }, providers: [ResizeObserverService], queries: [{ propertyName: "steps", predicate: i0.forwardRef(function () { return TuiStep; }), read: ElementRef }], ngImport: i0, template: "<ng-container *ngIf=\"changes$ | async\" />\n<ng-content />\n", styles: [":host{scrollbar-width:none;-ms-overflow-style:none;display:flex;scroll-behavior:var(--tui-scroll-behavior);overflow:auto;counter-reset:steps}:host::-webkit-scrollbar,:host::-webkit-scrollbar-thumb{display:none}:host[data-orientation=vertical]{flex-direction:column}\n"], dependencies: [{ kind: "pipe", type: AsyncPipe, name: "async" }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
__decorate([
    tuiPure
], TuiStepperComponent.prototype, "changes$", null);
export { TuiStepperComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiStepperComponent, decorators: [{
            type: Component,
            args: [{ standalone: true, selector: 'tui-stepper, nav[tuiStepper]', imports: [AsyncPipe, NgIf], changeDetection: ChangeDetectionStrategy.OnPush, providers: [ResizeObserverService], host: {
                        '[attr.data-orientation]': 'orientation',
                        '(keydown.arrowRight)': 'onHorizontal($event, 1)',
                        '(keydown.arrowLeft)': 'onHorizontal($event, -1)',
                        '(keydown.arrowDown)': 'onVertical($event, 1)',
                        '(keydown.arrowUp)': 'onVertical($event, -1)',
                    }, template: "<ng-container *ngIf=\"changes$ | async\" />\n<ng-content />\n", styles: [":host{scrollbar-width:none;-ms-overflow-style:none;display:flex;scroll-behavior:var(--tui-scroll-behavior);overflow:auto;counter-reset:steps}:host::-webkit-scrollbar,:host::-webkit-scrollbar-thumb{display:none}:host[data-orientation=vertical]{flex-direction:column}\n"] }]
        }], propDecorators: { steps: [{
                type: ContentChildren,
                args: [forwardRef(() => TuiStep), { read: ElementRef }]
            }], orientation: [{
                type: Input
            }], activeItemIndexChange: [{
                type: Output
            }], activeIndex: [{
                type: Input,
                args: ['activeItemIndex']
            }], changes$: [] } });
//# sourceMappingURL=data:application/json;base64,