import { AsyncPipe, NgIf } from '@angular/common';
import { ChangeDetectionStrategy, Component, ContentChild, ViewEncapsulation, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { TuiLet } from '@taiga-ui/cdk/directives/let';
import { tuiControlValue } from '@taiga-ui/cdk/observables';
import { tuiIsElement, tuiIsInput } from '@taiga-ui/cdk/utils/dom';
import { defer } from 'rxjs';
import * as i0 from "@angular/core";
class TuiInputInline {
    constructor() {
        this.value$ = defer(() => tuiControlValue(this.control));
        this.indent = -1;
    }
    onScroll(target) {
        if (tuiIsElement(target) && tuiIsInput(target)) {
            this.indent = -target.scrollLeft - 1; // -1 for Safari (see styles)
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputInline, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiInputInline, isStandalone: true, selector: "tui-input-inline", host: { listeners: { "scroll.capture": "onScroll($event.target)" } }, queries: [{ propertyName: "control", first: true, predicate: NgControl, descendants: true }], ngImport: i0, template: "<ng-container *tuiLet=\"value$ | async as value\">\n    <span\n        class=\"t-before\"\n        [style.text-indent.px]=\"indent\"\n        [textContent]=\"value\"\n    ></span>\n\n    <span\n        *ngIf=\"!value\"\n        automation-id=\"tui-input-inline__placeholder\"\n        class=\"t-placeholder\"\n    >\n        <ng-content />\n    </span>\n</ng-container>\n<ng-content select=\"input\" />\n", styles: ["tui-input-inline{position:relative;display:inline-block;overflow:hidden;white-space:nowrap;box-sizing:border-box}tui-input-inline ::spelling-error{color:transparent}tui-input-inline>.t-before{display:block;padding-right:.02em;margin-left:1px;white-space:pre}tui-input-inline>.t-placeholder{display:inline-block;min-inline-size:1px}tui-input-inline>input{position:absolute;top:0;left:0;background-color:transparent;padding:inherit;font:inherit;-webkit-text-fill-color:transparent;box-sizing:border-box;inline-size:100%;block-size:100%;border-width:0;text-align:inherit;letter-spacing:inherit;text-indent:inherit;text-transform:inherit;outline:none}\n"], dependencies: [{ kind: "pipe", type: AsyncPipe, name: "async" }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: TuiLet, selector: "[tuiLet]", inputs: ["tuiLet"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
export { TuiInputInline };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputInline, decorators: [{
            type: Component,
            args: [{ standalone: true, selector: 'tui-input-inline', imports: [AsyncPipe, NgIf, TuiLet], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {
                        '(scroll.capture)': 'onScroll($event.target)',
                    }, template: "<ng-container *tuiLet=\"value$ | async as value\">\n    <span\n        class=\"t-before\"\n        [style.text-indent.px]=\"indent\"\n        [textContent]=\"value\"\n    ></span>\n\n    <span\n        *ngIf=\"!value\"\n        automation-id=\"tui-input-inline__placeholder\"\n        class=\"t-placeholder\"\n    >\n        <ng-content />\n    </span>\n</ng-container>\n<ng-content select=\"input\" />\n", styles: ["tui-input-inline{position:relative;display:inline-block;overflow:hidden;white-space:nowrap;box-sizing:border-box}tui-input-inline ::spelling-error{color:transparent}tui-input-inline>.t-before{display:block;padding-right:.02em;margin-left:1px;white-space:pre}tui-input-inline>.t-placeholder{display:inline-block;min-inline-size:1px}tui-input-inline>input{position:absolute;top:0;left:0;background-color:transparent;padding:inherit;font:inherit;-webkit-text-fill-color:transparent;box-sizing:border-box;inline-size:100%;block-size:100%;border-width:0;text-align:inherit;letter-spacing:inherit;text-indent:inherit;text-transform:inherit;outline:none}\n"] }]
        }], propDecorators: { control: [{
                type: ContentChild,
                args: [NgControl]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtaW5saW5lLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC9jb21wb25lbnRzL2lucHV0LWlubGluZS9pbnB1dC1pbmxpbmUuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMva2l0L2NvbXBvbmVudHMvaW5wdXQtaW5saW5lL2lucHV0LWlubGluZS50ZW1wbGF0ZS5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsSUFBSSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDaEQsT0FBTyxFQUNILHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsWUFBWSxFQUNaLGlCQUFpQixHQUNwQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDekMsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLDhCQUE4QixDQUFDO0FBQ3BELE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUMxRCxPQUFPLEVBQUMsWUFBWSxFQUFFLFVBQVUsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQ2pFLE9BQU8sRUFBQyxLQUFLLEVBQUMsTUFBTSxNQUFNLENBQUM7O0FBRTNCLE1BWWEsY0FBYztJQVozQjtRQWdCdUIsV0FBTSxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLE9BQVEsQ0FBQyxDQUFDLENBQUM7UUFFOUQsV0FBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO0tBT3pCO0lBTGEsUUFBUSxDQUFDLE1BQTBCO1FBQ3pDLElBQUksWUFBWSxDQUFDLE1BQU0sQ0FBQyxJQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUM1QyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsTUFBTSxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUMsQ0FBQyw2QkFBNkI7U0FDdEU7SUFDTCxDQUFDOytHQVpRLGNBQWM7bUdBQWQsY0FBYyx1TEFDVCxTQUFTLGdEQzFCM0Isc1pBZ0JBLDhyQkRBYyxTQUFTLDhDQUFFLElBQUksNkZBQUUsTUFBTTs7U0FTeEIsY0FBYzs0RkFBZCxjQUFjO2tCQVoxQixTQUFTO2lDQUNNLElBQUksWUFDTixrQkFBa0IsV0FDbkIsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxpQkFHbkIsaUJBQWlCLENBQUMsSUFBSSxtQkFDcEIsdUJBQXVCLENBQUMsTUFBTSxRQUN6Qzt3QkFDRixrQkFBa0IsRUFBRSx5QkFBeUI7cUJBQ2hEOzhCQUlnQixPQUFPO3NCQUR2QixZQUFZO3VCQUFDLFNBQVMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0FzeW5jUGlwZSwgTmdJZn0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7XG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gICAgQ29tcG9uZW50LFxuICAgIENvbnRlbnRDaGlsZCxcbiAgICBWaWV3RW5jYXBzdWxhdGlvbixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge05nQ29udHJvbH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHtUdWlMZXR9IGZyb20gJ0B0YWlnYS11aS9jZGsvZGlyZWN0aXZlcy9sZXQnO1xuaW1wb3J0IHt0dWlDb250cm9sVmFsdWV9IGZyb20gJ0B0YWlnYS11aS9jZGsvb2JzZXJ2YWJsZXMnO1xuaW1wb3J0IHt0dWlJc0VsZW1lbnQsIHR1aUlzSW5wdXR9IGZyb20gJ0B0YWlnYS11aS9jZGsvdXRpbHMvZG9tJztcbmltcG9ydCB7ZGVmZXJ9IGZyb20gJ3J4anMnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzdGFuZGFsb25lOiB0cnVlLFxuICAgIHNlbGVjdG9yOiAndHVpLWlucHV0LWlubGluZScsXG4gICAgaW1wb3J0czogW0FzeW5jUGlwZSwgTmdJZiwgVHVpTGV0XSxcbiAgICB0ZW1wbGF0ZVVybDogJy4vaW5wdXQtaW5saW5lLnRlbXBsYXRlLmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL2lucHV0LWlubGluZS5zdHlsZS5sZXNzJ10sXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgICBob3N0OiB7XG4gICAgICAgICcoc2Nyb2xsLmNhcHR1cmUpJzogJ29uU2Nyb2xsKCRldmVudC50YXJnZXQpJyxcbiAgICB9LFxufSlcbmV4cG9ydCBjbGFzcyBUdWlJbnB1dElubGluZSB7XG4gICAgQENvbnRlbnRDaGlsZChOZ0NvbnRyb2wpXG4gICAgcHJpdmF0ZSByZWFkb25seSBjb250cm9sPzogTmdDb250cm9sO1xuXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IHZhbHVlJCA9IGRlZmVyKCgpID0+IHR1aUNvbnRyb2xWYWx1ZSh0aGlzLmNvbnRyb2whKSk7XG5cbiAgICBwcm90ZWN0ZWQgaW5kZW50ID0gLTE7XG5cbiAgICBwcm90ZWN0ZWQgb25TY3JvbGwodGFyZ2V0OiBFdmVudFRhcmdldCB8IG51bGwpOiB2b2lkIHtcbiAgICAgICAgaWYgKHR1aUlzRWxlbWVudCh0YXJnZXQpICYmIHR1aUlzSW5wdXQodGFyZ2V0KSkge1xuICAgICAgICAgICAgdGhpcy5pbmRlbnQgPSAtdGFyZ2V0LnNjcm9sbExlZnQgLSAxOyAvLyAtMSBmb3IgU2FmYXJpIChzZWUgc3R5bGVzKVxuICAgICAgICB9XG4gICAgfVxufVxuIiwiPG5nLWNvbnRhaW5lciAqdHVpTGV0PVwidmFsdWUkIHwgYXN5bmMgYXMgdmFsdWVcIj5cbiAgICA8c3BhblxuICAgICAgICBjbGFzcz1cInQtYmVmb3JlXCJcbiAgICAgICAgW3N0eWxlLnRleHQtaW5kZW50LnB4XT1cImluZGVudFwiXG4gICAgICAgIFt0ZXh0Q29udGVudF09XCJ2YWx1ZVwiXG4gICAgPjwvc3Bhbj5cblxuICAgIDxzcGFuXG4gICAgICAgICpuZ0lmPVwiIXZhbHVlXCJcbiAgICAgICAgYXV0b21hdGlvbi1pZD1cInR1aS1pbnB1dC1pbmxpbmVfX3BsYWNlaG9sZGVyXCJcbiAgICAgICAgY2xhc3M9XCJ0LXBsYWNlaG9sZGVyXCJcbiAgICA+XG4gICAgICAgIDxuZy1jb250ZW50IC8+XG4gICAgPC9zcGFuPlxuPC9uZy1jb250YWluZXI+XG48bmctY29udGVudCBzZWxlY3Q9XCJpbnB1dFwiIC8+XG4iXX0=