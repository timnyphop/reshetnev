import { CommonModule } from '@angular/common';
import { ChangeDetectionStrategy, Component, computed, ElementRef, forwardRef, inject, Input, Output, signal, TemplateRef, ViewChild, } from '@angular/core';
import { toObservable, toSignal } from '@angular/core/rxjs-interop';
import { FormsModule } from '@angular/forms';
import { MaskitoDirective } from '@maskito/angular';
import { maskitoInitialCalibrationPlugin, maskitoTransform } from '@maskito/core';
import { maskitoRemoveOnBlurPlugin } from '@maskito/kit';
import { maskitoGetCountryFromNumber, maskitoPhoneOptionsGenerator } from '@maskito/phone';
import { tuiAsControl, TuiControl } from '@taiga-ui/cdk/classes';
import { CHAR_PLUS } from '@taiga-ui/cdk/constants';
import { tuiFallbackValueProvider } from '@taiga-ui/cdk/tokens';
import { tuiIsInputEvent } from '@taiga-ui/cdk/utils/dom';
import { tuiDirectiveBinding } from '@taiga-ui/cdk/utils/miscellaneous';
import { TuiDataList } from '@taiga-ui/core/components/data-list';
import { TUI_TEXTFIELD_OPTIONS, TuiTextfield, TuiTextfieldDropdownDirective, tuiTextfieldOptionsProvider, } from '@taiga-ui/core/components/textfield';
import { TuiDropdown, tuiDropdown, TuiDropdownDirective, TuiDropdownOpen, tuiDropdownOpen, tuiDropdownOptionsProvider, TuiWithDropdownOpen, } from '@taiga-ui/core/directives/dropdown';
import { TuiGroup } from '@taiga-ui/core/directives/group';
import { TuiFlagPipe } from '@taiga-ui/core/pipes/flag';
import { TuiChevron } from '@taiga-ui/kit/directives';
import { TUI_COUNTRIES } from '@taiga-ui/kit/tokens';
import { validatePhoneNumberLength } from 'libphonenumber-js';
import { getCountryCallingCode } from 'libphonenumber-js/core';
import { from, skip } from 'rxjs';
import { TuiGetCountryCallingCodePipe } from './get-country-calling-code.pipe';
import { TUI_INPUT_PHONE_INTERNATIONAL_OPTIONS } from './input-phone-international.options';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core/directives/group";
import * as i2 from "@taiga-ui/core/directives/dropdown";
import * as i3 from "@angular/common";
import * as i4 from "@angular/forms";
import * as i5 from "@taiga-ui/core/components/data-list";
import * as i6 from "@taiga-ui/core/components/label";
import * as i7 from "@taiga-ui/core/components/textfield";
const NOT_FORM_CONTROL_SYMBOLS = /[^+\d]/g;
class TuiInputPhoneInternational extends TuiControl {
    constructor() {
        super(...arguments);
        this.dropdown = tuiDropdown(null);
        this.options = inject(TUI_INPUT_PHONE_INTERNATIONAL_OPTIONS);
        this.size = inject(TUI_TEXTFIELD_OPTIONS).size;
        this.open = tuiDropdownOpen();
        this.names = toSignal(inject(TUI_COUNTRIES));
        this.metadata = toSignal(from(this.options.metadata));
        this.countryIsoCode = signal(this.options.countryIsoCode);
        this.mask = computed(() => this.computeMask(this.countryIsoCode(), this.metadata()));
        this.$ = tuiDirectiveBinding(TuiDropdownOpen, 'tuiDropdownEnabled', this.interactive);
        this.textfieldValue = '';
        this.countries = this.options.countries;
        this.countryIsoCodeChange = toObservable(this.countryIsoCode).pipe(skip(1));
    }
    set isoCode(code) {
        this.countryIsoCode.set(code);
    }
    onPaste(event) {
        const phonesMetadata = this.metadata();
        if (!tuiIsInputEvent(event) ||
            !phonesMetadata ||
            (!event.inputType.includes('Drop') && !event.inputType.includes('Paste'))) {
            return;
        }
        const newValue = event.data || '';
        const prefixedValue = newValue.startsWith(CHAR_PLUS)
            ? newValue
            : CHAR_PLUS + newValue;
        if (validatePhoneNumberLength(prefixedValue) === 'TOO_SHORT') {
            return;
        }
        const countryIsoCode = maskitoGetCountryFromNumber(prefixedValue, phonesMetadata);
        if (countryIsoCode) {
            this.countryIsoCode.set(countryIsoCode);
        }
    }
    onItemClick(isoCode) {
        this.open.set(false);
        this.countryIsoCode.set(isoCode);
        this.input?.nativeElement.focus();
    }
    writeValue(unmaskedValue) {
        super.writeValue(unmaskedValue);
        const maskOptions = this.mask();
        this.textfieldValue = maskOptions
            ? maskitoTransform(unmaskedValue, maskOptions)
            : unmaskedValue; // it will be calibrated later when mask is ready (by maskitoInitialCalibrationPlugin)
        this.cdr.detectChanges();
    }
    set template(template) {
        this.dropdown.set(template);
    }
    onFocus() {
        const phoneMetadata = this.metadata();
        if (!this.textfieldValue && phoneMetadata) {
            this.textfieldValue = `${CHAR_PLUS + getCountryCallingCode(this.countryIsoCode(), phoneMetadata)} `;
        }
    }
    onValueChange(maskedValue) {
        const unmaskedValue = maskedValue.replaceAll(NOT_FORM_CONTROL_SYMBOLS, '');
        const phonesMetadata = this.metadata();
        const countryCallingCode = phonesMetadata
            ? CHAR_PLUS + getCountryCallingCode(this.countryIsoCode(), phonesMetadata)
            : '';
        this.onChange(unmaskedValue === countryCallingCode ? '' : unmaskedValue);
    }
    computeMask(countryIsoCode, metadata) {
        if (!metadata) {
            return null;
        }
        const { plugins, ...restOptions } = maskitoPhoneOptionsGenerator({
            countryIsoCode,
            metadata,
        });
        return {
            ...restOptions,
            plugins: [
                ...plugins,
                maskitoRemoveOnBlurPlugin(`${CHAR_PLUS}${getCountryCallingCode(countryIsoCode, metadata)} `),
                maskitoInitialCalibrationPlugin(),
            ],
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputPhoneInternational, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiInputPhoneInternational, isStandalone: true, selector: "tui-input-phone-international", inputs: { countries: "countries", isoCode: ["countryIsoCode", "isoCode"] }, outputs: { countryIsoCodeChange: "countryIsoCodeChange" }, host: { properties: { "attr.data-size": "size()" } }, providers: [
            tuiAsControl(TuiInputPhoneInternational),
            tuiFallbackValueProvider(''),
            tuiTextfieldOptionsProvider({ cleaner: signal(false) }),
            tuiDropdownOptionsProvider({
                limitWidth: 'fixed',
                align: 'right',
            }),
        ], viewQueries: [{ propertyName: "input", first: true, predicate: MaskitoDirective, descendants: true, read: ElementRef }, { propertyName: "template", first: true, predicate: i0.forwardRef(function () { return TuiTextfieldDropdownDirective; }), descendants: true, read: TemplateRef }], usesInheritance: true, hostDirectives: [{ directive: i1.TuiGroup }, { directive: i2.TuiDropdownDirective }, { directive: i2.TuiWithDropdownOpen }], ngImport: i0, template: "<tui-textfield\n    class=\"t-country-select\"\n    [content]=\"flag\"\n    [tuiChevron]=\"open()\"\n>\n    <select\n        ngModel=\"\"\n        tuiTextfield\n        [disabled]=\"disabled()\"\n        [focused]=\"open() || null\"\n        [ngModelOptions]=\"{standalone: true}\"\n        [readOnly]=\"readOnly()\"\n    ></select>\n\n    <ng-template #flag>\n        <img\n            class=\"t-flag t-flag_select\"\n            [alt]=\"names()?.[countryIsoCode()]\"\n            [src]=\"countryIsoCode() | tuiFlag\"\n        />\n    </ng-template>\n</tui-textfield>\n\n<tui-textfield>\n    <input\n        autocomplete=\"new-password\"\n        tuiTextfield\n        [disabled]=\"disabled()\"\n        [invalid]=\"invalid()\"\n        [maskito]=\"mask()\"\n        [ngModelOptions]=\"{standalone: true}\"\n        [readOnly]=\"readOnly()\"\n        [(ngModel)]=\"textfieldValue\"\n        (beforeinput.capture)=\"onPaste($event)\"\n        (blur)=\"onTouched()\"\n        (focus)=\"!readOnly() && onFocus()\"\n        (ngModelChange)=\"onValueChange($event)\"\n    />\n\n    <!--\n    TODO: get rid of built-in input and label and just externalize everything in 5.0\n    <tui-input-phone-international>\n      <label tuiLabel>My label</label>\n      <input tuiTextfield placeholder=\"My placeholder\" [(ngModel)]=\"value\" />\n      <tui-icon icon=\"@tui.phone\" />\n    </tui-input-phone-international>\n    -->\n    <ng-content select=\"tui-icon, img\" />\n\n    <label tuiLabel>\n        <ng-content />\n    </label>\n</tui-textfield>\n\n<tui-data-list *tuiTextfieldDropdown>\n    <button\n        *ngFor=\"let item of countries\"\n        tuiOption\n        (click)=\"onItemClick(item)\"\n    >\n        <img\n            alt=\"\"\n            class=\"t-flag\"\n            [src]=\"item | tuiFlag\"\n        />\n        <span class=\"t-country-item-name\">{{ names()?.[item] }}</span>\n        <span class=\"t-country-item-code\">\n            {{ item | tuiGetCountryCallingCode: metadata() }}\n        </span>\n    </button>\n</tui-data-list>\n", styles: [".t-country-select{inline-size:5.625rem;flex:none}.t-country-select[data-size=m]{inline-size:5rem}.t-country-select[data-size=s]{inline-size:4rem}.t-flag{inline-size:1.75rem;block-size:1.75rem;border-radius:50%}.t-flag_select{position:absolute;top:0;left:0;bottom:0;right:0;left:.5rem;margin:auto}.t-country-item-name{margin-inline-start:.75rem;margin-inline-end:auto}.t-country-item-code{color:var(--tui-text-secondary);margin-inline-end:.25rem}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i4.SelectControlValueAccessor, selector: "select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]", inputs: ["compareWith"] }, { kind: "directive", type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: MaskitoDirective, selector: "[maskito]", inputs: ["maskito", "maskitoElement"] }, { kind: "directive", type: TuiChevron, selector: "[tuiChevron]", inputs: ["tuiChevron"] }, { kind: "component", type: i5.TuiDataListComponent, selector: "tui-data-list", inputs: ["emptyContent", "size"] }, { kind: "component", type: i5.TuiOption, selector: "button[tuiOption], a[tuiOption], label[tuiOption]", inputs: ["disabled", "value"] }, { kind: "pipe", type: TuiFlagPipe, name: "tuiFlag" }, { kind: "pipe", type: TuiGetCountryCallingCodePipe, name: "tuiGetCountryCallingCode" }, { kind: "directive", type: i6.TuiLabel, selector: "label[tuiLabel]" }, { kind: "component", type: i7.TuiSelect, selector: "select[tuiTextfield]", inputs: ["placeholder"] }, { kind: "component", type: i7.TuiTextfieldComponent, selector: "tui-textfield", inputs: ["filler", "stringify", "content"] }, { kind: "directive", type: i7.TuiTextfieldDirective, selector: "input[tuiTextfield]" }, { kind: "directive", type: i7.TuiTextfieldDropdownDirective, selector: "ng-template[tuiTextfieldDropdown]" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { TuiInputPhoneInternational };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputPhoneInternational, decorators: [{
            type: Component,
            args: [{ standalone: true, selector: 'tui-input-phone-international', imports: [
                        CommonModule,
                        FormsModule,
                        MaskitoDirective,
                        TuiChevron,
                        TuiDataList,
                        TuiDropdown,
                        TuiFlagPipe,
                        TuiGetCountryCallingCodePipe,
                        TuiGroup,
                        TuiTextfield,
                    ], changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        tuiAsControl(TuiInputPhoneInternational),
                        tuiFallbackValueProvider(''),
                        tuiTextfieldOptionsProvider({ cleaner: signal(false) }),
                        tuiDropdownOptionsProvider({
                            limitWidth: 'fixed',
                            align: 'right',
                        }),
                    ], hostDirectives: [TuiGroup, TuiDropdownDirective, TuiWithDropdownOpen], host: {
                        '[attr.data-size]': 'size()',
                    }, template: "<tui-textfield\n    class=\"t-country-select\"\n    [content]=\"flag\"\n    [tuiChevron]=\"open()\"\n>\n    <select\n        ngModel=\"\"\n        tuiTextfield\n        [disabled]=\"disabled()\"\n        [focused]=\"open() || null\"\n        [ngModelOptions]=\"{standalone: true}\"\n        [readOnly]=\"readOnly()\"\n    ></select>\n\n    <ng-template #flag>\n        <img\n            class=\"t-flag t-flag_select\"\n            [alt]=\"names()?.[countryIsoCode()]\"\n            [src]=\"countryIsoCode() | tuiFlag\"\n        />\n    </ng-template>\n</tui-textfield>\n\n<tui-textfield>\n    <input\n        autocomplete=\"new-password\"\n        tuiTextfield\n        [disabled]=\"disabled()\"\n        [invalid]=\"invalid()\"\n        [maskito]=\"mask()\"\n        [ngModelOptions]=\"{standalone: true}\"\n        [readOnly]=\"readOnly()\"\n        [(ngModel)]=\"textfieldValue\"\n        (beforeinput.capture)=\"onPaste($event)\"\n        (blur)=\"onTouched()\"\n        (focus)=\"!readOnly() && onFocus()\"\n        (ngModelChange)=\"onValueChange($event)\"\n    />\n\n    <!--\n    TODO: get rid of built-in input and label and just externalize everything in 5.0\n    <tui-input-phone-international>\n      <label tuiLabel>My label</label>\n      <input tuiTextfield placeholder=\"My placeholder\" [(ngModel)]=\"value\" />\n      <tui-icon icon=\"@tui.phone\" />\n    </tui-input-phone-international>\n    -->\n    <ng-content select=\"tui-icon, img\" />\n\n    <label tuiLabel>\n        <ng-content />\n    </label>\n</tui-textfield>\n\n<tui-data-list *tuiTextfieldDropdown>\n    <button\n        *ngFor=\"let item of countries\"\n        tuiOption\n        (click)=\"onItemClick(item)\"\n    >\n        <img\n            alt=\"\"\n            class=\"t-flag\"\n            [src]=\"item | tuiFlag\"\n        />\n        <span class=\"t-country-item-name\">{{ names()?.[item] }}</span>\n        <span class=\"t-country-item-code\">\n            {{ item | tuiGetCountryCallingCode: metadata() }}\n        </span>\n    </button>\n</tui-data-list>\n", styles: [".t-country-select{inline-size:5.625rem;flex:none}.t-country-select[data-size=m]{inline-size:5rem}.t-country-select[data-size=s]{inline-size:4rem}.t-flag{inline-size:1.75rem;block-size:1.75rem;border-radius:50%}.t-flag_select{position:absolute;top:0;left:0;bottom:0;right:0;left:.5rem;margin:auto}.t-country-item-name{margin-inline-start:.75rem;margin-inline-end:auto}.t-country-item-code{color:var(--tui-text-secondary);margin-inline-end:.25rem}\n"] }]
        }], propDecorators: { input: [{
                type: ViewChild,
                args: [MaskitoDirective, { read: ElementRef }]
            }], countries: [{
                type: Input
            }], countryIsoCodeChange: [{
                type: Output
            }], isoCode: [{
                type: Input,
                args: ['countryIsoCode']
            }], template: [{
                type: ViewChild,
                args: [forwardRef(() => TuiTextfieldDropdownDirective), { read: TemplateRef }]
            }] } });
//# sourceMappingURL=data:application/json;base64,