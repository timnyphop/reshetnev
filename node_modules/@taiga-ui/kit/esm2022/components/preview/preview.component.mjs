import { AsyncPipe, NgIf } from '@angular/common';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, inject, Input, } from '@angular/core';
import { WaMutationObserver } from '@ng-web-apis/mutation-observer';
import { WaResizeObserver } from '@ng-web-apis/resize-observer';
import { TUI_FALSE_HANDLER } from '@taiga-ui/cdk/constants';
import { TuiPan } from '@taiga-ui/cdk/directives/pan';
import { TuiZoom } from '@taiga-ui/cdk/directives/zoom';
import { tuiDragAndDropFrom, tuiTypedFromEvent } from '@taiga-ui/cdk/observables';
import { tuiInjectElement } from '@taiga-ui/cdk/utils/dom';
import { tuiClamp, tuiRound } from '@taiga-ui/cdk/utils/math';
import { tuiPx } from '@taiga-ui/cdk/utils/miscellaneous';
import { tuiSlideInTop } from '@taiga-ui/core/animations';
import { TuiButton } from '@taiga-ui/core/components/button';
import { TuiHint } from '@taiga-ui/core/directives/hint';
import { TUI_PREVIEW_ICONS, TUI_PREVIEW_TEXTS } from '@taiga-ui/kit/tokens';
import { BehaviorSubject, combineLatest, map, merge, startWith } from 'rxjs';
import { TuiPreviewAction } from './preview-action/preview-action.directive';
import { TuiPreviewZoom } from './zoom/preview-zoom.component';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core/directives/hint";
const INITIAL_SCALE_COEF = 0.8;
const EMPTY_COORDINATES = [0, 0];
const ROTATION_ANGLE = 90;
class TuiPreviewComponent {
    constructor() {
        this.el = tuiInjectElement();
        this.minZoom = 1;
        this.width = 0;
        this.height = 0;
        this.texts$ = inject(TUI_PREVIEW_TEXTS);
        this.icons = inject(TUI_PREVIEW_ICONS);
        this.cdr = inject(ChangeDetectorRef);
        this.zoom$ = new BehaviorSubject(this.minZoom);
        this.rotation$ = new BehaviorSubject(0);
        this.coordinates$ = new BehaviorSubject(EMPTY_COORDINATES);
        this.transitioned$ = merge(tuiDragAndDropFrom(this.el).pipe(map(({ stage }) => stage !== 'continues')), tuiTypedFromEvent(this.el, 'touchmove', {
            passive: true,
        }).pipe(map(TUI_FALSE_HANDLER)), tuiTypedFromEvent(this.el, 'wheel', { passive: true }).pipe(map(TUI_FALSE_HANDLER)));
        this.cursor$ = tuiDragAndDropFrom(this.el).pipe(map(({ stage }) => (stage === 'continues' ? 'grabbing' : 'initial')), startWith('initial'));
        this.wrapperTransform$ = combineLatest([
            this.coordinates$.pipe(map(([x, y]) => `${tuiPx(x)}, ${tuiPx(y)}`)),
            this.zoom$,
            this.rotation$,
        ]).pipe(map(([translate, zoom, rotation]) => `translate(${translate}) scale(${zoom}) rotate(${rotation}deg)`));
        this.zoomable = true;
        this.rotatable = false;
    }
    rotate() {
        this.rotation$.next(this.rotation$.value - ROTATION_ANGLE);
    }
    onPan(delta) {
        this.coordinates$.next(this.getGuardedCoordinates(this.coordinates$.value[0] + delta[0], this.coordinates$.value[1] + delta[1]));
    }
    onMutation(contentWrapper) {
        const { clientWidth, clientHeight } = contentWrapper;
        this.refresh(clientWidth, clientHeight);
    }
    onZoom({ clientX, clientY, delta }) {
        if (this.zoomable) {
            this.processZoom(clientX, clientY, delta);
        }
    }
    onResize([entry]) {
        if (entry?.contentRect) {
            this.refresh(entry.contentRect.width, entry.contentRect.height);
            this.cdr.detectChanges();
        }
    }
    reset() {
        this.zoom$.next(this.minZoom);
        this.coordinates$.next(EMPTY_COORDINATES);
    }
    setZoom(zoom) {
        this.zoom$.next(zoom);
        const [x, y] = this.coordinates$.value;
        this.coordinates$.next(this.getGuardedCoordinates(x, y));
    }
    get offsets() {
        const offsetX = ((this.zoom$.value - this.minZoom) * this.width) / 2;
        const offsetY = ((this.zoom$.value - this.minZoom) * this.height) / 2;
        return { offsetX, offsetY };
    }
    calculateMinZoom(contentHeight, contentWidth, boxHeight, boxWidth) {
        const bigSize = contentHeight > boxHeight * INITIAL_SCALE_COEF ||
            contentWidth > boxWidth * INITIAL_SCALE_COEF;
        const { clientHeight, clientWidth } = this.el;
        return bigSize
            ? tuiRound(Math.min((clientHeight * INITIAL_SCALE_COEF) / contentHeight, (clientWidth * INITIAL_SCALE_COEF) / contentWidth), 2)
            : 1;
    }
    refresh(width, height) {
        this.width = width;
        this.height = height;
        this.minZoom = this.calculateMinZoom(height, width, this.el.clientHeight, this.el.clientWidth);
        this.zoom$.next(this.minZoom);
        this.coordinates$.next(EMPTY_COORDINATES);
        this.rotation$.next(0);
    }
    processZoom(clientX, clientY, delta) {
        const oldScale = this.zoom$.value;
        const newScale = tuiClamp(oldScale + delta, this.minZoom, 2);
        const center = this.getScaleCenter({ clientX, clientY }, this.coordinates$.value, this.zoom$.value);
        const moveX = center[0] * oldScale - center[0] * newScale;
        const moveY = center[1] * oldScale - center[1] * newScale;
        this.zoom$.next(newScale);
        this.coordinates$.next(this.getGuardedCoordinates(this.coordinates$.value[0] + moveX, this.coordinates$.value[1] + moveY));
    }
    getGuardedCoordinates(x, y) {
        const { offsetX, offsetY } = this.offsets;
        return [tuiClamp(x, -offsetX, offsetX), tuiClamp(y, -offsetY, offsetY)];
    }
    getScaleCenter({ clientX, clientY }, [x, y], scale) {
        return [
            (clientX - x - this.el.offsetWidth / 2) / scale,
            (clientY - y - this.el.offsetHeight / 2) / scale,
        ];
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiPreviewComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiPreviewComponent, isStandalone: true, selector: "tui-preview", inputs: { zoomable: "zoomable", rotatable: "rotatable" }, ngImport: i0, template: "<ng-container *ngIf=\"texts$ | async as texts\">\n    <section\n        #contentWrapper\n        attributeFilter=\"src\"\n        characterData\n        childList\n        subtree\n        class=\"t-wrapper\"\n        [class.t-not-interactive-content]=\"zoomable\"\n        [class.t-transitive]=\"transitioned$ | async\"\n        [style.cursor]=\"cursor$ | async\"\n        [style.transform]=\"wrapperTransform$ | async\"\n        (tuiPan)=\"onPan($event)\"\n        (tuiZoom)=\"onZoom($event)\"\n        (waMutationObserver)=\"onMutation(contentWrapper)\"\n        (waResizeObserver)=\"onResize($event)\"\n    >\n        <ng-content />\n    </section>\n\n    <header class=\"t-header\">\n        <div class=\"t-title\">\n            <ng-content select=\"tui-preview-title\" />\n        </div>\n\n        <ng-content select=\"tui-preview-pagination\" />\n\n        <div class=\"t-actions\">\n            <ng-content select=\"[tuiPreviewAction]\" />\n        </div>\n    </header>\n\n    <footer class=\"t-footer\">\n        <button\n            *ngIf=\"rotatable\"\n            tuiHintAppearance=\"dark\"\n            tuiHintDescribe\n            tuiHintDirection=\"top-right\"\n            tuiIconButton\n            tuiPreviewAction\n            type=\"button\"\n            class=\"t-rotate-button\"\n            [iconStart]=\"icons.rotate\"\n            [tuiHint]=\"texts.rotate\"\n            (click)=\"rotate()\"\n        ></button>\n\n        <tui-preview-zoom\n            *ngIf=\"zoomable\"\n            [min]=\"minZoom\"\n            [value]=\"(zoom$ | async) || 1\"\n            (reset)=\"reset()\"\n            (valueChange)=\"setZoom($event)\"\n        />\n    </footer>\n</ng-container>\n", styles: [":host{position:relative;display:flex;justify-content:center;align-items:center;inline-size:100%;block-size:100%;-webkit-user-select:none;user-select:none}.t-header{position:fixed;top:1rem;display:flex;inline-size:100%;padding:0 1rem;box-sizing:border-box}.t-footer{position:absolute;bottom:1rem;display:flex;inline-size:100%;padding:0 1rem;box-sizing:border-box;justify-content:center}.t-actions{display:flex;flex:1;justify-content:flex-end}.t-actions ::ng-deep>*{margin-left:.625rem}.t-rotate-button{margin-right:.3125rem}.t-title{flex:1}:host-context(tui-root._mobile) .t-title{display:none}.t-not-interactive-content ::ng-deep>*{pointer-events:none}.t-wrapper{will-change:transform}.t-transitive{transition-duration:.3s}\n"], dependencies: [{ kind: "pipe", type: AsyncPipe, name: "async" }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: TuiButton, selector: "a[tuiButton],button[tuiButton],a[tuiIconButton],button[tuiIconButton]", inputs: ["size"] }, { kind: "directive", type: i1.TuiHintDirective, selector: "[tuiHint]:not(ng-container):not(ng-template)", inputs: ["tuiHintContext", "tuiHintAppearance", "tuiHint"] }, { kind: "directive", type: i1.TuiHintDescribe, selector: "[tuiHintDescribe]", inputs: ["tuiHintDescribe"] }, { kind: "directive", type: TuiPan, selector: "[tuiPan]", outputs: ["tuiPan"] }, { kind: "directive", type: TuiPreviewAction, selector: "[tuiPreviewAction]" }, { kind: "component", type: TuiPreviewZoom, selector: "tui-preview-zoom", inputs: ["min", "max", "value"], outputs: ["valueChange", "reset"] }, { kind: "directive", type: TuiZoom, selector: "[tuiZoom]", outputs: ["tuiZoom"] }, { kind: "directive", type: WaMutationObserver, selector: "[waMutationObserver]", inputs: ["attributeFilter", "attributeOldValue", "attributes", "characterData", "characterDataOldValue", "childList", "subtree"], outputs: ["waMutationObserver"], exportAs: ["MutationObserver"] }, { kind: "directive", type: WaResizeObserver, selector: "[waResizeObserver]", inputs: ["box"], outputs: ["waResizeObserver"] }], animations: [tuiSlideInTop], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { TuiPreviewComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiPreviewComponent, decorators: [{
            type: Component,
            args: [{ standalone: true, selector: 'tui-preview', imports: [
                        AsyncPipe,
                        NgIf,
                        TuiButton,
                        TuiHint,
                        TuiPan,
                        TuiPreviewAction,
                        TuiPreviewZoom,
                        TuiZoom,
                        WaMutationObserver,
                        WaResizeObserver,
                    ], changeDetection: ChangeDetectionStrategy.OnPush, animations: [tuiSlideInTop], template: "<ng-container *ngIf=\"texts$ | async as texts\">\n    <section\n        #contentWrapper\n        attributeFilter=\"src\"\n        characterData\n        childList\n        subtree\n        class=\"t-wrapper\"\n        [class.t-not-interactive-content]=\"zoomable\"\n        [class.t-transitive]=\"transitioned$ | async\"\n        [style.cursor]=\"cursor$ | async\"\n        [style.transform]=\"wrapperTransform$ | async\"\n        (tuiPan)=\"onPan($event)\"\n        (tuiZoom)=\"onZoom($event)\"\n        (waMutationObserver)=\"onMutation(contentWrapper)\"\n        (waResizeObserver)=\"onResize($event)\"\n    >\n        <ng-content />\n    </section>\n\n    <header class=\"t-header\">\n        <div class=\"t-title\">\n            <ng-content select=\"tui-preview-title\" />\n        </div>\n\n        <ng-content select=\"tui-preview-pagination\" />\n\n        <div class=\"t-actions\">\n            <ng-content select=\"[tuiPreviewAction]\" />\n        </div>\n    </header>\n\n    <footer class=\"t-footer\">\n        <button\n            *ngIf=\"rotatable\"\n            tuiHintAppearance=\"dark\"\n            tuiHintDescribe\n            tuiHintDirection=\"top-right\"\n            tuiIconButton\n            tuiPreviewAction\n            type=\"button\"\n            class=\"t-rotate-button\"\n            [iconStart]=\"icons.rotate\"\n            [tuiHint]=\"texts.rotate\"\n            (click)=\"rotate()\"\n        ></button>\n\n        <tui-preview-zoom\n            *ngIf=\"zoomable\"\n            [min]=\"minZoom\"\n            [value]=\"(zoom$ | async) || 1\"\n            (reset)=\"reset()\"\n            (valueChange)=\"setZoom($event)\"\n        />\n    </footer>\n</ng-container>\n", styles: [":host{position:relative;display:flex;justify-content:center;align-items:center;inline-size:100%;block-size:100%;-webkit-user-select:none;user-select:none}.t-header{position:fixed;top:1rem;display:flex;inline-size:100%;padding:0 1rem;box-sizing:border-box}.t-footer{position:absolute;bottom:1rem;display:flex;inline-size:100%;padding:0 1rem;box-sizing:border-box;justify-content:center}.t-actions{display:flex;flex:1;justify-content:flex-end}.t-actions ::ng-deep>*{margin-left:.625rem}.t-rotate-button{margin-right:.3125rem}.t-title{flex:1}:host-context(tui-root._mobile) .t-title{display:none}.t-not-interactive-content ::ng-deep>*{pointer-events:none}.t-wrapper{will-change:transform}.t-transitive{transition-duration:.3s}\n"] }]
        }], propDecorators: { zoomable: [{
                type: Input
            }], rotatable: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,