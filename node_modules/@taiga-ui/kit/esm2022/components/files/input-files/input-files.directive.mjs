import { coerceArray } from '@angular/cdk/coercion';
import { Directive, forwardRef, inject, Output } from '@angular/core';
import { tuiAsControl, TuiControl } from '@taiga-ui/cdk/classes';
import { EMPTY_ARRAY } from '@taiga-ui/cdk/constants';
import { tuiControlValue } from '@taiga-ui/cdk/observables';
import { tuiInjectElement } from '@taiga-ui/cdk/utils/dom';
import { tuiAppearanceOptionsProvider, TuiWithAppearance, } from '@taiga-ui/core/directives/appearance';
import { filter, map, switchMap, timer } from 'rxjs';
import { tuiFilesRejected } from '../files.utils';
import { TuiInputFiles } from './input-files.component';
import { TuiInputFilesValidator } from './input-files-validator.directive';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core/directives/appearance";
import * as i2 from "./input-files-validator.directive";
class TuiInputFilesDirective extends TuiControl {
    constructor() {
        super(...arguments);
        this.host = inject(forwardRef(() => TuiInputFiles));
        this.reject = timer(0).pipe(switchMap(() => tuiControlValue(this.control.control)), map(() => tuiFilesRejected(this.control.control)), filter(({ length }) => !!length));
        this.appearance = 'file';
        this.input = tuiInjectElement();
    }
    process(files) {
        const fileOrFiles = this.input.multiple
            ? [...toArray(this.value()), ...Array.from(files)]
            : files[0];
        if (fileOrFiles) {
            this.onChange(fileOrFiles);
        }
    }
    onClick(event) {
        if (this.input.readOnly) {
            event.preventDefault();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputFilesDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiInputFilesDirective, isStandalone: true, selector: "input[tuiInputFiles]", outputs: { reject: "reject" }, host: { attributes: { "type": "file" }, listeners: { "blur": "onTouched()", "click": "onClick($event)" }, properties: { "disabled": "disabled()" } }, providers: [
            tuiAsControl(TuiInputFilesDirective),
            tuiAppearanceOptionsProvider(TuiInputFilesDirective),
        ], usesInheritance: true, hostDirectives: [{ directive: i1.TuiWithAppearance }, { directive: i2.TuiInputFilesValidator, inputs: ["accept", "accept", "maxFileSize", "maxFileSize"] }], ngImport: i0 }); }
}
export { TuiInputFilesDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputFilesDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: 'input[tuiInputFiles]',
                    providers: [
                        tuiAsControl(TuiInputFilesDirective),
                        tuiAppearanceOptionsProvider(TuiInputFilesDirective),
                    ],
                    hostDirectives: [
                        TuiWithAppearance,
                        {
                            directive: TuiInputFilesValidator,
                            inputs: ['accept', 'maxFileSize'],
                        },
                    ],
                    host: {
                        type: 'file',
                        '[disabled]': 'disabled()',
                        '(blur)': 'onTouched()',
                        '(click)': 'onClick($event)',
                    },
                }]
        }], propDecorators: { reject: [{
                type: Output
            }] } });
function toArray(value) {
    return value ? coerceArray(value) : EMPTY_ARRAY;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtZmlsZXMuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMva2l0L2NvbXBvbmVudHMvZmlsZXMvaW5wdXQtZmlsZXMvaW5wdXQtZmlsZXMuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUNsRCxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3BFLE9BQU8sRUFBQyxZQUFZLEVBQUUsVUFBVSxFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFDL0QsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQ3BELE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUMxRCxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUV6RCxPQUFPLEVBQ0gsNEJBQTRCLEVBQzVCLGlCQUFpQixHQUNwQixNQUFNLHNDQUFzQyxDQUFDO0FBQzlDLE9BQU8sRUFBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFHbkQsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDaEQsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQ3RELE9BQU8sRUFBQyxzQkFBc0IsRUFBQyxNQUFNLG1DQUFtQyxDQUFDOzs7O0FBRXpFLE1BcUJhLHNCQUNULFNBQVEsVUFBZ0Q7SUF0QjVEOztRQXlCdUIsU0FBSSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztRQUdsRCxXQUFNLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FDbEMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQ3RELEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQ2pELE1BQU0sQ0FBQyxDQUFDLEVBQUMsTUFBTSxFQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FDakMsQ0FBQztRQUVjLGVBQVUsR0FBRyxNQUFNLENBQUM7UUFDcEIsVUFBSyxHQUFHLGdCQUFnQixFQUFvQixDQUFDO0tBaUJoRTtJQWZVLE9BQU8sQ0FBQyxLQUFlO1FBQzFCLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUTtZQUNuQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDbEQsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVmLElBQUksV0FBVyxFQUFFO1lBQ2IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUM5QjtJQUNMLENBQUM7SUFFUyxPQUFPLENBQUMsS0FBaUI7UUFDL0IsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRTtZQUNyQixLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7U0FDMUI7SUFDTCxDQUFDOytHQTlCUSxzQkFBc0I7bUdBQXRCLHNCQUFzQix3UEFsQnBCO1lBQ1AsWUFBWSxDQUFDLHNCQUFzQixDQUFDO1lBQ3BDLDRCQUE0QixDQUFDLHNCQUFzQixDQUFDO1NBQ3ZEOztTQWVRLHNCQUFzQjs0RkFBdEIsc0JBQXNCO2tCQXJCbEMsU0FBUzttQkFBQztvQkFDUCxVQUFVLEVBQUUsSUFBSTtvQkFDaEIsUUFBUSxFQUFFLHNCQUFzQjtvQkFDaEMsU0FBUyxFQUFFO3dCQUNQLFlBQVksd0JBQXdCO3dCQUNwQyw0QkFBNEIsd0JBQXdCO3FCQUN2RDtvQkFDRCxjQUFjLEVBQUU7d0JBQ1osaUJBQWlCO3dCQUNqQjs0QkFDSSxTQUFTLEVBQUUsc0JBQXNCOzRCQUNqQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUUsYUFBYSxDQUFDO3lCQUNwQztxQkFDSjtvQkFDRCxJQUFJLEVBQUU7d0JBQ0YsSUFBSSxFQUFFLE1BQU07d0JBQ1osWUFBWSxFQUFFLFlBQVk7d0JBQzFCLFFBQVEsRUFBRSxhQUFhO3dCQUN2QixTQUFTLEVBQUUsaUJBQWlCO3FCQUMvQjtpQkFDSjs4QkFRbUIsTUFBTTtzQkFEckIsTUFBTTs7QUEyQlgsU0FBUyxPQUFPLENBQ1osS0FBa0Q7SUFFbEQsT0FBTyxLQUFLLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDO0FBQ3BELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2NvZXJjZUFycmF5fSBmcm9tICdAYW5ndWxhci9jZGsvY29lcmNpb24nO1xuaW1wb3J0IHtEaXJlY3RpdmUsIGZvcndhcmRSZWYsIGluamVjdCwgT3V0cHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7dHVpQXNDb250cm9sLCBUdWlDb250cm9sfSBmcm9tICdAdGFpZ2EtdWkvY2RrL2NsYXNzZXMnO1xuaW1wb3J0IHtFTVBUWV9BUlJBWX0gZnJvbSAnQHRhaWdhLXVpL2Nkay9jb25zdGFudHMnO1xuaW1wb3J0IHt0dWlDb250cm9sVmFsdWV9IGZyb20gJ0B0YWlnYS11aS9jZGsvb2JzZXJ2YWJsZXMnO1xuaW1wb3J0IHt0dWlJbmplY3RFbGVtZW50fSBmcm9tICdAdGFpZ2EtdWkvY2RrL3V0aWxzL2RvbSc7XG5pbXBvcnQgdHlwZSB7VHVpQXBwZWFyYW5jZU9wdGlvbnN9IGZyb20gJ0B0YWlnYS11aS9jb3JlL2RpcmVjdGl2ZXMvYXBwZWFyYW5jZSc7XG5pbXBvcnQge1xuICAgIHR1aUFwcGVhcmFuY2VPcHRpb25zUHJvdmlkZXIsXG4gICAgVHVpV2l0aEFwcGVhcmFuY2UsXG59IGZyb20gJ0B0YWlnYS11aS9jb3JlL2RpcmVjdGl2ZXMvYXBwZWFyYW5jZSc7XG5pbXBvcnQge2ZpbHRlciwgbWFwLCBzd2l0Y2hNYXAsIHRpbWVyfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHR5cGUge1R1aUZpbGVMaWtlfSBmcm9tICcuLi9maWxlcy50eXBlcyc7XG5pbXBvcnQge3R1aUZpbGVzUmVqZWN0ZWR9IGZyb20gJy4uL2ZpbGVzLnV0aWxzJztcbmltcG9ydCB7VHVpSW5wdXRGaWxlc30gZnJvbSAnLi9pbnB1dC1maWxlcy5jb21wb25lbnQnO1xuaW1wb3J0IHtUdWlJbnB1dEZpbGVzVmFsaWRhdG9yfSBmcm9tICcuL2lucHV0LWZpbGVzLXZhbGlkYXRvci5kaXJlY3RpdmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzdGFuZGFsb25lOiB0cnVlLFxuICAgIHNlbGVjdG9yOiAnaW5wdXRbdHVpSW5wdXRGaWxlc10nLFxuICAgIHByb3ZpZGVyczogW1xuICAgICAgICB0dWlBc0NvbnRyb2woVHVpSW5wdXRGaWxlc0RpcmVjdGl2ZSksXG4gICAgICAgIHR1aUFwcGVhcmFuY2VPcHRpb25zUHJvdmlkZXIoVHVpSW5wdXRGaWxlc0RpcmVjdGl2ZSksXG4gICAgXSxcbiAgICBob3N0RGlyZWN0aXZlczogW1xuICAgICAgICBUdWlXaXRoQXBwZWFyYW5jZSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGlyZWN0aXZlOiBUdWlJbnB1dEZpbGVzVmFsaWRhdG9yLFxuICAgICAgICAgICAgaW5wdXRzOiBbJ2FjY2VwdCcsICdtYXhGaWxlU2l6ZSddLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgaG9zdDoge1xuICAgICAgICB0eXBlOiAnZmlsZScsXG4gICAgICAgICdbZGlzYWJsZWRdJzogJ2Rpc2FibGVkKCknLFxuICAgICAgICAnKGJsdXIpJzogJ29uVG91Y2hlZCgpJyxcbiAgICAgICAgJyhjbGljayknOiAnb25DbGljaygkZXZlbnQpJyxcbiAgICB9LFxufSlcbmV4cG9ydCBjbGFzcyBUdWlJbnB1dEZpbGVzRGlyZWN0aXZlXG4gICAgZXh0ZW5kcyBUdWlDb250cm9sPFR1aUZpbGVMaWtlIHwgcmVhZG9ubHkgVHVpRmlsZUxpa2VbXT5cbiAgICBpbXBsZW1lbnRzIFR1aUFwcGVhcmFuY2VPcHRpb25zXG57XG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGhvc3QgPSBpbmplY3QoZm9yd2FyZFJlZigoKSA9PiBUdWlJbnB1dEZpbGVzKSk7XG5cbiAgICBAT3V0cHV0KClcbiAgICBwdWJsaWMgcmVhZG9ubHkgcmVqZWN0ID0gdGltZXIoMCkucGlwZShcbiAgICAgICAgc3dpdGNoTWFwKCgpID0+IHR1aUNvbnRyb2xWYWx1ZSh0aGlzLmNvbnRyb2wuY29udHJvbCkpLFxuICAgICAgICBtYXAoKCkgPT4gdHVpRmlsZXNSZWplY3RlZCh0aGlzLmNvbnRyb2wuY29udHJvbCkpLFxuICAgICAgICBmaWx0ZXIoKHtsZW5ndGh9KSA9PiAhIWxlbmd0aCksXG4gICAgKTtcblxuICAgIHB1YmxpYyByZWFkb25seSBhcHBlYXJhbmNlID0gJ2ZpbGUnO1xuICAgIHB1YmxpYyByZWFkb25seSBpbnB1dCA9IHR1aUluamVjdEVsZW1lbnQ8SFRNTElucHV0RWxlbWVudD4oKTtcblxuICAgIHB1YmxpYyBwcm9jZXNzKGZpbGVzOiBGaWxlTGlzdCk6IHZvaWQge1xuICAgICAgICBjb25zdCBmaWxlT3JGaWxlcyA9IHRoaXMuaW5wdXQubXVsdGlwbGVcbiAgICAgICAgICAgID8gWy4uLnRvQXJyYXkodGhpcy52YWx1ZSgpKSwgLi4uQXJyYXkuZnJvbShmaWxlcyldXG4gICAgICAgICAgICA6IGZpbGVzWzBdO1xuXG4gICAgICAgIGlmIChmaWxlT3JGaWxlcykge1xuICAgICAgICAgICAgdGhpcy5vbkNoYW5nZShmaWxlT3JGaWxlcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgb25DbGljayhldmVudDogTW91c2VFdmVudCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5pbnB1dC5yZWFkT25seSkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gdG9BcnJheShcbiAgICB2YWx1ZTogVHVpRmlsZUxpa2UgfCByZWFkb25seSBUdWlGaWxlTGlrZVtdIHwgbnVsbCxcbik6IHJlYWRvbmx5IFR1aUZpbGVMaWtlW10ge1xuICAgIHJldHVybiB2YWx1ZSA/IGNvZXJjZUFycmF5KHZhbHVlKSA6IEVNUFRZX0FSUkFZO1xufVxuIl19