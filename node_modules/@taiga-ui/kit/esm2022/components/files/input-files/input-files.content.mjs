import { __decorate } from "tslib";
import { AsyncPipe } from '@angular/common';
import { ChangeDetectionStrategy, Component, inject } from '@angular/core';
import { tuiPure } from '@taiga-ui/cdk/utils/miscellaneous';
import { TuiLink } from '@taiga-ui/core/components/link';
import { TuiBreakpointService } from '@taiga-ui/core/services';
import { TUI_INPUT_FILE_TEXTS } from '@taiga-ui/kit/tokens';
import { POLYMORPHEUS_CONTEXT } from '@taiga-ui/polymorpheus';
import { combineLatest, map, of } from 'rxjs';
import { TuiInputFiles } from './input-files.component';
import * as i0 from "@angular/core";
class TuiInputFilesContent {
    constructor() {
        this.breakpoint$ = inject(TuiBreakpointService);
        this.text$ = inject(TUI_INPUT_FILE_TEXTS);
        this.context = inject(POLYMORPHEUS_CONTEXT);
        this.component = inject(TuiInputFiles);
    }
    get link$() {
        return this.computeLink$(this.context.$implicit, !!this.component.input?.input.multiple);
    }
    get label$() {
        return this.computeLabel$(this.context.$implicit, !!this.component.input?.input.multiple);
    }
    computeLink$(fileDragged, multiple) {
        return fileDragged
            ? of('')
            : this.text$.pipe(map((t) => (multiple ? t.defaultLinkMultiple : t.defaultLinkSingle)));
    }
    computeLabel$(fileDragged, multiple) {
        return fileDragged
            ? combineLatest([this.breakpoint$, this.text$]).pipe(map(([breakpoint, text]) => {
                if (breakpoint === 'mobile') {
                    return '';
                }
                return multiple ? text.dropMultiple : text.drop;
            }))
            : combineLatest([this.breakpoint$, this.text$]).pipe(map(([breakpoint, text]) => {
                if (breakpoint === 'mobile') {
                    return '';
                }
                return multiple
                    ? text.defaultLabelMultiple
                    : text.defaultLabelSingle;
            }));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputFilesContent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiInputFilesContent, isStandalone: true, selector: "ng-component", ngImport: i0, template: `
        <a tuiLink>{{ link$ | async }}</a>
        {{ label$ | async }}
    `, isInline: true, dependencies: [{ kind: "pipe", type: AsyncPipe, name: "async" }, { kind: "directive", type: TuiLink, selector: "a[tuiLink], button[tuiLink]", inputs: ["pseudo"] }], changeDetection: i0.ChangeDetectionStrategy.Default }); }
}
__decorate([
    tuiPure
], TuiInputFilesContent.prototype, "computeLink$", null);
__decorate([
    tuiPure
], TuiInputFilesContent.prototype, "computeLabel$", null);
export { TuiInputFilesContent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputFilesContent, decorators: [{
            type: Component,
            args: [{
                    standalone: true,
                    imports: [AsyncPipe, TuiLink],
                    template: `
        <a tuiLink>{{ link$ | async }}</a>
        {{ label$ | async }}
    `,
                    changeDetection: ChangeDetectionStrategy.Default,
                }]
        }], propDecorators: { computeLink$: [], computeLabel$: [] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtZmlsZXMuY29udGVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC9jb21wb25lbnRzL2ZpbGVzL2lucHV0LWZpbGVzL2lucHV0LWZpbGVzLmNvbnRlbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUMxQyxPQUFPLEVBQUMsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUV6RSxPQUFPLEVBQUMsT0FBTyxFQUFDLE1BQU0sbUNBQW1DLENBQUM7QUFDMUQsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLGdDQUFnQyxDQUFDO0FBQ3ZELE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQzdELE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBQzFELE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLHdCQUF3QixDQUFDO0FBRTVELE9BQU8sRUFBQyxhQUFhLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUU1QyxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0seUJBQXlCLENBQUM7O0FBRXRELE1BU2Esb0JBQW9CO0lBVGpDO1FBVXFCLGdCQUFXLEdBQUcsTUFBTSxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDM0MsVUFBSyxHQUFHLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1FBQ3JDLFlBQU8sR0FBRyxNQUFNLENBQUMsb0JBQW9CLENBQXdCLENBQUM7UUFDOUQsY0FBUyxHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQztLQWlEdEQ7SUEvQ0csSUFBYyxLQUFLO1FBQ2YsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUNwQixJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFDdEIsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxRQUFRLENBQ3pDLENBQUM7SUFDTixDQUFDO0lBRUQsSUFBYyxNQUFNO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FDckIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQ3RCLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsUUFBUSxDQUN6QyxDQUFDO0lBQ04sQ0FBQztJQUdPLFlBQVksQ0FBQyxXQUFvQixFQUFFLFFBQWlCO1FBQ3hELE9BQU8sV0FBVztZQUNkLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO1lBQ1IsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUNYLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FDdkUsQ0FBQztJQUNaLENBQUM7SUFHTyxhQUFhLENBQUMsV0FBb0IsRUFBRSxRQUFpQjtRQUN6RCxPQUFPLFdBQVc7WUFDZCxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQzlDLEdBQUcsQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7Z0JBQ3ZCLElBQUksVUFBVSxLQUFLLFFBQVEsRUFBRTtvQkFDekIsT0FBTyxFQUFFLENBQUM7aUJBQ2I7Z0JBRUQsT0FBTyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7WUFDcEQsQ0FBQyxDQUFDLENBQ0w7WUFDSCxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQzlDLEdBQUcsQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7Z0JBQ3ZCLElBQUksVUFBVSxLQUFLLFFBQVEsRUFBRTtvQkFDekIsT0FBTyxFQUFFLENBQUM7aUJBQ2I7Z0JBRUQsT0FBTyxRQUFRO29CQUNYLENBQUMsQ0FBQyxJQUFJLENBQUMsb0JBQW9CO29CQUMzQixDQUFDLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDO1lBQ2xDLENBQUMsQ0FBQyxDQUNMLENBQUM7SUFDWixDQUFDOytHQXBEUSxvQkFBb0I7bUdBQXBCLG9CQUFvQix3RUFObkI7OztLQUdULHVEQUpTLFNBQVMsOENBQUUsT0FBTzs7QUE0QnBCO0lBRFAsT0FBTzt3REFPUDtBQUdPO0lBRFAsT0FBTzt5REF1QlA7U0FwRFEsb0JBQW9COzRGQUFwQixvQkFBb0I7a0JBVGhDLFNBQVM7bUJBQUM7b0JBQ1AsVUFBVSxFQUFFLElBQUk7b0JBQ2hCLE9BQU8sRUFBRSxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUM7b0JBQzdCLFFBQVEsRUFBRTs7O0tBR1Q7b0JBQ0QsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE9BQU87aUJBQ25EOzhCQXNCVyxZQUFZLE1BU1osYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QXN5bmNQaXBlfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBpbmplY3R9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHR5cGUge1R1aUNvbnRleHR9IGZyb20gJ0B0YWlnYS11aS9jZGsvdHlwZXMnO1xuaW1wb3J0IHt0dWlQdXJlfSBmcm9tICdAdGFpZ2EtdWkvY2RrL3V0aWxzL21pc2NlbGxhbmVvdXMnO1xuaW1wb3J0IHtUdWlMaW5rfSBmcm9tICdAdGFpZ2EtdWkvY29yZS9jb21wb25lbnRzL2xpbmsnO1xuaW1wb3J0IHtUdWlCcmVha3BvaW50U2VydmljZX0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvc2VydmljZXMnO1xuaW1wb3J0IHtUVUlfSU5QVVRfRklMRV9URVhUU30gZnJvbSAnQHRhaWdhLXVpL2tpdC90b2tlbnMnO1xuaW1wb3J0IHtQT0xZTU9SUEhFVVNfQ09OVEVYVH0gZnJvbSAnQHRhaWdhLXVpL3BvbHltb3JwaGV1cyc7XG5pbXBvcnQgdHlwZSB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge2NvbWJpbmVMYXRlc3QsIG1hcCwgb2Z9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQge1R1aUlucHV0RmlsZXN9IGZyb20gJy4vaW5wdXQtZmlsZXMuY29tcG9uZW50JztcblxuQENvbXBvbmVudCh7XG4gICAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgICBpbXBvcnRzOiBbQXN5bmNQaXBlLCBUdWlMaW5rXSxcbiAgICB0ZW1wbGF0ZTogYFxuICAgICAgICA8YSB0dWlMaW5rPnt7IGxpbmskIHwgYXN5bmMgfX08L2E+XG4gICAgICAgIHt7IGxhYmVsJCB8IGFzeW5jIH19XG4gICAgYCxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LkRlZmF1bHQsXG59KVxuZXhwb3J0IGNsYXNzIFR1aUlucHV0RmlsZXNDb250ZW50IHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGJyZWFrcG9pbnQkID0gaW5qZWN0KFR1aUJyZWFrcG9pbnRTZXJ2aWNlKTtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHRleHQkID0gaW5qZWN0KFRVSV9JTlBVVF9GSUxFX1RFWFRTKTtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGNvbnRleHQgPSBpbmplY3QoUE9MWU1PUlBIRVVTX0NPTlRFWFQpIGFzIFR1aUNvbnRleHQ8Ym9vbGVhbj47XG4gICAgcHJpdmF0ZSByZWFkb25seSBjb21wb25lbnQgPSBpbmplY3QoVHVpSW5wdXRGaWxlcyk7XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IGxpbmskKCk6IE9ic2VydmFibGU8c3RyaW5nPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXB1dGVMaW5rJChcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC4kaW1wbGljaXQsXG4gICAgICAgICAgICAhIXRoaXMuY29tcG9uZW50LmlucHV0Py5pbnB1dC5tdWx0aXBsZSxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IGxhYmVsJCgpOiBPYnNlcnZhYmxlPHN0cmluZz4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wdXRlTGFiZWwkKFxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LiRpbXBsaWNpdCxcbiAgICAgICAgICAgICEhdGhpcy5jb21wb25lbnQuaW5wdXQ/LmlucHV0Lm11bHRpcGxlLFxuICAgICAgICApO1xuICAgIH1cblxuICAgIEB0dWlQdXJlXG4gICAgcHJpdmF0ZSBjb21wdXRlTGluayQoZmlsZURyYWdnZWQ6IGJvb2xlYW4sIG11bHRpcGxlOiBib29sZWFuKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcbiAgICAgICAgcmV0dXJuIGZpbGVEcmFnZ2VkXG4gICAgICAgICAgICA/IG9mKCcnKVxuICAgICAgICAgICAgOiB0aGlzLnRleHQkLnBpcGUoXG4gICAgICAgICAgICAgICAgICBtYXAoKHQpID0+IChtdWx0aXBsZSA/IHQuZGVmYXVsdExpbmtNdWx0aXBsZSA6IHQuZGVmYXVsdExpbmtTaW5nbGUpKSxcbiAgICAgICAgICAgICAgKTtcbiAgICB9XG5cbiAgICBAdHVpUHVyZVxuICAgIHByaXZhdGUgY29tcHV0ZUxhYmVsJChmaWxlRHJhZ2dlZDogYm9vbGVhbiwgbXVsdGlwbGU6IGJvb2xlYW4pOiBPYnNlcnZhYmxlPHN0cmluZz4ge1xuICAgICAgICByZXR1cm4gZmlsZURyYWdnZWRcbiAgICAgICAgICAgID8gY29tYmluZUxhdGVzdChbdGhpcy5icmVha3BvaW50JCwgdGhpcy50ZXh0JF0pLnBpcGUoXG4gICAgICAgICAgICAgICAgICBtYXAoKFticmVha3BvaW50LCB0ZXh0XSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChicmVha3BvaW50ID09PSAnbW9iaWxlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG11bHRpcGxlID8gdGV4dC5kcm9wTXVsdGlwbGUgOiB0ZXh0LmRyb3A7XG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgOiBjb21iaW5lTGF0ZXN0KFt0aGlzLmJyZWFrcG9pbnQkLCB0aGlzLnRleHQkXSkucGlwZShcbiAgICAgICAgICAgICAgICAgIG1hcCgoW2JyZWFrcG9pbnQsIHRleHRdKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGJyZWFrcG9pbnQgPT09ICdtb2JpbGUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbXVsdGlwbGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyB0ZXh0LmRlZmF1bHRMYWJlbE11bHRpcGxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogdGV4dC5kZWZhdWx0TGFiZWxTaW5nbGU7XG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKTtcbiAgICB9XG59XG4iXX0=