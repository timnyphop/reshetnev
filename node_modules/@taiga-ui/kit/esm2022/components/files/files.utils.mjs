import { coerceArray } from '@angular/cdk/coercion';
import { tuiRound } from '@taiga-ui/cdk/utils/math';
import { TUI_FORMAT_ERROR, TUI_SIZE_ERROR } from './files.validators';
const BYTES_PER_KIB = 1024;
const BYTES_PER_MIB = 1024 * BYTES_PER_KIB;
export function tuiFilesRejected(control) {
    const format = control?.getError(TUI_FORMAT_ERROR)?.$implicit || [];
    const size = control?.getError(TUI_SIZE_ERROR)?.$implicit || [];
    return Array.from(new Set([...format, ...size]));
}
export function tuiFilesAccepted(control) {
    const value = control?.value || [];
    const files = coerceArray(value);
    const size = control?.getError(TUI_SIZE_ERROR)?.$implicit || [];
    const format = control?.getError(TUI_FORMAT_ERROR)?.$implicit || [];
    return files.filter((file) => !size.includes(file) && !format.includes(file));
}
export function tuiFormatSize(units, size) {
    if (size === undefined) {
        return null;
    }
    if (size < BYTES_PER_KIB) {
        return `${size} ${units[0]}`;
    }
    if (size < BYTES_PER_MIB) {
        return `${(size / BYTES_PER_KIB).toFixed(0)} ${units[1]}`;
    }
    return `${tuiRound(size / BYTES_PER_MIB, 2).toLocaleString('ru-RU')} ${units[2]}`;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMudXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9raXQvY29tcG9uZW50cy9maWxlcy9maWxlcy51dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFFbEQsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBRWxELE9BQU8sRUFBQyxnQkFBZ0IsRUFBRSxjQUFjLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQztBQUVwRSxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUM7QUFDM0IsTUFBTSxhQUFhLEdBQUcsSUFBSSxHQUFHLGFBQWEsQ0FBQztBQUUzQyxNQUFNLFVBQVUsZ0JBQWdCLENBQUMsT0FBZ0M7SUFDN0QsTUFBTSxNQUFNLEdBQVcsT0FBTyxFQUFFLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLFNBQVMsSUFBSSxFQUFFLENBQUM7SUFDNUUsTUFBTSxJQUFJLEdBQVcsT0FBTyxFQUFFLFFBQVEsQ0FBQyxjQUFjLENBQUMsRUFBRSxTQUFTLElBQUksRUFBRSxDQUFDO0lBRXhFLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEdBQUcsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3JELENBQUM7QUFFRCxNQUFNLFVBQVUsZ0JBQWdCLENBQUMsT0FBZ0M7SUFDN0QsTUFBTSxLQUFLLEdBQUcsT0FBTyxFQUFFLEtBQUssSUFBSSxFQUFFLENBQUM7SUFDbkMsTUFBTSxLQUFLLEdBQVcsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3pDLE1BQU0sSUFBSSxHQUFXLE9BQU8sRUFBRSxRQUFRLENBQUMsY0FBYyxDQUFDLEVBQUUsU0FBUyxJQUFJLEVBQUUsQ0FBQztJQUN4RSxNQUFNLE1BQU0sR0FBVyxPQUFPLEVBQUUsUUFBUSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsU0FBUyxJQUFJLEVBQUUsQ0FBQztJQUU1RSxPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUNsRixDQUFDO0FBRUQsTUFBTSxVQUFVLGFBQWEsQ0FDekIsS0FBd0MsRUFDeEMsSUFBYTtJQUViLElBQUksSUFBSSxLQUFLLFNBQVMsRUFBRTtRQUNwQixPQUFPLElBQUksQ0FBQztLQUNmO0lBRUQsSUFBSSxJQUFJLEdBQUcsYUFBYSxFQUFFO1FBQ3RCLE9BQU8sR0FBRyxJQUFJLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7S0FDaEM7SUFFRCxJQUFJLElBQUksR0FBRyxhQUFhLEVBQUU7UUFDdEIsT0FBTyxHQUFHLENBQUMsSUFBSSxHQUFHLGFBQWEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztLQUM3RDtJQUVELE9BQU8sR0FBRyxRQUFRLENBQUMsSUFBSSxHQUFHLGFBQWEsRUFBRSxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFDdEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Y29lcmNlQXJyYXl9IGZyb20gJ0Bhbmd1bGFyL2Nkay9jb2VyY2lvbic7XG5pbXBvcnQgdHlwZSB7QWJzdHJhY3RDb250cm9sfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQge3R1aVJvdW5kfSBmcm9tICdAdGFpZ2EtdWkvY2RrL3V0aWxzL21hdGgnO1xuXG5pbXBvcnQge1RVSV9GT1JNQVRfRVJST1IsIFRVSV9TSVpFX0VSUk9SfSBmcm9tICcuL2ZpbGVzLnZhbGlkYXRvcnMnO1xuXG5jb25zdCBCWVRFU19QRVJfS0lCID0gMTAyNDtcbmNvbnN0IEJZVEVTX1BFUl9NSUIgPSAxMDI0ICogQllURVNfUEVSX0tJQjtcblxuZXhwb3J0IGZ1bmN0aW9uIHR1aUZpbGVzUmVqZWN0ZWQoY29udHJvbD86IEFic3RyYWN0Q29udHJvbCB8IG51bGwpOiBGaWxlW10ge1xuICAgIGNvbnN0IGZvcm1hdDogRmlsZVtdID0gY29udHJvbD8uZ2V0RXJyb3IoVFVJX0ZPUk1BVF9FUlJPUik/LiRpbXBsaWNpdCB8fCBbXTtcbiAgICBjb25zdCBzaXplOiBGaWxlW10gPSBjb250cm9sPy5nZXRFcnJvcihUVUlfU0laRV9FUlJPUik/LiRpbXBsaWNpdCB8fCBbXTtcblxuICAgIHJldHVybiBBcnJheS5mcm9tKG5ldyBTZXQoWy4uLmZvcm1hdCwgLi4uc2l6ZV0pKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHR1aUZpbGVzQWNjZXB0ZWQoY29udHJvbD86IEFic3RyYWN0Q29udHJvbCB8IG51bGwpOiBGaWxlW10ge1xuICAgIGNvbnN0IHZhbHVlID0gY29udHJvbD8udmFsdWUgfHwgW107XG4gICAgY29uc3QgZmlsZXM6IEZpbGVbXSA9IGNvZXJjZUFycmF5KHZhbHVlKTtcbiAgICBjb25zdCBzaXplOiBGaWxlW10gPSBjb250cm9sPy5nZXRFcnJvcihUVUlfU0laRV9FUlJPUik/LiRpbXBsaWNpdCB8fCBbXTtcbiAgICBjb25zdCBmb3JtYXQ6IEZpbGVbXSA9IGNvbnRyb2w/LmdldEVycm9yKFRVSV9GT1JNQVRfRVJST1IpPy4kaW1wbGljaXQgfHwgW107XG5cbiAgICByZXR1cm4gZmlsZXMuZmlsdGVyKChmaWxlKSA9PiAhc2l6ZS5pbmNsdWRlcyhmaWxlKSAmJiAhZm9ybWF0LmluY2x1ZGVzKGZpbGUpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHR1aUZvcm1hdFNpemUoXG4gICAgdW5pdHM6IHJlYWRvbmx5IFtzdHJpbmcsIHN0cmluZywgc3RyaW5nXSxcbiAgICBzaXplPzogbnVtYmVyLFxuKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgaWYgKHNpemUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoc2l6ZSA8IEJZVEVTX1BFUl9LSUIpIHtcbiAgICAgICAgcmV0dXJuIGAke3NpemV9ICR7dW5pdHNbMF19YDtcbiAgICB9XG5cbiAgICBpZiAoc2l6ZSA8IEJZVEVTX1BFUl9NSUIpIHtcbiAgICAgICAgcmV0dXJuIGAkeyhzaXplIC8gQllURVNfUEVSX0tJQikudG9GaXhlZCgwKX0gJHt1bml0c1sxXX1gO1xuICAgIH1cblxuICAgIHJldHVybiBgJHt0dWlSb3VuZChzaXplIC8gQllURVNfUEVSX01JQiwgMikudG9Mb2NhbGVTdHJpbmcoJ3J1LVJVJyl9ICR7dW5pdHNbMl19YDtcbn1cbiJdfQ==