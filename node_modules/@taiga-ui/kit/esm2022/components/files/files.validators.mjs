import { coerceArray } from '@angular/cdk/coercion';
export const TUI_SIZE_ERROR = 'tuiSize';
export const TUI_FORMAT_ERROR = 'tuiFormat';
export function tuiCreateFileSizeValidator(size) {
    return ({ value }) => {
        const files = value && coerceArray(value);
        const $implicit = value && files?.filter((file) => file.size > size);
        return $implicit?.length ? { [TUI_SIZE_ERROR]: { $implicit, size } } : null;
    };
}
export function tuiCreateFileFormatValidator(accept) {
    return ({ value }) => {
        const files = value && coerceArray(value);
        const formats = toArray(accept);
        const $implicit = value && files?.filter((file) => !checkFormat(file, formats));
        return $implicit?.length && accept ? { [TUI_FORMAT_ERROR]: { $implicit } } : null;
    };
}
function checkFormat({ name, type }, formats) {
    const extension = `.${(name.split('.').pop() || '').toLowerCase()}`;
    return formats.some((format) => format === extension ||
        format === type ||
        (format.split('/')[1] === '*' && type.split('/')[0] === format.split('/')[0]));
}
function toArray(accept) {
    return accept
        .toLowerCase()
        .split(',')
        .map((format) => format.trim().toLowerCase());
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMudmFsaWRhdG9ycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC9jb21wb25lbnRzL2ZpbGVzL2ZpbGVzLnZhbGlkYXRvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBSWxELE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxTQUFTLENBQUM7QUFDeEMsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsV0FBVyxDQUFDO0FBVTVDLE1BQU0sVUFBVSwwQkFBMEIsQ0FBQyxJQUFZO0lBQ25ELE9BQU8sQ0FBQyxFQUFDLEtBQUssRUFBeUMsRUFBd0IsRUFBRTtRQUM3RSxNQUFNLEtBQUssR0FBRyxLQUFLLElBQUksV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzFDLE1BQU0sU0FBUyxHQUFHLEtBQUssSUFBSSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDO1FBRXJFLE9BQU8sU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLGNBQWMsQ0FBQyxFQUFFLEVBQUMsU0FBUyxFQUFFLElBQUksRUFBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUM1RSxDQUFDLENBQUM7QUFDTixDQUFDO0FBRUQsTUFBTSxVQUFVLDRCQUE0QixDQUFDLE1BQWM7SUFDdkQsT0FBTyxDQUFDLEVBQUMsS0FBSyxFQUF5QyxFQUEwQixFQUFFO1FBQy9FLE1BQU0sS0FBSyxHQUFHLEtBQUssSUFBSSxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDMUMsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2hDLE1BQU0sU0FBUyxHQUFHLEtBQUssSUFBSSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUVoRixPQUFPLFNBQVMsRUFBRSxNQUFNLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxFQUFDLFNBQVMsRUFBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUNsRixDQUFDLENBQUM7QUFDTixDQUFDO0FBRUQsU0FBUyxXQUFXLENBQUMsRUFBQyxJQUFJLEVBQUUsSUFBSSxFQUFPLEVBQUUsT0FBMEI7SUFDL0QsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQztJQUVwRSxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQ2YsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUNQLE1BQU0sS0FBSyxTQUFTO1FBQ3BCLE1BQU0sS0FBSyxJQUFJO1FBQ2YsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDcEYsQ0FBQztBQUNOLENBQUM7QUFFRCxTQUFTLE9BQU8sQ0FBQyxNQUFjO0lBQzNCLE9BQU8sTUFBTTtTQUNSLFdBQVcsRUFBRTtTQUNiLEtBQUssQ0FBQyxHQUFHLENBQUM7U0FDVixHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0FBQ3RELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2NvZXJjZUFycmF5fSBmcm9tICdAYW5ndWxhci9jZGsvY29lcmNpb24nO1xuaW1wb3J0IHR5cGUge1ZhbGlkYXRvckZufSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgdHlwZSB7VHVpQ29udGV4dH0gZnJvbSAnQHRhaWdhLXVpL2Nkay90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBUVUlfU0laRV9FUlJPUiA9ICd0dWlTaXplJztcbmV4cG9ydCBjb25zdCBUVUlfRk9STUFUX0VSUk9SID0gJ3R1aUZvcm1hdCc7XG5cbmludGVyZmFjZSBGaWxlRm9ybWF0RXJyb3Ige1xuICAgIFtUVUlfRk9STUFUX0VSUk9SXTogVHVpQ29udGV4dDxGaWxlW10+O1xufVxuXG5pbnRlcmZhY2UgRmlsZVNpemVFcnJvciB7XG4gICAgW1RVSV9TSVpFX0VSUk9SXTogVHVpQ29udGV4dDxGaWxlW10+ICYge3NpemU6IG51bWJlcn07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0dWlDcmVhdGVGaWxlU2l6ZVZhbGlkYXRvcihzaXplOiBudW1iZXIpOiBWYWxpZGF0b3JGbiB7XG4gICAgcmV0dXJuICh7dmFsdWV9OiB7dmFsdWU6IEZpbGUgfCByZWFkb25seSBGaWxlW10gfCBudWxsfSk6IEZpbGVTaXplRXJyb3IgfCBudWxsID0+IHtcbiAgICAgICAgY29uc3QgZmlsZXMgPSB2YWx1ZSAmJiBjb2VyY2VBcnJheSh2YWx1ZSk7XG4gICAgICAgIGNvbnN0ICRpbXBsaWNpdCA9IHZhbHVlICYmIGZpbGVzPy5maWx0ZXIoKGZpbGUpID0+IGZpbGUuc2l6ZSA+IHNpemUpO1xuXG4gICAgICAgIHJldHVybiAkaW1wbGljaXQ/Lmxlbmd0aCA/IHtbVFVJX1NJWkVfRVJST1JdOiB7JGltcGxpY2l0LCBzaXplfX0gOiBudWxsO1xuICAgIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0dWlDcmVhdGVGaWxlRm9ybWF0VmFsaWRhdG9yKGFjY2VwdDogc3RyaW5nKTogVmFsaWRhdG9yRm4ge1xuICAgIHJldHVybiAoe3ZhbHVlfToge3ZhbHVlOiBGaWxlIHwgcmVhZG9ubHkgRmlsZVtdIHwgbnVsbH0pOiBGaWxlRm9ybWF0RXJyb3IgfCBudWxsID0+IHtcbiAgICAgICAgY29uc3QgZmlsZXMgPSB2YWx1ZSAmJiBjb2VyY2VBcnJheSh2YWx1ZSk7XG4gICAgICAgIGNvbnN0IGZvcm1hdHMgPSB0b0FycmF5KGFjY2VwdCk7XG4gICAgICAgIGNvbnN0ICRpbXBsaWNpdCA9IHZhbHVlICYmIGZpbGVzPy5maWx0ZXIoKGZpbGUpID0+ICFjaGVja0Zvcm1hdChmaWxlLCBmb3JtYXRzKSk7XG5cbiAgICAgICAgcmV0dXJuICRpbXBsaWNpdD8ubGVuZ3RoICYmIGFjY2VwdCA/IHtbVFVJX0ZPUk1BVF9FUlJPUl06IHskaW1wbGljaXR9fSA6IG51bGw7XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gY2hlY2tGb3JtYXQoe25hbWUsIHR5cGV9OiBGaWxlLCBmb3JtYXRzOiByZWFkb25seSBzdHJpbmdbXSk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGV4dGVuc2lvbiA9IGAuJHsobmFtZS5zcGxpdCgnLicpLnBvcCgpIHx8ICcnKS50b0xvd2VyQ2FzZSgpfWA7XG5cbiAgICByZXR1cm4gZm9ybWF0cy5zb21lKFxuICAgICAgICAoZm9ybWF0KSA9PlxuICAgICAgICAgICAgZm9ybWF0ID09PSBleHRlbnNpb24gfHxcbiAgICAgICAgICAgIGZvcm1hdCA9PT0gdHlwZSB8fFxuICAgICAgICAgICAgKGZvcm1hdC5zcGxpdCgnLycpWzFdID09PSAnKicgJiYgdHlwZS5zcGxpdCgnLycpWzBdID09PSBmb3JtYXQuc3BsaXQoJy8nKVswXSksXG4gICAgKTtcbn1cblxuZnVuY3Rpb24gdG9BcnJheShhY2NlcHQ6IHN0cmluZyk6IHJlYWRvbmx5IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gYWNjZXB0XG4gICAgICAgIC50b0xvd2VyQ2FzZSgpXG4gICAgICAgIC5zcGxpdCgnLCcpXG4gICAgICAgIC5tYXAoKGZvcm1hdCkgPT4gZm9ybWF0LnRyaW0oKS50b0xvd2VyQ2FzZSgpKTtcbn1cbiJdfQ==