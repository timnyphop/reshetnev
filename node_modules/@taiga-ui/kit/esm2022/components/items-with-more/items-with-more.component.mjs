import { AsyncPipe, NgForOf, NgIf, NgTemplateOutlet } from '@angular/common';
import { ChangeDetectionStrategy, Component, ContentChild, ContentChildren, inject, TemplateRef, } from '@angular/core';
import { MutationObserverService, WA_MUTATION_OBSERVER_INIT, } from '@ng-web-apis/mutation-observer';
import { ResizeObserverService } from '@ng-web-apis/resize-observer';
import { EMPTY_QUERY } from '@taiga-ui/cdk/constants';
import { TuiItem } from '@taiga-ui/cdk/directives/item';
import { TuiLet } from '@taiga-ui/cdk/directives/let';
import { TuiItemsWithMoreDirective } from './items-with-more.directive';
import { TuiItemsWithMoreService } from './items-with-more.service';
import { TuiMore } from './more.directive';
import * as i0 from "@angular/core";
import * as i1 from "./items-with-more.directive";
class TuiItemsWithMoreComponent {
    constructor() {
        this.items = EMPTY_QUERY;
        this.directive = inject(TuiItemsWithMoreDirective);
        this.lastVisibleIndex$ = inject(TuiItemsWithMoreService);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiItemsWithMoreComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiItemsWithMoreComponent, isStandalone: true, selector: "tui-items-with-more", providers: [
            MutationObserverService,
            ResizeObserverService,
            TuiItemsWithMoreService,
            {
                provide: WA_MUTATION_OBSERVER_INIT,
                useValue: {
                    childList: true,
                    characterData: true,
                    subtree: true,
                },
            },
        ], queries: [{ propertyName: "more", first: true, predicate: TuiMore, descendants: true, read: TemplateRef }, { propertyName: "items", predicate: TuiItem, descendants: true, read: TemplateRef }], hostDirectives: [{ directive: i1.TuiItemsWithMoreDirective, inputs: ["itemsLimit", "itemsLimit", "required", "required"] }], ngImport: i0, template: "<ng-container *ngIf=\"items.changes | async\" />\n<ng-container *tuiLet=\"(lastVisibleIndex$ | async) || 0 as lastIndex\">\n    <div\n        *ngFor=\"let item of items; let index = index\"\n        class=\"t-item\"\n        [class.t-item_hidden]=\"index > lastIndex && index !== directive.required\"\n    >\n        <ng-container *ngTemplateOutlet=\"item\" />\n    </div>\n    <span\n        *ngIf=\"more && lastIndex < items.length - 1\"\n        class=\"t-item\"\n        [class.t-item_hidden]=\"lastIndex >= items.length - 1\"\n    >\n        <ng-container\n            [ngTemplateOutlet]=\"more\"\n            [ngTemplateOutletContext]=\"{$implicit: lastIndex}\"\n        />\n    </span>\n</ng-container>\n", styles: [":host{position:relative;display:flex;align-items:center;white-space:nowrap}.t-item{flex:0 0 auto}.t-item_hidden{position:absolute;visibility:hidden}\n"], dependencies: [{ kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "pipe", type: AsyncPipe, name: "async" }, { kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: TuiLet, selector: "[tuiLet]", inputs: ["tuiLet"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { TuiItemsWithMoreComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiItemsWithMoreComponent, decorators: [{
            type: Component,
            args: [{ standalone: true, selector: 'tui-items-with-more', imports: [NgIf, NgForOf, AsyncPipe, NgTemplateOutlet, TuiLet], changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        MutationObserverService,
                        ResizeObserverService,
                        TuiItemsWithMoreService,
                        {
                            provide: WA_MUTATION_OBSERVER_INIT,
                            useValue: {
                                childList: true,
                                characterData: true,
                                subtree: true,
                            },
                        },
                    ], hostDirectives: [
                        {
                            directive: TuiItemsWithMoreDirective,
                            inputs: ['itemsLimit', 'required'],
                        },
                    ], template: "<ng-container *ngIf=\"items.changes | async\" />\n<ng-container *tuiLet=\"(lastVisibleIndex$ | async) || 0 as lastIndex\">\n    <div\n        *ngFor=\"let item of items; let index = index\"\n        class=\"t-item\"\n        [class.t-item_hidden]=\"index > lastIndex && index !== directive.required\"\n    >\n        <ng-container *ngTemplateOutlet=\"item\" />\n    </div>\n    <span\n        *ngIf=\"more && lastIndex < items.length - 1\"\n        class=\"t-item\"\n        [class.t-item_hidden]=\"lastIndex >= items.length - 1\"\n    >\n        <ng-container\n            [ngTemplateOutlet]=\"more\"\n            [ngTemplateOutletContext]=\"{$implicit: lastIndex}\"\n        />\n    </span>\n</ng-container>\n", styles: [":host{position:relative;display:flex;align-items:center;white-space:nowrap}.t-item{flex:0 0 auto}.t-item_hidden{position:absolute;visibility:hidden}\n"] }]
        }], propDecorators: { items: [{
                type: ContentChildren,
                args: [TuiItem, { read: TemplateRef, descendants: true }]
            }], more: [{
                type: ContentChild,
                args: [TuiMore, { read: TemplateRef }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlbXMtd2l0aC1tb3JlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC9jb21wb25lbnRzL2l0ZW1zLXdpdGgtbW9yZS9pdGVtcy13aXRoLW1vcmUuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMva2l0L2NvbXBvbmVudHMvaXRlbXMtd2l0aC1tb3JlL2l0ZW1zLXdpdGgtbW9yZS50ZW1wbGF0ZS5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxnQkFBZ0IsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBRTNFLE9BQU8sRUFDSCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULFlBQVksRUFDWixlQUFlLEVBQ2YsTUFBTSxFQUNOLFdBQVcsR0FDZCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQ0gsdUJBQXVCLEVBQ3ZCLHlCQUF5QixHQUM1QixNQUFNLGdDQUFnQyxDQUFDO0FBQ3hDLE9BQU8sRUFBQyxxQkFBcUIsRUFBQyxNQUFNLDhCQUE4QixDQUFDO0FBQ25FLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUNwRCxPQUFPLEVBQUMsT0FBTyxFQUFDLE1BQU0sK0JBQStCLENBQUM7QUFDdEQsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLDhCQUE4QixDQUFDO0FBR3BELE9BQU8sRUFBQyx5QkFBeUIsRUFBQyxNQUFNLDZCQUE2QixDQUFDO0FBQ3RFLE9BQU8sRUFBQyx1QkFBdUIsRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBQ2xFLE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQzs7O0FBRXpDLE1BMkJhLHlCQUF5QjtJQTNCdEM7UUE2QnVCLFVBQUssR0FBb0MsV0FBVyxDQUFDO1FBS3JELGNBQVMsR0FBRyxNQUFNLENBQUMseUJBQXlCLENBQUMsQ0FBQztRQUM5QyxzQkFBaUIsR0FBRyxNQUFNLENBQUMsdUJBQXVCLENBQUMsQ0FBQztLQUMxRTsrR0FUWSx5QkFBeUI7bUdBQXpCLHlCQUF5QixrRUFwQnZCO1lBQ1AsdUJBQXVCO1lBQ3ZCLHFCQUFxQjtZQUNyQix1QkFBdUI7WUFDdkI7Z0JBQ0ksT0FBTyxFQUFFLHlCQUF5QjtnQkFDbEMsUUFBUSxFQUFFO29CQUNOLFNBQVMsRUFBRSxJQUFJO29CQUNmLGFBQWEsRUFBRSxJQUFJO29CQUNuQixPQUFPLEVBQUUsSUFBSTtpQkFDaEI7YUFDSjtTQUNKLDREQVlhLE9BQU8sMkJBQVMsV0FBVyx3Q0FIeEIsT0FBTywyQkFBUyxXQUFXLDBKQ3BEaEQseXNCQW9CQSxnTkRPYyxJQUFJLDZGQUFFLE9BQU8sOEdBQUUsU0FBUyw4Q0FBRSxnQkFBZ0Isb0pBQUUsTUFBTTs7U0F3Qm5ELHlCQUF5Qjs0RkFBekIseUJBQXlCO2tCQTNCckMsU0FBUztpQ0FDTSxJQUFJLFlBQ04scUJBQXFCLFdBQ3RCLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxDQUFDLG1CQUc1Qyx1QkFBdUIsQ0FBQyxNQUFNLGFBQ3BDO3dCQUNQLHVCQUF1Qjt3QkFDdkIscUJBQXFCO3dCQUNyQix1QkFBdUI7d0JBQ3ZCOzRCQUNJLE9BQU8sRUFBRSx5QkFBeUI7NEJBQ2xDLFFBQVEsRUFBRTtnQ0FDTixTQUFTLEVBQUUsSUFBSTtnQ0FDZixhQUFhLEVBQUUsSUFBSTtnQ0FDbkIsT0FBTyxFQUFFLElBQUk7NkJBQ2hCO3lCQUNKO3FCQUNKLGtCQUNlO3dCQUNaOzRCQUNJLFNBQVMsRUFBRSx5QkFBeUI7NEJBQ3BDLE1BQU0sRUFBRSxDQUFDLFlBQVksRUFBRSxVQUFVLENBQUM7eUJBQ3JDO3FCQUNKOzhCQUlrQixLQUFLO3NCQUR2QixlQUFlO3VCQUFDLE9BQU8sRUFBRSxFQUFDLElBQUksRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBQztnQkFJN0MsSUFBSTtzQkFEdEIsWUFBWTt1QkFBQyxPQUFPLEVBQUUsRUFBQyxJQUFJLEVBQUUsV0FBVyxFQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtBc3luY1BpcGUsIE5nRm9yT2YsIE5nSWYsIE5nVGVtcGxhdGVPdXRsZXR9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgdHlwZSB7UXVlcnlMaXN0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gICAgQ29tcG9uZW50LFxuICAgIENvbnRlbnRDaGlsZCxcbiAgICBDb250ZW50Q2hpbGRyZW4sXG4gICAgaW5qZWN0LFxuICAgIFRlbXBsYXRlUmVmLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gICAgTXV0YXRpb25PYnNlcnZlclNlcnZpY2UsXG4gICAgV0FfTVVUQVRJT05fT0JTRVJWRVJfSU5JVCxcbn0gZnJvbSAnQG5nLXdlYi1hcGlzL211dGF0aW9uLW9ic2VydmVyJztcbmltcG9ydCB7UmVzaXplT2JzZXJ2ZXJTZXJ2aWNlfSBmcm9tICdAbmctd2ViLWFwaXMvcmVzaXplLW9ic2VydmVyJztcbmltcG9ydCB7RU1QVFlfUVVFUll9IGZyb20gJ0B0YWlnYS11aS9jZGsvY29uc3RhbnRzJztcbmltcG9ydCB7VHVpSXRlbX0gZnJvbSAnQHRhaWdhLXVpL2Nkay9kaXJlY3RpdmVzL2l0ZW0nO1xuaW1wb3J0IHtUdWlMZXR9IGZyb20gJ0B0YWlnYS11aS9jZGsvZGlyZWN0aXZlcy9sZXQnO1xuaW1wb3J0IHR5cGUge1R1aUNvbnRleHR9IGZyb20gJ0B0YWlnYS11aS9jZGsvdHlwZXMnO1xuXG5pbXBvcnQge1R1aUl0ZW1zV2l0aE1vcmVEaXJlY3RpdmV9IGZyb20gJy4vaXRlbXMtd2l0aC1tb3JlLmRpcmVjdGl2ZSc7XG5pbXBvcnQge1R1aUl0ZW1zV2l0aE1vcmVTZXJ2aWNlfSBmcm9tICcuL2l0ZW1zLXdpdGgtbW9yZS5zZXJ2aWNlJztcbmltcG9ydCB7VHVpTW9yZX0gZnJvbSAnLi9tb3JlLmRpcmVjdGl2ZSc7XG5cbkBDb21wb25lbnQoe1xuICAgIHN0YW5kYWxvbmU6IHRydWUsXG4gICAgc2VsZWN0b3I6ICd0dWktaXRlbXMtd2l0aC1tb3JlJyxcbiAgICBpbXBvcnRzOiBbTmdJZiwgTmdGb3JPZiwgQXN5bmNQaXBlLCBOZ1RlbXBsYXRlT3V0bGV0LCBUdWlMZXRdLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9pdGVtcy13aXRoLW1vcmUudGVtcGxhdGUuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vaXRlbXMtd2l0aC1tb3JlLnN0eWxlLmxlc3MnXSxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgTXV0YXRpb25PYnNlcnZlclNlcnZpY2UsXG4gICAgICAgIFJlc2l6ZU9ic2VydmVyU2VydmljZSxcbiAgICAgICAgVHVpSXRlbXNXaXRoTW9yZVNlcnZpY2UsXG4gICAgICAgIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IFdBX01VVEFUSU9OX09CU0VSVkVSX0lOSVQsXG4gICAgICAgICAgICB1c2VWYWx1ZToge1xuICAgICAgICAgICAgICAgIGNoaWxkTGlzdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBjaGFyYWN0ZXJEYXRhOiB0cnVlLFxuICAgICAgICAgICAgICAgIHN1YnRyZWU6IHRydWUsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgaG9zdERpcmVjdGl2ZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGlyZWN0aXZlOiBUdWlJdGVtc1dpdGhNb3JlRGlyZWN0aXZlLFxuICAgICAgICAgICAgaW5wdXRzOiBbJ2l0ZW1zTGltaXQnLCAncmVxdWlyZWQnXSxcbiAgICAgICAgfSxcbiAgICBdLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlJdGVtc1dpdGhNb3JlQ29tcG9uZW50IHtcbiAgICBAQ29udGVudENoaWxkcmVuKFR1aUl0ZW0sIHtyZWFkOiBUZW1wbGF0ZVJlZiwgZGVzY2VuZGFudHM6IHRydWV9KVxuICAgIHByb3RlY3RlZCByZWFkb25seSBpdGVtczogUXVlcnlMaXN0PFRlbXBsYXRlUmVmPHVua25vd24+PiA9IEVNUFRZX1FVRVJZO1xuXG4gICAgQENvbnRlbnRDaGlsZChUdWlNb3JlLCB7cmVhZDogVGVtcGxhdGVSZWZ9KVxuICAgIHByb3RlY3RlZCByZWFkb25seSBtb3JlPzogVGVtcGxhdGVSZWY8VHVpQ29udGV4dDxudW1iZXI+PjtcblxuICAgIHByb3RlY3RlZCByZWFkb25seSBkaXJlY3RpdmUgPSBpbmplY3QoVHVpSXRlbXNXaXRoTW9yZURpcmVjdGl2ZSk7XG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGxhc3RWaXNpYmxlSW5kZXgkID0gaW5qZWN0KFR1aUl0ZW1zV2l0aE1vcmVTZXJ2aWNlKTtcbn1cbiIsIjxuZy1jb250YWluZXIgKm5nSWY9XCJpdGVtcy5jaGFuZ2VzIHwgYXN5bmNcIiAvPlxuPG5nLWNvbnRhaW5lciAqdHVpTGV0PVwiKGxhc3RWaXNpYmxlSW5kZXgkIHwgYXN5bmMpIHx8IDAgYXMgbGFzdEluZGV4XCI+XG4gICAgPGRpdlxuICAgICAgICAqbmdGb3I9XCJsZXQgaXRlbSBvZiBpdGVtczsgbGV0IGluZGV4ID0gaW5kZXhcIlxuICAgICAgICBjbGFzcz1cInQtaXRlbVwiXG4gICAgICAgIFtjbGFzcy50LWl0ZW1faGlkZGVuXT1cImluZGV4ID4gbGFzdEluZGV4ICYmIGluZGV4ICE9PSBkaXJlY3RpdmUucmVxdWlyZWRcIlxuICAgID5cbiAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdUZW1wbGF0ZU91dGxldD1cIml0ZW1cIiAvPlxuICAgIDwvZGl2PlxuICAgIDxzcGFuXG4gICAgICAgICpuZ0lmPVwibW9yZSAmJiBsYXN0SW5kZXggPCBpdGVtcy5sZW5ndGggLSAxXCJcbiAgICAgICAgY2xhc3M9XCJ0LWl0ZW1cIlxuICAgICAgICBbY2xhc3MudC1pdGVtX2hpZGRlbl09XCJsYXN0SW5kZXggPj0gaXRlbXMubGVuZ3RoIC0gMVwiXG4gICAgPlxuICAgICAgICA8bmctY29udGFpbmVyXG4gICAgICAgICAgICBbbmdUZW1wbGF0ZU91dGxldF09XCJtb3JlXCJcbiAgICAgICAgICAgIFtuZ1RlbXBsYXRlT3V0bGV0Q29udGV4dF09XCJ7JGltcGxpY2l0OiBsYXN0SW5kZXh9XCJcbiAgICAgICAgLz5cbiAgICA8L3NwYW4+XG48L25nLWNvbnRhaW5lcj5cbiJdfQ==