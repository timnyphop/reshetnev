import { ChangeDetectorRef, Directive, inject, Input } from '@angular/core';
import { toSignal } from '@angular/core/rxjs-interop';
import { ResizeObserverService } from '@ng-web-apis/resize-observer';
import { tuiWatch, tuiZonefull } from '@taiga-ui/cdk/observables';
import { tuiInjectElement } from '@taiga-ui/cdk/utils/dom';
import { BehaviorSubject, combineLatest, distinctUntilChanged, map } from 'rxjs';
import * as i0 from "@angular/core";
class TuiProgressColorSegments {
    constructor() {
        this.colors$ = new BehaviorSubject([]);
        this.el = tuiInjectElement();
        this.color = toSignal(combineLatest([
            this.colors$,
            inject(ResizeObserverService, { self: true }).pipe(map(() => this.el.offsetWidth), distinctUntilChanged()),
        ]).pipe(map(([colors, width]) => {
            const segmentWidth = Math.ceil(width / colors.length);
            const colorsString = colors.reduce((acc, color, i) => `${acc}, ${color} ${i * segmentWidth}px ${(i + 1) * segmentWidth}px`, '');
            return `linear-gradient(to right ${colorsString})`;
        }), tuiZonefull(), tuiWatch(inject(ChangeDetectorRef))));
    }
    set colors(colors) {
        this.colors$.next(colors);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiProgressColorSegments, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiProgressColorSegments, isStandalone: true, selector: "progress[tuiProgressBar][tuiProgressColorSegments]", inputs: { colors: ["tuiProgressColorSegments", "colors"] }, host: { properties: { "style.--tui-progress-color": "color()" } }, providers: [ResizeObserverService], ngImport: i0 }); }
}
export { TuiProgressColorSegments };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiProgressColorSegments, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: 'progress[tuiProgressBar][tuiProgressColorSegments]',
                    providers: [ResizeObserverService],
                    host: { '[style.--tui-progress-color]': 'color()' },
                }]
        }], propDecorators: { colors: [{
                type: Input,
                args: ['tuiProgressColorSegments']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3MtY29sb3Itc2VnbWVudHMuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMva2l0L2NvbXBvbmVudHMvcHJvZ3Jlc3MvcHJvZ3Jlc3MtYmFyL3Byb2dyZXNzLWNvbG9yLXNlZ21lbnRzLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDMUUsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLDRCQUE0QixDQUFDO0FBQ3BELE9BQU8sRUFBQyxxQkFBcUIsRUFBQyxNQUFNLDhCQUE4QixDQUFDO0FBQ25FLE9BQU8sRUFBQyxRQUFRLEVBQUUsV0FBVyxFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFDaEUsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFDekQsT0FBTyxFQUFDLGVBQWUsRUFBRSxhQUFhLEVBQUUsb0JBQW9CLEVBQUUsR0FBRyxFQUFDLE1BQU0sTUFBTSxDQUFDOztBQUUvRSxNQU1hLHdCQUF3QjtJQU5yQztRQU9xQixZQUFPLEdBQUcsSUFBSSxlQUFlLENBQVcsRUFBRSxDQUFDLENBQUM7UUFDNUMsT0FBRSxHQUFHLGdCQUFnQixFQUF1QixDQUFDO1FBRTNDLFVBQUssR0FBRyxRQUFRLENBQy9CLGFBQWEsQ0FBQztZQUNWLElBQUksQ0FBQyxPQUFPO1lBQ1osTUFBTSxDQUFDLHFCQUFxQixFQUFFLEVBQUMsSUFBSSxFQUFFLElBQUksRUFBQyxDQUFDLENBQUMsSUFBSSxDQUM1QyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsRUFDOUIsb0JBQW9CLEVBQUUsQ0FDekI7U0FDSixDQUFDLENBQUMsSUFBSSxDQUNILEdBQUcsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUU7WUFDcEIsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3RELE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQzlCLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUNkLEdBQUcsR0FBRyxLQUFLLEtBQUssSUFBSSxDQUFDLEdBQUcsWUFBWSxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLFlBQVksSUFBSSxFQUN4RSxFQUFFLENBQ0wsQ0FBQztZQUVGLE9BQU8sNEJBQTRCLFlBQVksR0FBRyxDQUFDO1FBQ3ZELENBQUMsQ0FBQyxFQUNGLFdBQVcsRUFBRSxFQUNiLFFBQVEsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUN0QyxDQUNKLENBQUM7S0FNTDtJQUpHLElBQ1csTUFBTSxDQUFDLE1BQWdCO1FBQzlCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzlCLENBQUM7K0dBOUJRLHdCQUF3QjttR0FBeEIsd0JBQXdCLGdPQUh0QixDQUFDLHFCQUFxQixDQUFDOztTQUd6Qix3QkFBd0I7NEZBQXhCLHdCQUF3QjtrQkFOcEMsU0FBUzttQkFBQztvQkFDUCxVQUFVLEVBQUUsSUFBSTtvQkFDaEIsUUFBUSxFQUFFLG9EQUFvRDtvQkFDOUQsU0FBUyxFQUFFLENBQUMscUJBQXFCLENBQUM7b0JBQ2xDLElBQUksRUFBRSxFQUFDLDhCQUE4QixFQUFFLFNBQVMsRUFBQztpQkFDcEQ7OEJBNkJjLE1BQU07c0JBRGhCLEtBQUs7dUJBQUMsMEJBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDaGFuZ2VEZXRlY3RvclJlZiwgRGlyZWN0aXZlLCBpbmplY3QsIElucHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7dG9TaWduYWx9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvcnhqcy1pbnRlcm9wJztcbmltcG9ydCB7UmVzaXplT2JzZXJ2ZXJTZXJ2aWNlfSBmcm9tICdAbmctd2ViLWFwaXMvcmVzaXplLW9ic2VydmVyJztcbmltcG9ydCB7dHVpV2F0Y2gsIHR1aVpvbmVmdWxsfSBmcm9tICdAdGFpZ2EtdWkvY2RrL29ic2VydmFibGVzJztcbmltcG9ydCB7dHVpSW5qZWN0RWxlbWVudH0gZnJvbSAnQHRhaWdhLXVpL2Nkay91dGlscy9kb20nO1xuaW1wb3J0IHtCZWhhdmlvclN1YmplY3QsIGNvbWJpbmVMYXRlc3QsIGRpc3RpbmN0VW50aWxDaGFuZ2VkLCBtYXB9IGZyb20gJ3J4anMnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzdGFuZGFsb25lOiB0cnVlLFxuICAgIHNlbGVjdG9yOiAncHJvZ3Jlc3NbdHVpUHJvZ3Jlc3NCYXJdW3R1aVByb2dyZXNzQ29sb3JTZWdtZW50c10nLFxuICAgIHByb3ZpZGVyczogW1Jlc2l6ZU9ic2VydmVyU2VydmljZV0sXG4gICAgaG9zdDogeydbc3R5bGUuLS10dWktcHJvZ3Jlc3MtY29sb3JdJzogJ2NvbG9yKCknfSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpUHJvZ3Jlc3NDb2xvclNlZ21lbnRzIHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGNvbG9ycyQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PHN0cmluZ1tdPihbXSk7XG4gICAgcHJpdmF0ZSByZWFkb25seSBlbCA9IHR1aUluamVjdEVsZW1lbnQ8SFRNTFByb2dyZXNzRWxlbWVudD4oKTtcblxuICAgIHByb3RlY3RlZCByZWFkb25seSBjb2xvciA9IHRvU2lnbmFsKFxuICAgICAgICBjb21iaW5lTGF0ZXN0KFtcbiAgICAgICAgICAgIHRoaXMuY29sb3JzJCxcbiAgICAgICAgICAgIGluamVjdChSZXNpemVPYnNlcnZlclNlcnZpY2UsIHtzZWxmOiB0cnVlfSkucGlwZShcbiAgICAgICAgICAgICAgICBtYXAoKCkgPT4gdGhpcy5lbC5vZmZzZXRXaWR0aCksXG4gICAgICAgICAgICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKSxcbiAgICAgICAgICAgICksXG4gICAgICAgIF0pLnBpcGUoXG4gICAgICAgICAgICBtYXAoKFtjb2xvcnMsIHdpZHRoXSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlZ21lbnRXaWR0aCA9IE1hdGguY2VpbCh3aWR0aCAvIGNvbG9ycy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbG9yc1N0cmluZyA9IGNvbG9ycy5yZWR1Y2UoXG4gICAgICAgICAgICAgICAgICAgIChhY2MsIGNvbG9yLCBpKSA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgYCR7YWNjfSwgJHtjb2xvcn0gJHtpICogc2VnbWVudFdpZHRofXB4ICR7KGkgKyAxKSAqIHNlZ21lbnRXaWR0aH1weGAsXG4gICAgICAgICAgICAgICAgICAgICcnLFxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gYGxpbmVhci1ncmFkaWVudCh0byByaWdodCAke2NvbG9yc1N0cmluZ30pYDtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgdHVpWm9uZWZ1bGwoKSxcbiAgICAgICAgICAgIHR1aVdhdGNoKGluamVjdChDaGFuZ2VEZXRlY3RvclJlZikpLFxuICAgICAgICApLFxuICAgICk7XG5cbiAgICBASW5wdXQoJ3R1aVByb2dyZXNzQ29sb3JTZWdtZW50cycpXG4gICAgcHVibGljIHNldCBjb2xvcnMoY29sb3JzOiBzdHJpbmdbXSkge1xuICAgICAgICB0aGlzLmNvbG9ycyQubmV4dChjb2xvcnMpO1xuICAgIH1cbn1cbiJdfQ==