import { ChangeDetectionStrategy, Component, inject, Input, ViewChild, } from '@angular/core';
import { tuiInjectElement } from '@taiga-ui/cdk/utils/dom';
import { TuiTileService } from './tile.service';
import { TuiTilesComponent } from './tiles.component';
import * as i0 from "@angular/core";
class TuiTile {
    constructor() {
        this.service = inject(TuiTileService);
        this.tiles = inject(TuiTilesComponent);
        this.dragged = false;
        this.width = 1;
        this.height = 1;
        this.element = tuiInjectElement();
    }
    onDrag(offset) {
        const dragged = !Number.isNaN(offset[0]);
        this.dragged = this.dragged || dragged;
        this.tiles.element = dragged ? this.element : null;
        this.service.setOffset(offset);
    }
    ngAfterViewInit() {
        if (this.wrapper) {
            this.service.init(this.wrapper.nativeElement);
        }
    }
    ngOnDestroy() {
        if (this.tiles.element === this.element) {
            this.tiles.element = null;
        }
    }
    get column() {
        return `span var(--tui-width, ${this.width})`;
    }
    get row() {
        return `span var(--tui-height, ${this.height})`;
    }
    onEnter() {
        this.tiles.rearrange(this.element);
    }
    onTransitionEnd() {
        this.dragged = false;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiTile, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiTile, isStandalone: true, selector: "tui-tile", inputs: { width: "width", height: "height" }, host: { listeners: { "pointerenter": "onEnter()" }, properties: { "class._dragged": "dragged", "style.gridColumn": "column", "style.gridRow": "row" } }, providers: [TuiTileService], viewQueries: [{ propertyName: "wrapper", first: true, predicate: ["wrapper"], descendants: true }], ngImport: i0, template: "<div\n    #wrapper\n    class=\"t-wrapper\"\n    (transitionend.self)=\"onTransitionEnd()\"\n>\n    <ng-content />\n</div>\n", changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { TuiTile };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiTile, decorators: [{
            type: Component,
            args: [{ standalone: true, selector: 'tui-tile', changeDetection: ChangeDetectionStrategy.OnPush, providers: [TuiTileService], host: {
                        '[class._dragged]': 'dragged',
                        '[style.gridColumn]': 'column',
                        '[style.gridRow]': 'row',
                        '(pointerenter)': 'onEnter()',
                    }, template: "<div\n    #wrapper\n    class=\"t-wrapper\"\n    (transitionend.self)=\"onTransitionEnd()\"\n>\n    <ng-content />\n</div>\n" }]
        }], propDecorators: { wrapper: [{
                type: ViewChild,
                args: ['wrapper']
            }], width: [{
                type: Input
            }], height: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGlsZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9raXQvY29tcG9uZW50cy90aWxlcy90aWxlLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC9jb21wb25lbnRzL3RpbGVzL3RpbGUudGVtcGxhdGUuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQ0gsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFDVCxNQUFNLEVBQ04sS0FBSyxFQUNMLFNBQVMsR0FDWixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUV6RCxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDOUMsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sbUJBQW1CLENBQUM7O0FBRXBELE1BYWEsT0FBTztJQWJwQjtRQWlCcUIsWUFBTyxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUNqQyxVQUFLLEdBQUcsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFFekMsWUFBTyxHQUFHLEtBQUssQ0FBQztRQUduQixVQUFLLEdBQUcsQ0FBQyxDQUFDO1FBR1YsV0FBTSxHQUFHLENBQUMsQ0FBQztRQUVGLFlBQU8sR0FBRyxnQkFBZ0IsRUFBRSxDQUFDO0tBcUNoRDtJQW5DVSxNQUFNLENBQUMsTUFBaUM7UUFDM0MsTUFBTSxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRXpDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUM7UUFDdkMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDbkQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVNLGVBQWU7UUFDbEIsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUNqRDtJQUNMLENBQUM7SUFFTSxXQUFXO1FBQ2QsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sS0FBSyxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ3JDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztTQUM3QjtJQUNMLENBQUM7SUFFRCxJQUFjLE1BQU07UUFDaEIsT0FBTyx5QkFBeUIsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDO0lBQ2xELENBQUM7SUFFRCxJQUFjLEdBQUc7UUFDYixPQUFPLDBCQUEwQixJQUFJLENBQUMsTUFBTSxHQUFHLENBQUM7SUFDcEQsQ0FBQztJQUVTLE9BQU87UUFDYixJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVTLGVBQWU7UUFDckIsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7SUFDekIsQ0FBQzsrR0FuRFEsT0FBTzttR0FBUCxPQUFPLDhQQVJMLENBQUMsY0FBYyxDQUFDLDhIQ2xCL0IsOEhBT0E7O1NEbUJhLE9BQU87NEZBQVAsT0FBTztrQkFibkIsU0FBUztpQ0FDTSxJQUFJLFlBQ04sVUFBVSxtQkFFSCx1QkFBdUIsQ0FBQyxNQUFNLGFBQ3BDLENBQUMsY0FBYyxDQUFDLFFBQ3JCO3dCQUNGLGtCQUFrQixFQUFFLFNBQVM7d0JBQzdCLG9CQUFvQixFQUFFLFFBQVE7d0JBQzlCLGlCQUFpQixFQUFFLEtBQUs7d0JBQ3hCLGdCQUFnQixFQUFFLFdBQVc7cUJBQ2hDOzhCQUlnQixPQUFPO3NCQUR2QixTQUFTO3VCQUFDLFNBQVM7Z0JBU2IsS0FBSztzQkFEWCxLQUFLO2dCQUlDLE1BQU07c0JBRFosS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHtBZnRlclZpZXdJbml0LCBFbGVtZW50UmVmLCBPbkRlc3Ryb3l9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgICBDb21wb25lbnQsXG4gICAgaW5qZWN0LFxuICAgIElucHV0LFxuICAgIFZpZXdDaGlsZCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge3R1aUluamVjdEVsZW1lbnR9IGZyb20gJ0B0YWlnYS11aS9jZGsvdXRpbHMvZG9tJztcblxuaW1wb3J0IHtUdWlUaWxlU2VydmljZX0gZnJvbSAnLi90aWxlLnNlcnZpY2UnO1xuaW1wb3J0IHtUdWlUaWxlc0NvbXBvbmVudH0gZnJvbSAnLi90aWxlcy5jb21wb25lbnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzdGFuZGFsb25lOiB0cnVlLFxuICAgIHNlbGVjdG9yOiAndHVpLXRpbGUnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi90aWxlLnRlbXBsYXRlLmh0bWwnLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICAgIHByb3ZpZGVyczogW1R1aVRpbGVTZXJ2aWNlXSxcbiAgICBob3N0OiB7XG4gICAgICAgICdbY2xhc3MuX2RyYWdnZWRdJzogJ2RyYWdnZWQnLFxuICAgICAgICAnW3N0eWxlLmdyaWRDb2x1bW5dJzogJ2NvbHVtbicsXG4gICAgICAgICdbc3R5bGUuZ3JpZFJvd10nOiAncm93JyxcbiAgICAgICAgJyhwb2ludGVyZW50ZXIpJzogJ29uRW50ZXIoKScsXG4gICAgfSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpVGlsZSBpbXBsZW1lbnRzIE9uRGVzdHJveSwgQWZ0ZXJWaWV3SW5pdCB7XG4gICAgQFZpZXdDaGlsZCgnd3JhcHBlcicpXG4gICAgcHJpdmF0ZSByZWFkb25seSB3cmFwcGVyPzogRWxlbWVudFJlZjxIVE1MRWxlbWVudD47XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IHNlcnZpY2UgPSBpbmplY3QoVHVpVGlsZVNlcnZpY2UpO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgdGlsZXMgPSBpbmplY3QoVHVpVGlsZXNDb21wb25lbnQpO1xuXG4gICAgcHJvdGVjdGVkIGRyYWdnZWQgPSBmYWxzZTtcblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIHdpZHRoID0gMTtcblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGhlaWdodCA9IDE7XG5cbiAgICBwdWJsaWMgcmVhZG9ubHkgZWxlbWVudCA9IHR1aUluamVjdEVsZW1lbnQoKTtcblxuICAgIHB1YmxpYyBvbkRyYWcob2Zmc2V0OiByZWFkb25seSBbbnVtYmVyLCBudW1iZXJdKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGRyYWdnZWQgPSAhTnVtYmVyLmlzTmFOKG9mZnNldFswXSk7XG5cbiAgICAgICAgdGhpcy5kcmFnZ2VkID0gdGhpcy5kcmFnZ2VkIHx8IGRyYWdnZWQ7XG4gICAgICAgIHRoaXMudGlsZXMuZWxlbWVudCA9IGRyYWdnZWQgPyB0aGlzLmVsZW1lbnQgOiBudWxsO1xuICAgICAgICB0aGlzLnNlcnZpY2Uuc2V0T2Zmc2V0KG9mZnNldCk7XG4gICAgfVxuXG4gICAgcHVibGljIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMud3JhcHBlcikge1xuICAgICAgICAgICAgdGhpcy5zZXJ2aWNlLmluaXQodGhpcy53cmFwcGVyLm5hdGl2ZUVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy50aWxlcy5lbGVtZW50ID09PSB0aGlzLmVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMudGlsZXMuZWxlbWVudCA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IGNvbHVtbigpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gYHNwYW4gdmFyKC0tdHVpLXdpZHRoLCAke3RoaXMud2lkdGh9KWA7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldCByb3coKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGBzcGFuIHZhcigtLXR1aS1oZWlnaHQsICR7dGhpcy5oZWlnaHR9KWA7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIG9uRW50ZXIoKTogdm9pZCB7XG4gICAgICAgIHRoaXMudGlsZXMucmVhcnJhbmdlKHRoaXMuZWxlbWVudCk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIG9uVHJhbnNpdGlvbkVuZCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5kcmFnZ2VkID0gZmFsc2U7XG4gICAgfVxufVxuIiwiPGRpdlxuICAgICN3cmFwcGVyXG4gICAgY2xhc3M9XCJ0LXdyYXBwZXJcIlxuICAgICh0cmFuc2l0aW9uZW5kLnNlbGYpPVwib25UcmFuc2l0aW9uRW5kKClcIlxuPlxuICAgIDxuZy1jb250ZW50IC8+XG48L2Rpdj5cbiJdfQ==