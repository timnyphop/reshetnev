import { inject, Injectable } from '@angular/core';
import { map, startWith, Subject, switchMap, tap } from 'rxjs';
import { TUI_TREE_LOADER, TUI_TREE_LOADING, TUI_TREE_START } from './tree.tokens';
import * as i0 from "@angular/core";
class TuiTreeService {
    constructor() {
        this.loading = inject(TUI_TREE_LOADING);
        this.start = inject(TUI_TREE_START);
        this.loader = inject(TUI_TREE_LOADER);
        this.map = new Map([[this.loading, []]]);
        this.load$ = new Subject();
        this.data$ = this.load$.pipe(switchMap((item) => this.loader.loadChildren(item).pipe(tap((children) => this.map.set(item, children)), map((children) => children.filter((item) => !this.loader.hasChildren(item))), tap((children) => children.forEach((child) => this.map.set(child, []))))), startWith(null), map(() => this.start));
    }
    getChildren(item) {
        return this.map.get(item) || [this.loading];
    }
    loadChildren(item) {
        if (this.map.get(item)) {
            return;
        }
        this.map.set(item, [this.loading]);
        this.load$.next(item);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiTreeService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiTreeService }); }
}
export { TuiTreeService };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiTreeService, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMva2l0L2NvbXBvbmVudHMvdHJlZS9taXNjL3RyZWUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsTUFBTSxFQUFFLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNqRCxPQUFPLEVBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUc3RCxPQUFPLEVBQUMsZUFBZSxFQUFFLGdCQUFnQixFQUFFLGNBQWMsRUFBQyxNQUFNLGVBQWUsQ0FBQzs7QUFFaEYsTUFDYSxjQUFjO0lBRDNCO1FBRXFCLFlBQU8sR0FBRyxNQUFNLENBQUksZ0JBQWdCLENBQUMsQ0FBQztRQUN0QyxVQUFLLEdBQUcsTUFBTSxDQUFJLGNBQWMsQ0FBQyxDQUFDO1FBQ2xDLFdBQU0sR0FBRyxNQUFNLENBQW1CLGVBQWUsQ0FBQyxDQUFDO1FBQ25ELFFBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBa0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JELFVBQUssR0FBRyxJQUFJLE9BQU8sRUFBSyxDQUFDO1FBRTFCLFVBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FDbkMsU0FBUyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FDZixJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQy9CLEdBQUcsQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDLEVBQy9DLEdBQUcsQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQ2IsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUM1RCxFQUNELEdBQUcsQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FDMUUsQ0FDSixFQUNELFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFDZixHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUN4QixDQUFDO0tBY0w7SUFaVSxXQUFXLENBQUMsSUFBTztRQUN0QixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFTSxZQUFZLENBQUMsSUFBTztRQUN2QixJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3BCLE9BQU87U0FDVjtRQUVELElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ25DLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzFCLENBQUM7K0dBaENRLGNBQWM7bUhBQWQsY0FBYzs7U0FBZCxjQUFjOzRGQUFkLGNBQWM7a0JBRDFCLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2luamVjdCwgSW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge21hcCwgc3RhcnRXaXRoLCBTdWJqZWN0LCBzd2l0Y2hNYXAsIHRhcH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB0eXBlIHtUdWlUcmVlTG9hZGVyfSBmcm9tICcuL3RyZWUuaW50ZXJmYWNlcyc7XG5pbXBvcnQge1RVSV9UUkVFX0xPQURFUiwgVFVJX1RSRUVfTE9BRElORywgVFVJX1RSRUVfU1RBUlR9IGZyb20gJy4vdHJlZS50b2tlbnMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVHVpVHJlZVNlcnZpY2U8VD4ge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgbG9hZGluZyA9IGluamVjdDxUPihUVUlfVFJFRV9MT0FESU5HKTtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHN0YXJ0ID0gaW5qZWN0PFQ+KFRVSV9UUkVFX1NUQVJUKTtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGxvYWRlciA9IGluamVjdDxUdWlUcmVlTG9hZGVyPFQ+PihUVUlfVFJFRV9MT0FERVIpO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgbWFwID0gbmV3IE1hcDxULCByZWFkb25seSBUW10+KFtbdGhpcy5sb2FkaW5nLCBbXV1dKTtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGxvYWQkID0gbmV3IFN1YmplY3Q8VD4oKTtcblxuICAgIHB1YmxpYyByZWFkb25seSBkYXRhJCA9IHRoaXMubG9hZCQucGlwZShcbiAgICAgICAgc3dpdGNoTWFwKChpdGVtKSA9PlxuICAgICAgICAgICAgdGhpcy5sb2FkZXIubG9hZENoaWxkcmVuKGl0ZW0pLnBpcGUoXG4gICAgICAgICAgICAgICAgdGFwKChjaGlsZHJlbikgPT4gdGhpcy5tYXAuc2V0KGl0ZW0sIGNoaWxkcmVuKSksXG4gICAgICAgICAgICAgICAgbWFwKChjaGlsZHJlbikgPT5cbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW4uZmlsdGVyKChpdGVtKSA9PiAhdGhpcy5sb2FkZXIuaGFzQ2hpbGRyZW4oaXRlbSkpLFxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgdGFwKChjaGlsZHJlbikgPT4gY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQpID0+IHRoaXMubWFwLnNldChjaGlsZCwgW10pKSksXG4gICAgICAgICAgICApLFxuICAgICAgICApLFxuICAgICAgICBzdGFydFdpdGgobnVsbCksXG4gICAgICAgIG1hcCgoKSA9PiB0aGlzLnN0YXJ0KSxcbiAgICApO1xuXG4gICAgcHVibGljIGdldENoaWxkcmVuKGl0ZW06IFQpOiByZWFkb25seSBUW10ge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXAuZ2V0KGl0ZW0pIHx8IFt0aGlzLmxvYWRpbmddO1xuICAgIH1cblxuICAgIHB1YmxpYyBsb2FkQ2hpbGRyZW4oaXRlbTogVCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5tYXAuZ2V0KGl0ZW0pKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm1hcC5zZXQoaXRlbSwgW3RoaXMubG9hZGluZ10pO1xuICAgICAgICB0aGlzLmxvYWQkLm5leHQoaXRlbSk7XG4gICAgfVxufVxuIl19