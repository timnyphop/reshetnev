import { AsyncPipe, NgForOf, NgIf } from '@angular/common';
import { ChangeDetectionStrategy, Component, forwardRef, inject, Input, ViewChild, } from '@angular/core';
import { TuiLet } from '@taiga-ui/cdk/directives/let';
import { tuiProvide } from '@taiga-ui/cdk/utils/miscellaneous';
import { PolymorpheusOutlet } from '@taiga-ui/polymorpheus';
import { distinctUntilChanged, map, startWith, Subject } from 'rxjs';
import { TuiTreeChildren } from '../../directives/tree-children.directive';
import { TuiTreeNode } from '../../directives/tree-node.directive';
import { TUI_TREE_NODE } from '../../misc/tree.tokens';
import { TuiTreeItem } from '../tree-item/tree-item.component';
import * as i0 from "@angular/core";
class TuiTreeComponent {
    constructor() {
        this.check$ = new Subject();
        this.children$ = this.check$.pipe(startWith(null), map(() => this.handler(this.value)), distinctUntilChanged());
        this.directive = inject(TuiTreeChildren, {
            optional: true,
        });
        this.trackBy = (_, item) => item;
        this.content = ({ $implicit }) => String($implicit);
    }
    ngDoCheck() {
        this.checkChanges();
    }
    checkChanges() {
        this.check$.next();
        this.item?.checkChanges();
        this.child?.checkChanges();
    }
    get handler() {
        return this.directive?.childrenHandler || TuiTreeChildren.defaultHandler;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiTreeComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiTreeComponent, isStandalone: true, selector: "tui-tree", inputs: { value: "value", trackBy: "trackBy", content: "content" }, host: { attributes: { "role": "tree" } }, providers: [tuiProvide(TUI_TREE_NODE, TuiTreeComponent)], viewQueries: [{ propertyName: "item", first: true, predicate: i0.forwardRef(function () { return TuiTreeItem; }), descendants: true }, { propertyName: "child", first: true, predicate: i0.forwardRef(function () { return TuiTreeComponent; }), descendants: true }], ngImport: i0, template: "<tui-tree-item\n    *tuiLet=\"children$ | async as children\"\n    #view\n    [tuiTreeNode]=\"value\"\n>\n    <ng-container *ngIf=\"value !== children\">\n        <ng-container *polymorpheusOutlet=\"content as text; context: {$implicit: value, node: view}\">\n            {{ text }}\n        </ng-container>\n    </ng-container>\n    <tui-tree\n        *ngFor=\"let child of children; trackBy: trackBy\"\n        [content]=\"content\"\n        [trackBy]=\"trackBy\"\n        [value]=\"child\"\n    />\n</tui-tree-item>\n", styles: [":host{position:relative;display:block}\n"], dependencies: [{ kind: "component", type: TuiTreeComponent, selector: "tui-tree", inputs: ["value", "trackBy", "content"] }, { kind: "pipe", type: AsyncPipe, name: "async" }, { kind: "directive", type: NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: PolymorpheusOutlet, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { kind: "directive", type: TuiLet, selector: "[tuiLet]", inputs: ["tuiLet"] }, { kind: "component", type: TuiTreeItem, selector: "tui-tree-item" }, { kind: "directive", type: TuiTreeNode, selector: "tui-tree-item[tuiTreeNode]", inputs: ["tuiTreeNode"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { TuiTreeComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiTreeComponent, decorators: [{
            type: Component,
            args: [{ standalone: true, selector: 'tui-tree', imports: [
                        AsyncPipe,
                        NgForOf,
                        NgIf,
                        PolymorpheusOutlet,
                        TuiLet,
                        TuiTreeItem,
                        TuiTreeNode,
                    ], changeDetection: ChangeDetectionStrategy.OnPush, providers: [tuiProvide(TUI_TREE_NODE, TuiTreeComponent)], host: { role: 'tree' }, template: "<tui-tree-item\n    *tuiLet=\"children$ | async as children\"\n    #view\n    [tuiTreeNode]=\"value\"\n>\n    <ng-container *ngIf=\"value !== children\">\n        <ng-container *polymorpheusOutlet=\"content as text; context: {$implicit: value, node: view}\">\n            {{ text }}\n        </ng-container>\n    </ng-container>\n    <tui-tree\n        *ngFor=\"let child of children; trackBy: trackBy\"\n        [content]=\"content\"\n        [trackBy]=\"trackBy\"\n        [value]=\"child\"\n    />\n</tui-tree-item>\n", styles: [":host{position:relative;display:block}\n"] }]
        }], propDecorators: { item: [{
                type: ViewChild,
                args: [forwardRef(() => TuiTreeItem)]
            }], child: [{
                type: ViewChild,
                args: [forwardRef(() => TuiTreeComponent)]
            }], value: [{
                type: Input,
                args: [{
                        required: true,
                    }]
            }], trackBy: [{
                type: Input
            }], content: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9raXQvY29tcG9uZW50cy90cmVlL2NvbXBvbmVudHMvdHJlZS90cmVlLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC9jb21wb25lbnRzL3RyZWUvY29tcG9uZW50cy90cmVlL3RyZWUudGVtcGxhdGUuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUV6RCxPQUFPLEVBQ0gsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFDVCxVQUFVLEVBQ1YsTUFBTSxFQUNOLEtBQUssRUFDTCxTQUFTLEdBQ1osTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLDhCQUE4QixDQUFDO0FBRXBELE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxtQ0FBbUMsQ0FBQztBQUU3RCxPQUFPLEVBQUMsa0JBQWtCLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQztBQUMxRCxPQUFPLEVBQUMsb0JBQW9CLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFFbkUsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLDBDQUEwQyxDQUFDO0FBQ3pFLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxzQ0FBc0MsQ0FBQztBQUVqRSxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sd0JBQXdCLENBQUM7QUFDckQsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLGtDQUFrQyxDQUFDOztBQUU3RCxNQWtCYSxnQkFBZ0I7SUFsQjdCO1FBbUJxQixXQUFNLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztRQVEzQixjQUFTLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQzNDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFDZixHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFDbkMsb0JBQW9CLEVBQUUsQ0FDekIsQ0FBQztRQUVpQixjQUFTLEdBQUcsTUFBTSxDQUFxQixlQUFlLEVBQUU7WUFDdkUsUUFBUSxFQUFFLElBQUk7U0FDakIsQ0FBQyxDQUFDO1FBUUksWUFBTyxHQUF1QixDQUFDLENBQVMsRUFBRSxJQUFPLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQztRQUczRCxZQUFPLEdBQTJDLENBQUMsRUFBQyxTQUFTLEVBQUMsRUFBRSxFQUFFLENBQ3JFLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztLQWV6QjtJQWJVLFNBQVM7UUFDWixJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDeEIsQ0FBQztJQUVTLFlBQVk7UUFDbEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNuQixJQUFJLENBQUMsSUFBSSxFQUFFLFlBQVksRUFBRSxDQUFDO1FBQzFCLElBQUksQ0FBQyxLQUFLLEVBQUUsWUFBWSxFQUFFLENBQUM7SUFDL0IsQ0FBQztJQUVELElBQVksT0FBTztRQUNmLE9BQU8sSUFBSSxDQUFDLFNBQVMsRUFBRSxlQUFlLElBQUksZUFBZSxDQUFDLGNBQWMsQ0FBQztJQUM3RSxDQUFDOytHQTNDUSxnQkFBZ0I7bUdBQWhCLGdCQUFnQixxS0FIZCxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyxtR0FNNUIsV0FBVywrR0FHWCxnQkFBZ0Isb0RDL0NoRCwwZ0JBaUJBLGtHRHdCYSxnQkFBZ0IseUZBZHJCLFNBQVMsOENBQ1QsT0FBTyxtSEFDUCxJQUFJLDZGQUNKLGtCQUFrQiw4SEFDbEIsTUFBTSx5RUFDTixXQUFXLDBEQUNYLFdBQVc7O1NBUU4sZ0JBQWdCOzRGQUFoQixnQkFBZ0I7a0JBbEI1QixTQUFTO2lDQUNNLElBQUksWUFDTixVQUFVLFdBQ1g7d0JBQ0wsU0FBUzt3QkFDVCxPQUFPO3dCQUNQLElBQUk7d0JBQ0osa0JBQWtCO3dCQUNsQixNQUFNO3dCQUNOLFdBQVc7d0JBQ1gsV0FBVztxQkFDZCxtQkFHZ0IsdUJBQXVCLENBQUMsTUFBTSxhQUNwQyxDQUFDLFVBQVUsQ0FBQyxhQUFhLG1CQUFtQixDQUFDLFFBQ2xELEVBQUMsSUFBSSxFQUFFLE1BQU0sRUFBQzs4QkFNRCxJQUFJO3NCQUR0QixTQUFTO3VCQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUM7Z0JBSXJCLEtBQUs7c0JBRHZCLFNBQVM7dUJBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDO2dCQWdCdEMsS0FBSztzQkFIWCxLQUFLO3VCQUFDO3dCQUNILFFBQVEsRUFBRSxJQUFJO3FCQUNqQjtnQkFJTSxPQUFPO3NCQURiLEtBQUs7Z0JBSUMsT0FBTztzQkFEYixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtBc3luY1BpcGUsIE5nRm9yT2YsIE5nSWZ9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgdHlwZSB7RG9DaGVjaywgVHJhY2tCeUZ1bmN0aW9ufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gICAgQ29tcG9uZW50LFxuICAgIGZvcndhcmRSZWYsXG4gICAgaW5qZWN0LFxuICAgIElucHV0LFxuICAgIFZpZXdDaGlsZCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1R1aUxldH0gZnJvbSAnQHRhaWdhLXVpL2Nkay9kaXJlY3RpdmVzL2xldCc7XG5pbXBvcnQgdHlwZSB7VHVpSGFuZGxlcn0gZnJvbSAnQHRhaWdhLXVpL2Nkay90eXBlcyc7XG5pbXBvcnQge3R1aVByb3ZpZGV9IGZyb20gJ0B0YWlnYS11aS9jZGsvdXRpbHMvbWlzY2VsbGFuZW91cyc7XG5pbXBvcnQgdHlwZSB7UG9seW1vcnBoZXVzQ29udGVudH0gZnJvbSAnQHRhaWdhLXVpL3BvbHltb3JwaGV1cyc7XG5pbXBvcnQge1BvbHltb3JwaGV1c091dGxldH0gZnJvbSAnQHRhaWdhLXVpL3BvbHltb3JwaGV1cyc7XG5pbXBvcnQge2Rpc3RpbmN0VW50aWxDaGFuZ2VkLCBtYXAsIHN0YXJ0V2l0aCwgU3ViamVjdH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7VHVpVHJlZUNoaWxkcmVufSBmcm9tICcuLi8uLi9kaXJlY3RpdmVzL3RyZWUtY2hpbGRyZW4uZGlyZWN0aXZlJztcbmltcG9ydCB7VHVpVHJlZU5vZGV9IGZyb20gJy4uLy4uL2RpcmVjdGl2ZXMvdHJlZS1ub2RlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgdHlwZSB7VHVpVHJlZUNvbnRleHR9IGZyb20gJy4uLy4uL21pc2MvdHJlZS5pbnRlcmZhY2VzJztcbmltcG9ydCB7VFVJX1RSRUVfTk9ERX0gZnJvbSAnLi4vLi4vbWlzYy90cmVlLnRva2Vucyc7XG5pbXBvcnQge1R1aVRyZWVJdGVtfSBmcm9tICcuLi90cmVlLWl0ZW0vdHJlZS1pdGVtLmNvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICAgIHN0YW5kYWxvbmU6IHRydWUsXG4gICAgc2VsZWN0b3I6ICd0dWktdHJlZScsXG4gICAgaW1wb3J0czogW1xuICAgICAgICBBc3luY1BpcGUsXG4gICAgICAgIE5nRm9yT2YsXG4gICAgICAgIE5nSWYsXG4gICAgICAgIFBvbHltb3JwaGV1c091dGxldCxcbiAgICAgICAgVHVpTGV0LFxuICAgICAgICBUdWlUcmVlSXRlbSxcbiAgICAgICAgVHVpVHJlZU5vZGUsXG4gICAgXSxcbiAgICB0ZW1wbGF0ZVVybDogJy4vdHJlZS50ZW1wbGF0ZS5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi90cmVlLnN0eWxlLmxlc3MnXSxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgICBwcm92aWRlcnM6IFt0dWlQcm92aWRlKFRVSV9UUkVFX05PREUsIFR1aVRyZWVDb21wb25lbnQpXSxcbiAgICBob3N0OiB7cm9sZTogJ3RyZWUnfSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpVHJlZUNvbXBvbmVudDxUPiBpbXBsZW1lbnRzIERvQ2hlY2sge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgY2hlY2skID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcblxuICAgIEBWaWV3Q2hpbGQoZm9yd2FyZFJlZigoKSA9PiBUdWlUcmVlSXRlbSkpXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGl0ZW0/OiBUdWlUcmVlSXRlbTtcblxuICAgIEBWaWV3Q2hpbGQoZm9yd2FyZFJlZigoKSA9PiBUdWlUcmVlQ29tcG9uZW50KSlcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgY2hpbGQ/OiBUdWlUcmVlQ29tcG9uZW50PFQ+O1xuXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGNoaWxkcmVuJCA9IHRoaXMuY2hlY2skLnBpcGUoXG4gICAgICAgIHN0YXJ0V2l0aChudWxsKSxcbiAgICAgICAgbWFwKCgpID0+IHRoaXMuaGFuZGxlcih0aGlzLnZhbHVlKSksXG4gICAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksXG4gICAgKTtcblxuICAgIHByb3RlY3RlZCByZWFkb25seSBkaXJlY3RpdmUgPSBpbmplY3Q8VHVpVHJlZUNoaWxkcmVuPFQ+PihUdWlUcmVlQ2hpbGRyZW4sIHtcbiAgICAgICAgb3B0aW9uYWw6IHRydWUsXG4gICAgfSk7XG5cbiAgICBASW5wdXQoe1xuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICB9KVxuICAgIHB1YmxpYyB2YWx1ZSE6IFQ7XG5cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyB0cmFja0J5OiBUcmFja0J5RnVuY3Rpb248VD4gPSAoXzogbnVtYmVyLCBpdGVtOiBUKSA9PiBpdGVtO1xuXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgY29udGVudDogUG9seW1vcnBoZXVzQ29udGVudDxUdWlUcmVlQ29udGV4dDxUPj4gPSAoeyRpbXBsaWNpdH0pID0+XG4gICAgICAgIFN0cmluZygkaW1wbGljaXQpO1xuXG4gICAgcHVibGljIG5nRG9DaGVjaygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5jaGVja0NoYW5nZXMoKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgY2hlY2tDaGFuZ2VzKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmNoZWNrJC5uZXh0KCk7XG4gICAgICAgIHRoaXMuaXRlbT8uY2hlY2tDaGFuZ2VzKCk7XG4gICAgICAgIHRoaXMuY2hpbGQ/LmNoZWNrQ2hhbmdlcygpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0IGhhbmRsZXIoKTogVHVpSGFuZGxlcjxULCByZWFkb25seSBUW10+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlyZWN0aXZlPy5jaGlsZHJlbkhhbmRsZXIgfHwgVHVpVHJlZUNoaWxkcmVuLmRlZmF1bHRIYW5kbGVyO1xuICAgIH1cbn1cbiIsIjx0dWktdHJlZS1pdGVtXG4gICAgKnR1aUxldD1cImNoaWxkcmVuJCB8IGFzeW5jIGFzIGNoaWxkcmVuXCJcbiAgICAjdmlld1xuICAgIFt0dWlUcmVlTm9kZV09XCJ2YWx1ZVwiXG4+XG4gICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cInZhbHVlICE9PSBjaGlsZHJlblwiPlxuICAgICAgICA8bmctY29udGFpbmVyICpwb2x5bW9ycGhldXNPdXRsZXQ9XCJjb250ZW50IGFzIHRleHQ7IGNvbnRleHQ6IHskaW1wbGljaXQ6IHZhbHVlLCBub2RlOiB2aWV3fVwiPlxuICAgICAgICAgICAge3sgdGV4dCB9fVxuICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICA8L25nLWNvbnRhaW5lcj5cbiAgICA8dHVpLXRyZWVcbiAgICAgICAgKm5nRm9yPVwibGV0IGNoaWxkIG9mIGNoaWxkcmVuOyB0cmFja0J5OiB0cmFja0J5XCJcbiAgICAgICAgW2NvbnRlbnRdPVwiY29udGVudFwiXG4gICAgICAgIFt0cmFja0J5XT1cInRyYWNrQnlcIlxuICAgICAgICBbdmFsdWVdPVwiY2hpbGRcIlxuICAgIC8+XG48L3R1aS10cmVlLWl0ZW0+XG4iXX0=