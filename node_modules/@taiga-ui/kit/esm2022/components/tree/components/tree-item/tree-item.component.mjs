import { AsyncPipe, NgIf } from '@angular/common';
import { ChangeDetectionStrategy, Component, ContentChildren, forwardRef, inject, SkipSelf, } from '@angular/core';
import { EMPTY_QUERY } from '@taiga-ui/cdk/constants';
import { tuiInjectElement } from '@taiga-ui/cdk/utils/dom';
import { tuiProvide } from '@taiga-ui/cdk/utils/miscellaneous';
import { TuiExpandComponent } from '@taiga-ui/core/components/expand';
import { PolymorpheusOutlet } from '@taiga-ui/polymorpheus';
import { distinctUntilChanged, map, startWith, Subject } from 'rxjs';
import { TUI_TREE_CONTENT, TUI_TREE_CONTROLLER, TUI_TREE_LEVEL, TUI_TREE_NODE, } from '../../misc/tree.tokens';
import * as i0 from "@angular/core";
class TuiTreeItem {
    constructor() {
        this.nested = EMPTY_QUERY;
        this.el = tuiInjectElement();
        this.controller = inject(forwardRef(() => TUI_TREE_CONTROLLER));
        this.change$ = new Subject();
        this.level = inject(forwardRef(() => TUI_TREE_LEVEL));
        this.content = inject(forwardRef(() => TUI_TREE_CONTENT));
        this.expanded$ = this.change$.pipe(startWith(null), map(() => this.isExpanded));
        this.attached$ = this.change$.pipe(map(() => this.el.isConnected), distinctUntilChanged());
    }
    get isExpandable() {
        return !!this.nested.length;
    }
    get isExpanded() {
        return this.controller.isExpanded(this);
    }
    ngDoCheck() {
        this.checkChanges();
    }
    checkChanges() {
        this.change$.next();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiTreeItem, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiTreeItem, isStandalone: true, selector: "tui-tree-item", host: { attributes: { "role": "treeitem" }, properties: { "class._expandable": "isExpandable" } }, providers: [
            tuiProvide(TUI_TREE_NODE, TuiTreeItem),
            {
                provide: TUI_TREE_LEVEL,
                deps: [[new SkipSelf(), TUI_TREE_LEVEL]],
                useFactory: (level) => ++level,
            },
        ], queries: [{ propertyName: "nested", predicate: TUI_TREE_NODE }], ngImport: i0, template: "<ng-template #template>\n    <ng-content />\n</ng-template>\n<ng-container *polymorpheusOutlet=\"content as text; context: {$implicit: this, template: template}\">\n    {{ text }}\n</ng-container>\n<tui-expand\n    *ngIf=\"isExpandable\"\n    role=\"group\"\n    class=\"t-children\"\n    [expanded]=\"expanded$ | async\"\n>\n    <div>\n        <ng-content select=\"tui-tree-item\" />\n        <ng-content select=\"tui-tree\" />\n    </div>\n</tui-expand>\n<ng-container *ngIf=\"attached$ | async\" />\n", styles: [":host{display:block}.t-children{position:relative;margin-left:var(--tui-tree-item-indent, 1.5rem)}\n"], dependencies: [{ kind: "directive", type: PolymorpheusOutlet, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { kind: "component", type: TuiExpandComponent, selector: "tui-expand", inputs: ["async", "expanded"] }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "pipe", type: AsyncPipe, name: "async" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { TuiTreeItem };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiTreeItem, decorators: [{
            type: Component,
            args: [{ standalone: true, selector: 'tui-tree-item', imports: [PolymorpheusOutlet, TuiExpandComponent, NgIf, AsyncPipe], changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        tuiProvide(TUI_TREE_NODE, TuiTreeItem),
                        {
                            provide: TUI_TREE_LEVEL,
                            deps: [[new SkipSelf(), TUI_TREE_LEVEL]],
                            useFactory: (level) => ++level,
                        },
                    ], host: {
                        role: 'treeitem',
                        '[class._expandable]': 'isExpandable',
                    }, template: "<ng-template #template>\n    <ng-content />\n</ng-template>\n<ng-container *polymorpheusOutlet=\"content as text; context: {$implicit: this, template: template}\">\n    {{ text }}\n</ng-container>\n<tui-expand\n    *ngIf=\"isExpandable\"\n    role=\"group\"\n    class=\"t-children\"\n    [expanded]=\"expanded$ | async\"\n>\n    <div>\n        <ng-content select=\"tui-tree-item\" />\n        <ng-content select=\"tui-tree\" />\n    </div>\n</tui-expand>\n<ng-container *ngIf=\"attached$ | async\" />\n", styles: [":host{display:block}.t-children{position:relative;margin-left:var(--tui-tree-item-indent, 1.5rem)}\n"] }]
        }], propDecorators: { nested: [{
                type: ContentChildren,
                args: [TUI_TREE_NODE]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1pdGVtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC9jb21wb25lbnRzL3RyZWUvY29tcG9uZW50cy90cmVlLWl0ZW0vdHJlZS1pdGVtLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC9jb21wb25lbnRzL3RyZWUvY29tcG9uZW50cy90cmVlLWl0ZW0vdHJlZS1pdGVtLnRlbXBsYXRlLmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUVoRCxPQUFPLEVBQ0gsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFDVCxlQUFlLEVBQ2YsVUFBVSxFQUNWLE1BQU0sRUFDTixRQUFRLEdBQ1gsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQ3BELE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQ3pELE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxtQ0FBbUMsQ0FBQztBQUM3RCxPQUFPLEVBQUMsa0JBQWtCLEVBQUMsTUFBTSxrQ0FBa0MsQ0FBQztBQUVwRSxPQUFPLEVBQUMsa0JBQWtCLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQztBQUMxRCxPQUFPLEVBQUMsb0JBQW9CLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFHbkUsT0FBTyxFQUNILGdCQUFnQixFQUNoQixtQkFBbUIsRUFDbkIsY0FBYyxFQUNkLGFBQWEsR0FDaEIsTUFBTSx3QkFBd0IsQ0FBQzs7QUFFaEMsTUFvQmEsV0FBVztJQXBCeEI7UUFzQnFCLFdBQU0sR0FBdUIsV0FBVyxDQUFDO1FBRXpDLE9BQUUsR0FBRyxnQkFBZ0IsRUFBRSxDQUFDO1FBRXhCLGVBQVUsR0FBRyxNQUFNLENBQ2hDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxDQUN4QyxDQUFDO1FBRWUsWUFBTyxHQUFHLElBQUksT0FBTyxFQUFRLENBQUM7UUFFNUIsVUFBSyxHQUFHLE1BQU0sQ0FBUyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztRQUV6RCxZQUFPLEdBQUcsTUFBTSxDQUMvQixVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsQ0FDckMsQ0FBQztRQUVpQixjQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQzVDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFDZixHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUM3QixDQUFDO1FBRWlCLGNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FDNUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLEVBQzlCLG9CQUFvQixFQUFFLENBQ3pCLENBQUM7S0FpQkw7SUFmRyxJQUFXLFlBQVk7UUFDbkIsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDaEMsQ0FBQztJQUVELElBQVcsVUFBVTtRQUNqQixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFTSxTQUFTO1FBQ1osSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3hCLENBQUM7SUFFTSxZQUFZO1FBQ2YsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN4QixDQUFDOytHQTFDUSxXQUFXO21HQUFYLFdBQVcsK0pBYlQ7WUFDUCxVQUFVLENBQUMsYUFBYSxFQUFFLFdBQVcsQ0FBQztZQUN0QztnQkFDSSxPQUFPLEVBQUUsY0FBYztnQkFDdkIsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLFFBQVEsRUFBRSxFQUFFLGNBQWMsQ0FBQyxDQUFDO2dCQUN4QyxVQUFVLEVBQUUsQ0FBQyxLQUFhLEVBQVUsRUFBRSxDQUFDLEVBQUUsS0FBSzthQUNqRDtTQUNKLGlEQU9nQixhQUFvQiw2QkMvQ3pDLHlmQWtCQSw4SkRXYyxrQkFBa0IsOEhBQUUsa0JBQWtCLHNGQUFFLElBQUksd0ZBQUUsU0FBUzs7U0FpQnhELFdBQVc7NEZBQVgsV0FBVztrQkFwQnZCLFNBQVM7aUNBQ00sSUFBSSxZQUNOLGVBQWUsV0FDaEIsQ0FBQyxrQkFBa0IsRUFBRSxrQkFBa0IsRUFBRSxJQUFJLEVBQUUsU0FBUyxDQUFDLG1CQUdqRCx1QkFBdUIsQ0FBQyxNQUFNLGFBQ3BDO3dCQUNQLFVBQVUsQ0FBQyxhQUFhLGNBQWM7d0JBQ3RDOzRCQUNJLE9BQU8sRUFBRSxjQUFjOzRCQUN2QixJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksUUFBUSxFQUFFLEVBQUUsY0FBYyxDQUFDLENBQUM7NEJBQ3hDLFVBQVUsRUFBRSxDQUFDLEtBQWEsRUFBVSxFQUFFLENBQUMsRUFBRSxLQUFLO3lCQUNqRDtxQkFDSixRQUNLO3dCQUNGLElBQUksRUFBRSxVQUFVO3dCQUNoQixxQkFBcUIsRUFBRSxjQUFjO3FCQUN4Qzs4QkFJZ0IsTUFBTTtzQkFEdEIsZUFBZTt1QkFBQyxhQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QXN5bmNQaXBlLCBOZ0lmfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHR5cGUge0RvQ2hlY2ssIFF1ZXJ5TGlzdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICAgIENvbXBvbmVudCxcbiAgICBDb250ZW50Q2hpbGRyZW4sXG4gICAgZm9yd2FyZFJlZixcbiAgICBpbmplY3QsXG4gICAgU2tpcFNlbGYsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtFTVBUWV9RVUVSWX0gZnJvbSAnQHRhaWdhLXVpL2Nkay9jb25zdGFudHMnO1xuaW1wb3J0IHt0dWlJbmplY3RFbGVtZW50fSBmcm9tICdAdGFpZ2EtdWkvY2RrL3V0aWxzL2RvbSc7XG5pbXBvcnQge3R1aVByb3ZpZGV9IGZyb20gJ0B0YWlnYS11aS9jZGsvdXRpbHMvbWlzY2VsbGFuZW91cyc7XG5pbXBvcnQge1R1aUV4cGFuZENvbXBvbmVudH0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvY29tcG9uZW50cy9leHBhbmQnO1xuaW1wb3J0IHR5cGUge1BvbHltb3JwaGV1c0NvbnRlbnR9IGZyb20gJ0B0YWlnYS11aS9wb2x5bW9ycGhldXMnO1xuaW1wb3J0IHtQb2x5bW9ycGhldXNPdXRsZXR9IGZyb20gJ0B0YWlnYS11aS9wb2x5bW9ycGhldXMnO1xuaW1wb3J0IHtkaXN0aW5jdFVudGlsQ2hhbmdlZCwgbWFwLCBzdGFydFdpdGgsIFN1YmplY3R9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgdHlwZSB7VHVpVHJlZUNvbnRyb2xsZXIsIFR1aVRyZWVJdGVtQ29udGV4dH0gZnJvbSAnLi4vLi4vbWlzYy90cmVlLmludGVyZmFjZXMnO1xuaW1wb3J0IHtcbiAgICBUVUlfVFJFRV9DT05URU5ULFxuICAgIFRVSV9UUkVFX0NPTlRST0xMRVIsXG4gICAgVFVJX1RSRUVfTEVWRUwsXG4gICAgVFVJX1RSRUVfTk9ERSxcbn0gZnJvbSAnLi4vLi4vbWlzYy90cmVlLnRva2Vucyc7XG5cbkBDb21wb25lbnQoe1xuICAgIHN0YW5kYWxvbmU6IHRydWUsXG4gICAgc2VsZWN0b3I6ICd0dWktdHJlZS1pdGVtJyxcbiAgICBpbXBvcnRzOiBbUG9seW1vcnBoZXVzT3V0bGV0LCBUdWlFeHBhbmRDb21wb25lbnQsIE5nSWYsIEFzeW5jUGlwZV0sXG4gICAgdGVtcGxhdGVVcmw6ICcuL3RyZWUtaXRlbS50ZW1wbGF0ZS5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi90cmVlLWl0ZW0uc3R5bGUubGVzcyddLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICAgIHByb3ZpZGVyczogW1xuICAgICAgICB0dWlQcm92aWRlKFRVSV9UUkVFX05PREUsIFR1aVRyZWVJdGVtKSxcbiAgICAgICAge1xuICAgICAgICAgICAgcHJvdmlkZTogVFVJX1RSRUVfTEVWRUwsXG4gICAgICAgICAgICBkZXBzOiBbW25ldyBTa2lwU2VsZigpLCBUVUlfVFJFRV9MRVZFTF1dLFxuICAgICAgICAgICAgdXNlRmFjdG9yeTogKGxldmVsOiBudW1iZXIpOiBudW1iZXIgPT4gKytsZXZlbCxcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIGhvc3Q6IHtcbiAgICAgICAgcm9sZTogJ3RyZWVpdGVtJyxcbiAgICAgICAgJ1tjbGFzcy5fZXhwYW5kYWJsZV0nOiAnaXNFeHBhbmRhYmxlJyxcbiAgICB9LFxufSlcbmV4cG9ydCBjbGFzcyBUdWlUcmVlSXRlbSBpbXBsZW1lbnRzIERvQ2hlY2sge1xuICAgIEBDb250ZW50Q2hpbGRyZW4oVFVJX1RSRUVfTk9ERSBhcyBhbnkpXG4gICAgcHJpdmF0ZSByZWFkb25seSBuZXN0ZWQ6IFF1ZXJ5TGlzdDx1bmtub3duPiA9IEVNUFRZX1FVRVJZO1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSBlbCA9IHR1aUluamVjdEVsZW1lbnQoKTtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgY29udHJvbGxlciA9IGluamVjdDxUdWlUcmVlQ29udHJvbGxlcj4oXG4gICAgICAgIGZvcndhcmRSZWYoKCkgPT4gVFVJX1RSRUVfQ09OVFJPTExFUiksXG4gICAgKTtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgY2hhbmdlJCA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG5cbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgbGV2ZWwgPSBpbmplY3Q8bnVtYmVyPihmb3J3YXJkUmVmKCgpID0+IFRVSV9UUkVFX0xFVkVMKSk7XG5cbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgY29udGVudCA9IGluamVjdDxQb2x5bW9ycGhldXNDb250ZW50PFR1aVRyZWVJdGVtQ29udGV4dD4+KFxuICAgICAgICBmb3J3YXJkUmVmKCgpID0+IFRVSV9UUkVFX0NPTlRFTlQpLFxuICAgICk7XG5cbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgZXhwYW5kZWQkID0gdGhpcy5jaGFuZ2UkLnBpcGUoXG4gICAgICAgIHN0YXJ0V2l0aChudWxsKSxcbiAgICAgICAgbWFwKCgpID0+IHRoaXMuaXNFeHBhbmRlZCksXG4gICAgKTtcblxuICAgIHByb3RlY3RlZCByZWFkb25seSBhdHRhY2hlZCQgPSB0aGlzLmNoYW5nZSQucGlwZShcbiAgICAgICAgbWFwKCgpID0+IHRoaXMuZWwuaXNDb25uZWN0ZWQpLFxuICAgICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpLFxuICAgICk7XG5cbiAgICBwdWJsaWMgZ2V0IGlzRXhwYW5kYWJsZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5uZXN0ZWQubGVuZ3RoO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgaXNFeHBhbmRlZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udHJvbGxlci5pc0V4cGFuZGVkKHRoaXMpO1xuICAgIH1cblxuICAgIHB1YmxpYyBuZ0RvQ2hlY2soKTogdm9pZCB7XG4gICAgICAgIHRoaXMuY2hlY2tDaGFuZ2VzKCk7XG4gICAgfVxuXG4gICAgcHVibGljIGNoZWNrQ2hhbmdlcygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5jaGFuZ2UkLm5leHQoKTtcbiAgICB9XG59XG4iLCI8bmctdGVtcGxhdGUgI3RlbXBsYXRlPlxuICAgIDxuZy1jb250ZW50IC8+XG48L25nLXRlbXBsYXRlPlxuPG5nLWNvbnRhaW5lciAqcG9seW1vcnBoZXVzT3V0bGV0PVwiY29udGVudCBhcyB0ZXh0OyBjb250ZXh0OiB7JGltcGxpY2l0OiB0aGlzLCB0ZW1wbGF0ZTogdGVtcGxhdGV9XCI+XG4gICAge3sgdGV4dCB9fVxuPC9uZy1jb250YWluZXI+XG48dHVpLWV4cGFuZFxuICAgICpuZ0lmPVwiaXNFeHBhbmRhYmxlXCJcbiAgICByb2xlPVwiZ3JvdXBcIlxuICAgIGNsYXNzPVwidC1jaGlsZHJlblwiXG4gICAgW2V4cGFuZGVkXT1cImV4cGFuZGVkJCB8IGFzeW5jXCJcbj5cbiAgICA8ZGl2PlxuICAgICAgICA8bmctY29udGVudCBzZWxlY3Q9XCJ0dWktdHJlZS1pdGVtXCIgLz5cbiAgICAgICAgPG5nLWNvbnRlbnQgc2VsZWN0PVwidHVpLXRyZWVcIiAvPlxuICAgIDwvZGl2PlxuPC90dWktZXhwYW5kPlxuPG5nLWNvbnRhaW5lciAqbmdJZj1cImF0dGFjaGVkJCB8IGFzeW5jXCIgLz5cbiJdfQ==