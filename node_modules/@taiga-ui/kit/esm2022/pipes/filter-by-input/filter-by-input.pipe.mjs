import { __decorate } from "tslib";
import { inject, Pipe } from '@angular/core';
import { TUI_DEFAULT_MATCHER } from '@taiga-ui/cdk/constants';
import { tuiIsPresent, tuiPure } from '@taiga-ui/cdk/utils/miscellaneous';
import { TUI_DATA_LIST_HOST } from '@taiga-ui/core/components/data-list';
import { TuiTextfieldComponent } from '@taiga-ui/core/components/textfield';
import { tuiIsFlat } from '@taiga-ui/kit/utils';
import * as i0 from "@angular/core";
// TODO: Consider replacing TuiTextfieldComponent with proper token once we refactor textfields
class TuiFilterByInputPipe {
    constructor() {
        // TODO: Remove optional after legacy controls are dropped
        this.textfield = inject(TuiTextfieldComponent, { optional: true });
        this.host = inject(TUI_DATA_LIST_HOST);
    }
    transform(items, matcher = TUI_DEFAULT_MATCHER) {
        return this.filter(items, matcher, this.host.stringify || String, this.textfield?.el?.nativeElement.value ||
            this.host.nativeFocusableElement?.value ||
            '');
    }
    filter(items, matcher, stringify, query) {
        if (!items) {
            return null;
        }
        return tuiIsFlat(items)
            ? this.filterFlat(items, matcher, stringify, query)
            : this.filter2d(items, matcher, stringify, query);
    }
    filterFlat(items, matcher, stringify, query) {
        const match = this.getMatch(items, stringify, query);
        return tuiIsPresent(match)
            ? items
            : items.filter((item) => matcher(item, query, stringify));
    }
    filter2d(items, matcher, stringify, query) {
        const match = items.find((item) => tuiIsPresent(this.getMatch(item, stringify, query)));
        return tuiIsPresent(match)
            ? items
            : items.map((inner) => this.filterFlat(inner, matcher, stringify, query));
    }
    getMatch(items, stringify, query) {
        return items.find((item) => stringify(item).toLocaleLowerCase() === query.toLocaleLowerCase());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiFilterByInputPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "16.2.12", ngImport: i0, type: TuiFilterByInputPipe, isStandalone: true, name: "tuiFilterByInput", pure: false }); }
}
__decorate([
    tuiPure
], TuiFilterByInputPipe.prototype, "filter", null);
export { TuiFilterByInputPipe };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiFilterByInputPipe, decorators: [{
            type: Pipe,
            args: [{
                    standalone: true,
                    name: 'tuiFilterByInput',
                    pure: false,
                }]
        }], propDecorators: { filter: [] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLWJ5LWlucHV0LnBpcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9raXQvcGlwZXMvZmlsdGVyLWJ5LWlucHV0L2ZpbHRlci1ieS1pbnB1dC5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxPQUFPLEVBQUMsTUFBTSxFQUFFLElBQUksRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUU1RCxPQUFPLEVBQUMsWUFBWSxFQUFFLE9BQU8sRUFBQyxNQUFNLG1DQUFtQyxDQUFDO0FBQ3hFLE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLHFDQUFxQyxDQUFDO0FBQ3ZFLE9BQU8sRUFBQyxxQkFBcUIsRUFBQyxNQUFNLHFDQUFxQyxDQUFDO0FBQzFFLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQzs7QUFFOUMsK0ZBQStGO0FBQy9GLE1BS2Esb0JBQW9CO0lBTGpDO1FBTUksMERBQTBEO1FBQ3pDLGNBQVMsR0FBRyxNQUFNLENBQUMscUJBQXFCLEVBQUUsRUFBQyxRQUFRLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQztRQUM1RCxTQUFJLEdBQUcsTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUM7S0FzRXREO0lBbkVVLFNBQVMsQ0FDWixLQUF3RCxFQUN4RCxVQUErQixtQkFBbUI7UUFFbEQsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUNkLEtBQUssRUFDTCxPQUFPLEVBQ1AsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLElBQUksTUFBTSxFQUM3QixJQUFJLENBQUMsU0FBUyxFQUFFLEVBQUUsRUFBRSxhQUFhLENBQUMsS0FBSztZQUNsQyxJQUFJLENBQUMsSUFBWSxDQUFDLHNCQUFzQixFQUFFLEtBQUs7WUFDaEQsRUFBRSxDQUNULENBQUM7SUFDTixDQUFDO0lBR08sTUFBTSxDQUNWLEtBQXdELEVBQ3hELE9BQTRCLEVBQzVCLFNBQThCLEVBQzlCLEtBQWE7UUFFYixJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1IsT0FBTyxJQUFJLENBQUM7U0FDZjtRQUVELE9BQU8sU0FBUyxDQUFDLEtBQUssQ0FBQztZQUNuQixDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLENBQUM7WUFDbkQsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUVPLFVBQVUsQ0FDZCxLQUFtQixFQUNuQixPQUE0QixFQUM1QixTQUE4QixFQUM5QixLQUFhO1FBRWIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXJELE9BQU8sWUFBWSxDQUFDLEtBQUssQ0FBQztZQUN0QixDQUFDLENBQUMsS0FBSztZQUNQLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7SUFFTyxRQUFRLENBQ1osS0FBa0MsRUFDbEMsT0FBNEIsRUFDNUIsU0FBOEIsRUFDOUIsS0FBYTtRQUViLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUM5QixZQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQ3RELENBQUM7UUFFRixPQUFPLFlBQVksQ0FBQyxLQUFLLENBQUM7WUFDdEIsQ0FBQyxDQUFDLEtBQUs7WUFDUCxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ2xGLENBQUM7SUFFTyxRQUFRLENBQ1osS0FBbUIsRUFDbkIsU0FBOEIsRUFDOUIsS0FBYTtRQUViLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FDYixDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLGlCQUFpQixFQUFFLEtBQUssS0FBSyxDQUFDLGlCQUFpQixFQUFFLENBQzlFLENBQUM7SUFDTixDQUFDOytHQXhFUSxvQkFBb0I7NkdBQXBCLG9CQUFvQjs7QUFxQnJCO0lBRFAsT0FBTztrREFjUDtTQWxDUSxvQkFBb0I7NEZBQXBCLG9CQUFvQjtrQkFMaEMsSUFBSTttQkFBQztvQkFDRixVQUFVLEVBQUUsSUFBSTtvQkFDaEIsSUFBSSxFQUFFLGtCQUFrQjtvQkFDeEIsSUFBSSxFQUFFLEtBQUs7aUJBQ2Q7OEJBc0JXLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7UGlwZVRyYW5zZm9ybX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge2luamVjdCwgUGlwZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1RVSV9ERUZBVUxUX01BVENIRVJ9IGZyb20gJ0B0YWlnYS11aS9jZGsvY29uc3RhbnRzJztcbmltcG9ydCB0eXBlIHtUdWlTdHJpbmdIYW5kbGVyLCBUdWlTdHJpbmdNYXRjaGVyfSBmcm9tICdAdGFpZ2EtdWkvY2RrL3R5cGVzJztcbmltcG9ydCB7dHVpSXNQcmVzZW50LCB0dWlQdXJlfSBmcm9tICdAdGFpZ2EtdWkvY2RrL3V0aWxzL21pc2NlbGxhbmVvdXMnO1xuaW1wb3J0IHtUVUlfREFUQV9MSVNUX0hPU1R9IGZyb20gJ0B0YWlnYS11aS9jb3JlL2NvbXBvbmVudHMvZGF0YS1saXN0JztcbmltcG9ydCB7VHVpVGV4dGZpZWxkQ29tcG9uZW50fSBmcm9tICdAdGFpZ2EtdWkvY29yZS9jb21wb25lbnRzL3RleHRmaWVsZCc7XG5pbXBvcnQge3R1aUlzRmxhdH0gZnJvbSAnQHRhaWdhLXVpL2tpdC91dGlscyc7XG5cbi8vIFRPRE86IENvbnNpZGVyIHJlcGxhY2luZyBUdWlUZXh0ZmllbGRDb21wb25lbnQgd2l0aCBwcm9wZXIgdG9rZW4gb25jZSB3ZSByZWZhY3RvciB0ZXh0ZmllbGRzXG5AUGlwZSh7XG4gICAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgICBuYW1lOiAndHVpRmlsdGVyQnlJbnB1dCcsXG4gICAgcHVyZTogZmFsc2UsXG59KVxuZXhwb3J0IGNsYXNzIFR1aUZpbHRlckJ5SW5wdXRQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gICAgLy8gVE9ETzogUmVtb3ZlIG9wdGlvbmFsIGFmdGVyIGxlZ2FjeSBjb250cm9scyBhcmUgZHJvcHBlZFxuICAgIHByaXZhdGUgcmVhZG9ubHkgdGV4dGZpZWxkID0gaW5qZWN0KFR1aVRleHRmaWVsZENvbXBvbmVudCwge29wdGlvbmFsOiB0cnVlfSk7XG4gICAgcHJpdmF0ZSByZWFkb25seSBob3N0ID0gaW5qZWN0KFRVSV9EQVRBX0xJU1RfSE9TVCk7XG5cbiAgICBwdWJsaWMgdHJhbnNmb3JtPFQ+KGl0ZW1zOiByZWFkb25seSBUW10sIG1hdGNoZXI/OiBUdWlTdHJpbmdNYXRjaGVyPFQ+KTogcmVhZG9ubHkgVFtdO1xuICAgIHB1YmxpYyB0cmFuc2Zvcm08VD4oXG4gICAgICAgIGl0ZW1zOiBSZWFkb25seUFycmF5PHJlYWRvbmx5IFRbXT4gfCByZWFkb25seSBUW10gfCBudWxsLFxuICAgICAgICBtYXRjaGVyOiBUdWlTdHJpbmdNYXRjaGVyPFQ+ID0gVFVJX0RFRkFVTFRfTUFUQ0hFUixcbiAgICApOiBSZWFkb25seUFycmF5PHJlYWRvbmx5IFRbXT4gfCByZWFkb25seSBUW10gfCBudWxsIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyPFQ+KFxuICAgICAgICAgICAgaXRlbXMsXG4gICAgICAgICAgICBtYXRjaGVyLFxuICAgICAgICAgICAgdGhpcy5ob3N0LnN0cmluZ2lmeSB8fCBTdHJpbmcsXG4gICAgICAgICAgICB0aGlzLnRleHRmaWVsZD8uZWw/Lm5hdGl2ZUVsZW1lbnQudmFsdWUgfHxcbiAgICAgICAgICAgICAgICAodGhpcy5ob3N0IGFzIGFueSkubmF0aXZlRm9jdXNhYmxlRWxlbWVudD8udmFsdWUgfHxcbiAgICAgICAgICAgICAgICAnJyxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBAdHVpUHVyZVxuICAgIHByaXZhdGUgZmlsdGVyPFQ+KFxuICAgICAgICBpdGVtczogUmVhZG9ubHlBcnJheTxyZWFkb25seSBUW10+IHwgcmVhZG9ubHkgVFtdIHwgbnVsbCxcbiAgICAgICAgbWF0Y2hlcjogVHVpU3RyaW5nTWF0Y2hlcjxUPixcbiAgICAgICAgc3RyaW5naWZ5OiBUdWlTdHJpbmdIYW5kbGVyPFQ+LFxuICAgICAgICBxdWVyeTogc3RyaW5nLFxuICAgICk6IFJlYWRvbmx5QXJyYXk8cmVhZG9ubHkgVFtdPiB8IHJlYWRvbmx5IFRbXSB8IG51bGwge1xuICAgICAgICBpZiAoIWl0ZW1zKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0dWlJc0ZsYXQoaXRlbXMpXG4gICAgICAgICAgICA/IHRoaXMuZmlsdGVyRmxhdChpdGVtcywgbWF0Y2hlciwgc3RyaW5naWZ5LCBxdWVyeSlcbiAgICAgICAgICAgIDogdGhpcy5maWx0ZXIyZChpdGVtcywgbWF0Y2hlciwgc3RyaW5naWZ5LCBxdWVyeSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBmaWx0ZXJGbGF0PFQ+KFxuICAgICAgICBpdGVtczogcmVhZG9ubHkgVFtdLFxuICAgICAgICBtYXRjaGVyOiBUdWlTdHJpbmdNYXRjaGVyPFQ+LFxuICAgICAgICBzdHJpbmdpZnk6IFR1aVN0cmluZ0hhbmRsZXI8VD4sXG4gICAgICAgIHF1ZXJ5OiBzdHJpbmcsXG4gICAgKTogcmVhZG9ubHkgVFtdIHtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSB0aGlzLmdldE1hdGNoKGl0ZW1zLCBzdHJpbmdpZnksIHF1ZXJ5KTtcblxuICAgICAgICByZXR1cm4gdHVpSXNQcmVzZW50KG1hdGNoKVxuICAgICAgICAgICAgPyBpdGVtc1xuICAgICAgICAgICAgOiBpdGVtcy5maWx0ZXIoKGl0ZW0pID0+IG1hdGNoZXIoaXRlbSwgcXVlcnksIHN0cmluZ2lmeSkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZmlsdGVyMmQ8VD4oXG4gICAgICAgIGl0ZW1zOiBSZWFkb25seUFycmF5PHJlYWRvbmx5IFRbXT4sXG4gICAgICAgIG1hdGNoZXI6IFR1aVN0cmluZ01hdGNoZXI8VD4sXG4gICAgICAgIHN0cmluZ2lmeTogVHVpU3RyaW5nSGFuZGxlcjxUPixcbiAgICAgICAgcXVlcnk6IHN0cmluZyxcbiAgICApOiBSZWFkb25seUFycmF5PHJlYWRvbmx5IFRbXT4ge1xuICAgICAgICBjb25zdCBtYXRjaCA9IGl0ZW1zLmZpbmQoKGl0ZW0pID0+XG4gICAgICAgICAgICB0dWlJc1ByZXNlbnQodGhpcy5nZXRNYXRjaChpdGVtLCBzdHJpbmdpZnksIHF1ZXJ5KSksXG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIHR1aUlzUHJlc2VudChtYXRjaClcbiAgICAgICAgICAgID8gaXRlbXNcbiAgICAgICAgICAgIDogaXRlbXMubWFwKChpbm5lcikgPT4gdGhpcy5maWx0ZXJGbGF0KGlubmVyLCBtYXRjaGVyLCBzdHJpbmdpZnksIHF1ZXJ5KSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRNYXRjaDxUPihcbiAgICAgICAgaXRlbXM6IHJlYWRvbmx5IFRbXSxcbiAgICAgICAgc3RyaW5naWZ5OiBUdWlTdHJpbmdIYW5kbGVyPFQ+LFxuICAgICAgICBxdWVyeTogc3RyaW5nLFxuICAgICk6IFQgfCB1bmRlZmluZWQge1xuICAgICAgICByZXR1cm4gaXRlbXMuZmluZChcbiAgICAgICAgICAgIChpdGVtKSA9PiBzdHJpbmdpZnkoaXRlbSkudG9Mb2NhbGVMb3dlckNhc2UoKSA9PT0gcXVlcnkudG9Mb2NhbGVMb3dlckNhc2UoKSxcbiAgICAgICAgKTtcbiAgICB9XG59XG4iXX0=