import { Directive, inject, Input } from '@angular/core';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { IntersectionObserverService } from '@ng-web-apis/intersection-observer';
import { tuiInjectElement } from '@taiga-ui/cdk/utils/dom';
import { TuiLazyLoadingService } from './lazy-loading.service';
import * as i0 from "@angular/core";
class TuiImgLazyLoading {
    constructor() {
        this.el = tuiInjectElement();
        this.src$ = inject(TuiLazyLoadingService);
        this.animation = 'tuiSkeletonVibe ease-in-out 1s infinite alternate';
        this.background = 'var(--tui-background-neutral-2)';
        this.src = null;
        if (this.supported) {
            return;
        }
        this.src$.pipe(takeUntilDestroyed()).subscribe((src) => {
            this.src = src;
        });
    }
    set srcSetter(src) {
        this.src = this.supported ? src : null;
        this.src$.next(src);
    }
    onLoad() {
        this.background = '';
        this.animation = '';
    }
    get supported() {
        return 'loading' in this.el;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiImgLazyLoading, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiImgLazyLoading, isStandalone: true, selector: "img[loading=\"lazy\"]", inputs: { srcSetter: ["src", "srcSetter"] }, host: { listeners: { "load": "onLoad()" }, properties: { "style.animation": "animation", "style.background": "background", "attr.src": "src" } }, providers: [TuiLazyLoadingService, IntersectionObserverService], ngImport: i0 }); }
}
export { TuiImgLazyLoading };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiImgLazyLoading, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: 'img[loading="lazy"]',
                    providers: [TuiLazyLoadingService, IntersectionObserverService],
                    host: {
                        '[style.animation]': 'animation',
                        '[style.background]': 'background',
                        '[attr.src]': 'src',
                        '(load)': 'onLoad()',
                    },
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { srcSetter: [{
                type: Input,
                args: ['src']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF6eS1sb2FkaW5nLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC9kaXJlY3RpdmVzL2xhenktbG9hZGluZy9sYXp5LWxvYWRpbmcuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN2RCxPQUFPLEVBQUMsa0JBQWtCLEVBQUMsTUFBTSw0QkFBNEIsQ0FBQztBQUU5RCxPQUFPLEVBQUMsMkJBQTJCLEVBQUMsTUFBTSxvQ0FBb0MsQ0FBQztBQUMvRSxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUV6RCxPQUFPLEVBQUMscUJBQXFCLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQzs7QUFFN0QsTUFXYSxpQkFBaUI7SUFPMUI7UUFOaUIsT0FBRSxHQUFHLGdCQUFnQixFQUFvQixDQUFDO1FBQzFDLFNBQUksR0FBRyxNQUFNLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUM1QyxjQUFTLEdBQUcsbURBQW1ELENBQUM7UUFDaEUsZUFBVSxHQUFHLGlDQUFpQyxDQUFDO1FBQy9DLFFBQUcsR0FBb0MsSUFBSSxDQUFDO1FBR2xELElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNoQixPQUFPO1NBQ1Y7UUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7WUFDbkQsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDbkIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsSUFDVyxTQUFTLENBQUMsR0FBNkI7UUFDOUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUN2QyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN4QixDQUFDO0lBRVMsTUFBTTtRQUNaLElBQUksQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO0lBQ3hCLENBQUM7SUFFRCxJQUFZLFNBQVM7UUFDakIsT0FBTyxTQUFTLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQztJQUNoQyxDQUFDOytHQTlCUSxpQkFBaUI7bUdBQWpCLGlCQUFpQixtUUFSZixDQUFDLHFCQUFxQixFQUFFLDJCQUEyQixDQUFDOztTQVF0RCxpQkFBaUI7NEZBQWpCLGlCQUFpQjtrQkFYN0IsU0FBUzttQkFBQztvQkFDUCxVQUFVLEVBQUUsSUFBSTtvQkFDaEIsUUFBUSxFQUFFLHFCQUFxQjtvQkFDL0IsU0FBUyxFQUFFLENBQUMscUJBQXFCLEVBQUUsMkJBQTJCLENBQUM7b0JBQy9ELElBQUksRUFBRTt3QkFDRixtQkFBbUIsRUFBRSxXQUFXO3dCQUNoQyxvQkFBb0IsRUFBRSxZQUFZO3dCQUNsQyxZQUFZLEVBQUUsS0FBSzt3QkFDbkIsUUFBUSxFQUFFLFVBQVU7cUJBQ3ZCO2lCQUNKOzBFQW1CYyxTQUFTO3NCQURuQixLQUFLO3VCQUFDLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgaW5qZWN0LCBJbnB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge3Rha2VVbnRpbERlc3Ryb3llZH0gZnJvbSAnQGFuZ3VsYXIvY29yZS9yeGpzLWludGVyb3AnO1xuaW1wb3J0IHR5cGUge1NhZmVSZXNvdXJjZVVybH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5pbXBvcnQge0ludGVyc2VjdGlvbk9ic2VydmVyU2VydmljZX0gZnJvbSAnQG5nLXdlYi1hcGlzL2ludGVyc2VjdGlvbi1vYnNlcnZlcic7XG5pbXBvcnQge3R1aUluamVjdEVsZW1lbnR9IGZyb20gJ0B0YWlnYS11aS9jZGsvdXRpbHMvZG9tJztcblxuaW1wb3J0IHtUdWlMYXp5TG9hZGluZ1NlcnZpY2V9IGZyb20gJy4vbGF6eS1sb2FkaW5nLnNlcnZpY2UnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzdGFuZGFsb25lOiB0cnVlLFxuICAgIHNlbGVjdG9yOiAnaW1nW2xvYWRpbmc9XCJsYXp5XCJdJyxcbiAgICBwcm92aWRlcnM6IFtUdWlMYXp5TG9hZGluZ1NlcnZpY2UsIEludGVyc2VjdGlvbk9ic2VydmVyU2VydmljZV0sXG4gICAgaG9zdDoge1xuICAgICAgICAnW3N0eWxlLmFuaW1hdGlvbl0nOiAnYW5pbWF0aW9uJyxcbiAgICAgICAgJ1tzdHlsZS5iYWNrZ3JvdW5kXSc6ICdiYWNrZ3JvdW5kJyxcbiAgICAgICAgJ1thdHRyLnNyY10nOiAnc3JjJyxcbiAgICAgICAgJyhsb2FkKSc6ICdvbkxvYWQoKScsXG4gICAgfSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpSW1nTGF6eUxvYWRpbmcge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZWwgPSB0dWlJbmplY3RFbGVtZW50PEhUTUxJbWFnZUVsZW1lbnQ+KCk7XG4gICAgcHJpdmF0ZSByZWFkb25seSBzcmMkID0gaW5qZWN0KFR1aUxhenlMb2FkaW5nU2VydmljZSk7XG4gICAgcHJvdGVjdGVkIGFuaW1hdGlvbiA9ICd0dWlTa2VsZXRvblZpYmUgZWFzZS1pbi1vdXQgMXMgaW5maW5pdGUgYWx0ZXJuYXRlJztcbiAgICBwcm90ZWN0ZWQgYmFja2dyb3VuZCA9ICd2YXIoLS10dWktYmFja2dyb3VuZC1uZXV0cmFsLTIpJztcbiAgICBwcm90ZWN0ZWQgc3JjOiBTYWZlUmVzb3VyY2VVcmwgfCBzdHJpbmcgfCBudWxsID0gbnVsbDtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBpZiAodGhpcy5zdXBwb3J0ZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc3JjJC5waXBlKHRha2VVbnRpbERlc3Ryb3llZCgpKS5zdWJzY3JpYmUoKHNyYykgPT4ge1xuICAgICAgICAgICAgdGhpcy5zcmMgPSBzcmM7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIEBJbnB1dCgnc3JjJylcbiAgICBwdWJsaWMgc2V0IHNyY1NldHRlcihzcmM6IFNhZmVSZXNvdXJjZVVybCB8IHN0cmluZykge1xuICAgICAgICB0aGlzLnNyYyA9IHRoaXMuc3VwcG9ydGVkID8gc3JjIDogbnVsbDtcbiAgICAgICAgdGhpcy5zcmMkLm5leHQoc3JjKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgb25Mb2FkKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmJhY2tncm91bmQgPSAnJztcbiAgICAgICAgdGhpcy5hbmltYXRpb24gPSAnJztcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldCBzdXBwb3J0ZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAnbG9hZGluZycgaW4gdGhpcy5lbDtcbiAgICB9XG59XG4iXX0=