import { inject, NgZone } from '@angular/core';
import { asyncScheduler, } from 'rxjs';
import { Observable, pipe } from 'rxjs';
export function tuiZonefull(zone = inject(NgZone)) {
    return (source) => new Observable((subscriber) => source.subscribe({
        next: (value) => zone.run(() => subscriber.next(value)),
        error: (error) => zone.run(() => subscriber.error(error)),
        complete: () => zone.run(() => subscriber.complete()),
    }));
}
export function tuiZonefree(zone = inject(NgZone)) {
    return (source) => new Observable((subscriber) => zone.runOutsideAngular(() => source.subscribe(subscriber)));
}
export function tuiZoneOptimized(zone = inject(NgZone)) {
    return pipe(tuiZonefree(zone), tuiZonefull(zone));
}
class TuiZoneScheduler {
    constructor(zoneConditionFn, scheduler = asyncScheduler) {
        this.zoneConditionFn = zoneConditionFn;
        this.scheduler = scheduler;
    }
    now() {
        return this.scheduler.now();
    }
    schedule(...args) {
        return this.zoneConditionFn(() => this.scheduler.schedule(...args));
    }
}
export function tuiZonefreeScheduler(zone = inject(NgZone), scheduler = asyncScheduler) {
    return new TuiZoneScheduler(zone.runOutsideAngular.bind(zone), scheduler);
}
export function tuiZonefullScheduler(zone = inject(NgZone), scheduler = asyncScheduler) {
    return new TuiZoneScheduler(zone.run.bind(zone), scheduler);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiem9uZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL2Nkay9vYnNlcnZhYmxlcy96b25lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxNQUFNLEVBQUUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzdDLE9BQU8sRUFDSCxjQUFjLEdBSWpCLE1BQU0sTUFBTSxDQUFDO0FBQ2QsT0FBTyxFQUFDLFVBQVUsRUFBRSxJQUFJLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFFdEMsTUFBTSxVQUFVLFdBQVcsQ0FBSSxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNoRCxPQUFPLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FDZCxJQUFJLFVBQVUsQ0FBQyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQzFCLE1BQU0sQ0FBQyxTQUFTLENBQUM7UUFDYixJQUFJLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN2RCxLQUFLLEVBQUUsQ0FBQyxLQUFjLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNsRSxRQUFRLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUM7S0FDeEQsQ0FBQyxDQUNMLENBQUM7QUFDVixDQUFDO0FBRUQsTUFBTSxVQUFVLFdBQVcsQ0FBSSxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNoRCxPQUFPLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FDZCxJQUFJLFVBQVUsQ0FBQyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQzFCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQzdELENBQUM7QUFDVixDQUFDO0FBRUQsTUFBTSxVQUFVLGdCQUFnQixDQUFJLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQ3JELE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRSxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBRUQsTUFBTSxnQkFBZ0I7SUFDbEIsWUFDcUIsZUFBd0QsRUFDeEQsWUFBMkIsY0FBYztRQUR6QyxvQkFBZSxHQUFmLGVBQWUsQ0FBeUM7UUFDeEQsY0FBUyxHQUFULFNBQVMsQ0FBZ0M7SUFDM0QsQ0FBQztJQUVHLEdBQUc7UUFDTixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDaEMsQ0FBQztJQUVNLFFBQVEsQ0FBQyxHQUFHLElBQTJDO1FBQzFELE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDeEUsQ0FBQztDQUNKO0FBRUQsTUFBTSxVQUFVLG9CQUFvQixDQUNoQyxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUNyQixZQUEyQixjQUFjO0lBRXpDLE9BQU8sSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQzlFLENBQUM7QUFFRCxNQUFNLFVBQVUsb0JBQW9CLENBQ2hDLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQ3JCLFlBQTJCLGNBQWM7SUFFekMsT0FBTyxJQUFJLGdCQUFnQixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ2hFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2luamVjdCwgTmdab25lfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gICAgYXN5bmNTY2hlZHVsZXIsXG4gICAgdHlwZSBNb25vVHlwZU9wZXJhdG9yRnVuY3Rpb24sXG4gICAgdHlwZSBTY2hlZHVsZXJMaWtlLFxuICAgIHR5cGUgU3Vic2NyaXB0aW9uLFxufSBmcm9tICdyeGpzJztcbmltcG9ydCB7T2JzZXJ2YWJsZSwgcGlwZX0gZnJvbSAncnhqcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiB0dWlab25lZnVsbDxUPih6b25lID0gaW5qZWN0KE5nWm9uZSkpOiBNb25vVHlwZU9wZXJhdG9yRnVuY3Rpb248VD4ge1xuICAgIHJldHVybiAoc291cmNlKSA9PlxuICAgICAgICBuZXcgT2JzZXJ2YWJsZSgoc3Vic2NyaWJlcikgPT5cbiAgICAgICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoe1xuICAgICAgICAgICAgICAgIG5leHQ6ICh2YWx1ZSkgPT4gem9uZS5ydW4oKCkgPT4gc3Vic2NyaWJlci5uZXh0KHZhbHVlKSksXG4gICAgICAgICAgICAgICAgZXJyb3I6IChlcnJvcjogdW5rbm93bikgPT4gem9uZS5ydW4oKCkgPT4gc3Vic2NyaWJlci5lcnJvcihlcnJvcikpLFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlOiAoKSA9PiB6b25lLnJ1bigoKSA9PiBzdWJzY3JpYmVyLmNvbXBsZXRlKCkpLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0dWlab25lZnJlZTxUPih6b25lID0gaW5qZWN0KE5nWm9uZSkpOiBNb25vVHlwZU9wZXJhdG9yRnVuY3Rpb248VD4ge1xuICAgIHJldHVybiAoc291cmNlKSA9PlxuICAgICAgICBuZXcgT2JzZXJ2YWJsZSgoc3Vic2NyaWJlcikgPT5cbiAgICAgICAgICAgIHpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4gc291cmNlLnN1YnNjcmliZShzdWJzY3JpYmVyKSksXG4gICAgICAgICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0dWlab25lT3B0aW1pemVkPFQ+KHpvbmUgPSBpbmplY3QoTmdab25lKSk6IE1vbm9UeXBlT3BlcmF0b3JGdW5jdGlvbjxUPiB7XG4gICAgcmV0dXJuIHBpcGUodHVpWm9uZWZyZWUoem9uZSksIHR1aVpvbmVmdWxsKHpvbmUpKTtcbn1cblxuY2xhc3MgVHVpWm9uZVNjaGVkdWxlciBpbXBsZW1lbnRzIFNjaGVkdWxlckxpa2Uge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHpvbmVDb25kaXRpb25GbjogPFQ+KGZuOiAoLi4uYXJnczogdW5rbm93bltdKSA9PiBUKSA9PiBULFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHNjaGVkdWxlcjogU2NoZWR1bGVyTGlrZSA9IGFzeW5jU2NoZWR1bGVyLFxuICAgICkge31cblxuICAgIHB1YmxpYyBub3coKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2NoZWR1bGVyLm5vdygpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzY2hlZHVsZSguLi5hcmdzOiBQYXJhbWV0ZXJzPFNjaGVkdWxlckxpa2VbJ3NjaGVkdWxlJ10+KTogU3Vic2NyaXB0aW9uIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuem9uZUNvbmRpdGlvbkZuKCgpID0+IHRoaXMuc2NoZWR1bGVyLnNjaGVkdWxlKC4uLmFyZ3MpKTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0dWlab25lZnJlZVNjaGVkdWxlcihcbiAgICB6b25lID0gaW5qZWN0KE5nWm9uZSksXG4gICAgc2NoZWR1bGVyOiBTY2hlZHVsZXJMaWtlID0gYXN5bmNTY2hlZHVsZXIsXG4pOiBTY2hlZHVsZXJMaWtlIHtcbiAgICByZXR1cm4gbmV3IFR1aVpvbmVTY2hlZHVsZXIoem9uZS5ydW5PdXRzaWRlQW5ndWxhci5iaW5kKHpvbmUpLCBzY2hlZHVsZXIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHVpWm9uZWZ1bGxTY2hlZHVsZXIoXG4gICAgem9uZSA9IGluamVjdChOZ1pvbmUpLFxuICAgIHNjaGVkdWxlcjogU2NoZWR1bGVyTGlrZSA9IGFzeW5jU2NoZWR1bGVyLFxuKTogU2NoZWR1bGVyTGlrZSB7XG4gICAgcmV0dXJuIG5ldyBUdWlab25lU2NoZWR1bGVyKHpvbmUucnVuLmJpbmQoem9uZSksIHNjaGVkdWxlcik7XG59XG4iXX0=