/// <reference types="@taiga-ui/tsconfig/ng-dev-mode" />
/// <reference types="@taiga-ui/tsconfig/ng-dev-mode" />
import { inject, Injectable } from '@angular/core';
import { WA_ANIMATION_FRAME, WA_PERFORMANCE } from '@ng-web-apis/common';
import { tuiClamp } from '@taiga-ui/cdk/utils/math';
import { tuiEaseInOutQuad } from '@taiga-ui/cdk/utils/miscellaneous';
import { defer, endWith, map, of, switchMap, takeUntil, tap, timer } from 'rxjs';
import * as i0 from "@angular/core";
const SCROLL_TIME = 300;
function getX(elementOrWindow) {
    return 'scrollX' in elementOrWindow
        ? elementOrWindow.scrollX
        : elementOrWindow.scrollLeft;
}
function getY(elementOrWindow) {
    return 'scrollY' in elementOrWindow
        ? elementOrWindow.scrollY
        : elementOrWindow.scrollTop;
}
class TuiScrollService {
    constructor() {
        this.performanceRef = inject(WA_PERFORMANCE);
        this.animationFrame$ = inject(WA_ANIMATION_FRAME);
    }
    scroll$(elementOrWindow, scrollTop, scrollLeft = getX(elementOrWindow), duration = SCROLL_TIME) {
        ngDevMode && console.assert(duration >= 0, 'duration cannot be negative');
        ngDevMode && console.assert(scrollTop >= 0, 'scrollTop cannot be negative');
        ngDevMode && console.assert(scrollLeft >= 0, 'scrollLeft cannot be negative');
        const initialTop = getY(elementOrWindow);
        const initialLeft = getX(elementOrWindow);
        const deltaTop = scrollTop - initialTop;
        const deltaLeft = scrollLeft - initialLeft;
        const observable = !duration
            ? of([scrollTop, scrollLeft])
            : defer(() => of(this.performanceRef.now())).pipe(switchMap((start) => this.animationFrame$.pipe(map((now) => now - start))), map((elapsed) => tuiEaseInOutQuad(tuiClamp(elapsed / duration, 0, 1))), map((percent) => [
                initialTop + deltaTop * percent,
                initialLeft + deltaLeft * percent,
            ]), takeUntil(timer(duration)), endWith([scrollTop, scrollLeft]));
        return observable.pipe(tap(([scrollTop, scrollLeft]) => {
            elementOrWindow.scrollTo?.(scrollLeft, scrollTop);
        }));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiScrollService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiScrollService, providedIn: 'root' }); }
}
export { TuiScrollService };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiScrollService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9jZGsvc2VydmljZXMvc2Nyb2xsLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0RBQXdEO0FBQXhELHdEQUF3RDtBQUN4RCxPQUFPLEVBQUMsTUFBTSxFQUFFLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNqRCxPQUFPLEVBQUMsa0JBQWtCLEVBQUUsY0FBYyxFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFDdkUsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBQ2xELE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLG1DQUFtQyxDQUFDO0FBRW5FLE9BQU8sRUFBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFDLE1BQU0sTUFBTSxDQUFDOztBQUUvRSxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFFeEIsU0FBUyxJQUFJLENBQUMsZUFBaUM7SUFDM0MsT0FBTyxTQUFTLElBQUksZUFBZTtRQUMvQixDQUFDLENBQUMsZUFBZSxDQUFDLE9BQU87UUFDekIsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUM7QUFDckMsQ0FBQztBQUVELFNBQVMsSUFBSSxDQUFDLGVBQWlDO0lBQzNDLE9BQU8sU0FBUyxJQUFJLGVBQWU7UUFDL0IsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxPQUFPO1FBQ3pCLENBQUMsQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDO0FBQ3BDLENBQUM7QUFFRCxNQUdhLGdCQUFnQjtJQUg3QjtRQUlxQixtQkFBYyxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUN4QyxvQkFBZSxHQUFHLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0tBcUNqRTtJQW5DVSxPQUFPLENBQ1YsZUFBaUMsRUFDakMsU0FBaUIsRUFDakIsYUFBcUIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxFQUMxQyxXQUFtQixXQUFXO1FBRTlCLFNBQVMsSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLFFBQVEsSUFBSSxDQUFDLEVBQUUsNkJBQTZCLENBQUMsQ0FBQztRQUMxRSxTQUFTLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxTQUFTLElBQUksQ0FBQyxFQUFFLDhCQUE4QixDQUFDLENBQUM7UUFDNUUsU0FBUyxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBVSxJQUFJLENBQUMsRUFBRSwrQkFBK0IsQ0FBQyxDQUFDO1FBRTlFLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUN6QyxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDMUMsTUFBTSxRQUFRLEdBQUcsU0FBUyxHQUFHLFVBQVUsQ0FBQztRQUN4QyxNQUFNLFNBQVMsR0FBRyxVQUFVLEdBQUcsV0FBVyxDQUFDO1FBQzNDLE1BQU0sVUFBVSxHQUFHLENBQUMsUUFBUTtZQUN4QixDQUFDLENBQUMsRUFBRSxDQUFtQixDQUFDLFNBQVMsRUFBRSxVQUFVLENBQUMsQ0FBQztZQUMvQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQzNDLFNBQVMsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQ2hCLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQ3ZELEVBQ0QsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsT0FBTyxHQUFHLFFBQVEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUN0RSxHQUFHLENBQTJCLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQztnQkFDdkMsVUFBVSxHQUFHLFFBQVEsR0FBRyxPQUFPO2dCQUMvQixXQUFXLEdBQUcsU0FBUyxHQUFHLE9BQU87YUFDcEMsQ0FBQyxFQUNGLFNBQVMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsRUFDMUIsT0FBTyxDQUFtQixDQUFDLFNBQVMsRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUNyRCxDQUFDO1FBRVIsT0FBTyxVQUFVLENBQUMsSUFBSSxDQUNsQixHQUFHLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxVQUFVLENBQUMsRUFBRSxFQUFFO1lBQzVCLGVBQWUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDdEQsQ0FBQyxDQUFDLENBQ0wsQ0FBQztJQUNOLENBQUM7K0dBdENRLGdCQUFnQjttSEFBaEIsZ0JBQWdCLGNBRmIsTUFBTTs7U0FFVCxnQkFBZ0I7NEZBQWhCLGdCQUFnQjtrQkFINUIsVUFBVTttQkFBQztvQkFDUixVQUFVLEVBQUUsTUFBTTtpQkFDckIiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSB0eXBlcz1cIkB0YWlnYS11aS90c2NvbmZpZy9uZy1kZXYtbW9kZVwiIC8+XG5pbXBvcnQge2luamVjdCwgSW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1dBX0FOSU1BVElPTl9GUkFNRSwgV0FfUEVSRk9STUFOQ0V9IGZyb20gJ0BuZy13ZWItYXBpcy9jb21tb24nO1xuaW1wb3J0IHt0dWlDbGFtcH0gZnJvbSAnQHRhaWdhLXVpL2Nkay91dGlscy9tYXRoJztcbmltcG9ydCB7dHVpRWFzZUluT3V0UXVhZH0gZnJvbSAnQHRhaWdhLXVpL2Nkay91dGlscy9taXNjZWxsYW5lb3VzJztcbmltcG9ydCB0eXBlIHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7ZGVmZXIsIGVuZFdpdGgsIG1hcCwgb2YsIHN3aXRjaE1hcCwgdGFrZVVudGlsLCB0YXAsIHRpbWVyfSBmcm9tICdyeGpzJztcblxuY29uc3QgU0NST0xMX1RJTUUgPSAzMDA7XG5cbmZ1bmN0aW9uIGdldFgoZWxlbWVudE9yV2luZG93OiBFbGVtZW50IHwgV2luZG93KTogbnVtYmVyIHtcbiAgICByZXR1cm4gJ3Njcm9sbFgnIGluIGVsZW1lbnRPcldpbmRvd1xuICAgICAgICA/IGVsZW1lbnRPcldpbmRvdy5zY3JvbGxYXG4gICAgICAgIDogZWxlbWVudE9yV2luZG93LnNjcm9sbExlZnQ7XG59XG5cbmZ1bmN0aW9uIGdldFkoZWxlbWVudE9yV2luZG93OiBFbGVtZW50IHwgV2luZG93KTogbnVtYmVyIHtcbiAgICByZXR1cm4gJ3Njcm9sbFknIGluIGVsZW1lbnRPcldpbmRvd1xuICAgICAgICA/IGVsZW1lbnRPcldpbmRvdy5zY3JvbGxZXG4gICAgICAgIDogZWxlbWVudE9yV2luZG93LnNjcm9sbFRvcDtcbn1cblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgVHVpU2Nyb2xsU2VydmljZSB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBwZXJmb3JtYW5jZVJlZiA9IGluamVjdChXQV9QRVJGT1JNQU5DRSk7XG4gICAgcHJpdmF0ZSByZWFkb25seSBhbmltYXRpb25GcmFtZSQgPSBpbmplY3QoV0FfQU5JTUFUSU9OX0ZSQU1FKTtcblxuICAgIHB1YmxpYyBzY3JvbGwkKFxuICAgICAgICBlbGVtZW50T3JXaW5kb3c6IEVsZW1lbnQgfCBXaW5kb3csXG4gICAgICAgIHNjcm9sbFRvcDogbnVtYmVyLFxuICAgICAgICBzY3JvbGxMZWZ0OiBudW1iZXIgPSBnZXRYKGVsZW1lbnRPcldpbmRvdyksXG4gICAgICAgIGR1cmF0aW9uOiBudW1iZXIgPSBTQ1JPTExfVElNRSxcbiAgICApOiBPYnNlcnZhYmxlPFtudW1iZXIsIG51bWJlcl0+IHtcbiAgICAgICAgbmdEZXZNb2RlICYmIGNvbnNvbGUuYXNzZXJ0KGR1cmF0aW9uID49IDAsICdkdXJhdGlvbiBjYW5ub3QgYmUgbmVnYXRpdmUnKTtcbiAgICAgICAgbmdEZXZNb2RlICYmIGNvbnNvbGUuYXNzZXJ0KHNjcm9sbFRvcCA+PSAwLCAnc2Nyb2xsVG9wIGNhbm5vdCBiZSBuZWdhdGl2ZScpO1xuICAgICAgICBuZ0Rldk1vZGUgJiYgY29uc29sZS5hc3NlcnQoc2Nyb2xsTGVmdCA+PSAwLCAnc2Nyb2xsTGVmdCBjYW5ub3QgYmUgbmVnYXRpdmUnKTtcblxuICAgICAgICBjb25zdCBpbml0aWFsVG9wID0gZ2V0WShlbGVtZW50T3JXaW5kb3cpO1xuICAgICAgICBjb25zdCBpbml0aWFsTGVmdCA9IGdldFgoZWxlbWVudE9yV2luZG93KTtcbiAgICAgICAgY29uc3QgZGVsdGFUb3AgPSBzY3JvbGxUb3AgLSBpbml0aWFsVG9wO1xuICAgICAgICBjb25zdCBkZWx0YUxlZnQgPSBzY3JvbGxMZWZ0IC0gaW5pdGlhbExlZnQ7XG4gICAgICAgIGNvbnN0IG9ic2VydmFibGUgPSAhZHVyYXRpb25cbiAgICAgICAgICAgID8gb2Y8W251bWJlciwgbnVtYmVyXT4oW3Njcm9sbFRvcCwgc2Nyb2xsTGVmdF0pXG4gICAgICAgICAgICA6IGRlZmVyKCgpID0+IG9mKHRoaXMucGVyZm9ybWFuY2VSZWYubm93KCkpKS5waXBlKFxuICAgICAgICAgICAgICAgICAgc3dpdGNoTWFwKChzdGFydCkgPT5cbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFuaW1hdGlvbkZyYW1lJC5waXBlKG1hcCgobm93KSA9PiBub3cgLSBzdGFydCkpLFxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgIG1hcCgoZWxhcHNlZCkgPT4gdHVpRWFzZUluT3V0UXVhZCh0dWlDbGFtcChlbGFwc2VkIC8gZHVyYXRpb24sIDAsIDEpKSksXG4gICAgICAgICAgICAgICAgICBtYXA8bnVtYmVyLCBbbnVtYmVyLCBudW1iZXJdPigocGVyY2VudCkgPT4gW1xuICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxUb3AgKyBkZWx0YVRvcCAqIHBlcmNlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbExlZnQgKyBkZWx0YUxlZnQgKiBwZXJjZW50LFxuICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICB0YWtlVW50aWwodGltZXIoZHVyYXRpb24pKSxcbiAgICAgICAgICAgICAgICAgIGVuZFdpdGg8W251bWJlciwgbnVtYmVyXT4oW3Njcm9sbFRvcCwgc2Nyb2xsTGVmdF0pLFxuICAgICAgICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlLnBpcGUoXG4gICAgICAgICAgICB0YXAoKFtzY3JvbGxUb3AsIHNjcm9sbExlZnRdKSA9PiB7XG4gICAgICAgICAgICAgICAgZWxlbWVudE9yV2luZG93LnNjcm9sbFRvPy4oc2Nyb2xsTGVmdCwgc2Nyb2xsVG9wKTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICApO1xuICAgIH1cbn1cbiJdfQ==