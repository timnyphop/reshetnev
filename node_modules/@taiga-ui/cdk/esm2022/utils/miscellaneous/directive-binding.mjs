import { effect, inject, isSignal, signal } from '@angular/core';
export function tuiDirectiveBinding(token, key, initial, options = { self: true }) {
    const result = isSignal(initial) ? initial : signal(initial);
    const directive = inject(token, options);
    const output = directive[`${key.toString()}Change`];
    // TODO: Figure out why effects are executed all the time and not just when result changes (check with Angular 18)
    let previous;
    effect(() => {
        const value = result();
        if (previous === value) {
            return;
        }
        if (isSignal(directive[key])) {
            directive[key].set(value);
        }
        else {
            directive[key] = value;
        }
        directive.ngOnChanges?.({});
        output?.emit?.(value);
        previous = value;
    }, { allowSignalWrites: true });
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0aXZlLWJpbmRpbmcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jZGsvdXRpbHMvbWlzY2VsbGFuZW91cy9kaXJlY3RpdmUtYmluZGluZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBTS9ELE1BQU0sVUFBVSxtQkFBbUIsQ0FLL0IsS0FBdUIsRUFDdkIsR0FBTSxFQUNOLE9BQVUsRUFDVixVQUF5QixFQUFDLElBQUksRUFBRSxJQUFJLEVBQUM7SUFFckMsTUFBTSxNQUFNLEdBQVEsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNsRSxNQUFNLFNBQVMsR0FBUSxNQUFNLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzlDLE1BQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFFcEQsa0hBQWtIO0lBQ2xILElBQUksUUFBYSxDQUFDO0lBRWxCLE1BQU0sQ0FDRixHQUFHLEVBQUU7UUFDRCxNQUFNLEtBQUssR0FBUSxNQUFNLEVBQUUsQ0FBQztRQUU1QixJQUFJLFFBQVEsS0FBSyxLQUFLLEVBQUU7WUFDcEIsT0FBTztTQUNWO1FBRUQsSUFBSSxRQUFRLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7WUFDMUIsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUM3QjthQUFNO1lBQ0gsU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztTQUMxQjtRQUVELFNBQVMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM1QixNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdEIsUUFBUSxHQUFHLEtBQUssQ0FBQztJQUNyQixDQUFDLEVBQ0QsRUFBQyxpQkFBaUIsRUFBRSxJQUFJLEVBQUMsQ0FDNUIsQ0FBQztJQUVGLE9BQU8sTUFBTSxDQUFDO0FBQ2xCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7SW5qZWN0T3B0aW9ucywgUHJvdmlkZXJUb2tlbiwgU2lnbmFsLCBXcml0YWJsZVNpZ25hbH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge2VmZmVjdCwgaW5qZWN0LCBpc1NpZ25hbCwgc2lnbmFsfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxudHlwZSBTaWduYWxMaWtlVHlwZU9mPFQ+ID0gVCBleHRlbmRzIFNpZ25hbDxpbmZlciBSPiA/IFIgOiBUO1xuXG50eXBlIFNpZ25hbExpa2U8VD4gPSBTaWduYWw8VD4gfCBUO1xuXG5leHBvcnQgZnVuY3Rpb24gdHVpRGlyZWN0aXZlQmluZGluZzxcbiAgICBULFxuICAgIEcgZXh0ZW5kcyBrZXlvZiBULFxuICAgIEkgZXh0ZW5kcyBTaWduYWxMaWtlPFNpZ25hbExpa2VUeXBlT2Y8VFtHXT4+LFxuPihcbiAgICB0b2tlbjogUHJvdmlkZXJUb2tlbjxUPixcbiAgICBrZXk6IEcsXG4gICAgaW5pdGlhbDogSSxcbiAgICBvcHRpb25zOiBJbmplY3RPcHRpb25zID0ge3NlbGY6IHRydWV9LFxuKTogSSBleHRlbmRzIFNpZ25hbDxhbnk+ID8gSSA6IFdyaXRhYmxlU2lnbmFsPEk+IHtcbiAgICBjb25zdCByZXN1bHQ6IGFueSA9IGlzU2lnbmFsKGluaXRpYWwpID8gaW5pdGlhbCA6IHNpZ25hbChpbml0aWFsKTtcbiAgICBjb25zdCBkaXJlY3RpdmU6IGFueSA9IGluamVjdCh0b2tlbiwgb3B0aW9ucyk7XG4gICAgY29uc3Qgb3V0cHV0ID0gZGlyZWN0aXZlW2Ake2tleS50b1N0cmluZygpfUNoYW5nZWBdO1xuXG4gICAgLy8gVE9ETzogRmlndXJlIG91dCB3aHkgZWZmZWN0cyBhcmUgZXhlY3V0ZWQgYWxsIHRoZSB0aW1lIGFuZCBub3QganVzdCB3aGVuIHJlc3VsdCBjaGFuZ2VzIChjaGVjayB3aXRoIEFuZ3VsYXIgMTgpXG4gICAgbGV0IHByZXZpb3VzOiBhbnk7XG5cbiAgICBlZmZlY3QoXG4gICAgICAgICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlOiBhbnkgPSByZXN1bHQoKTtcblxuICAgICAgICAgICAgaWYgKHByZXZpb3VzID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGlzU2lnbmFsKGRpcmVjdGl2ZVtrZXldKSkge1xuICAgICAgICAgICAgICAgIGRpcmVjdGl2ZVtrZXldLnNldCh2YWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRpcmVjdGl2ZVtrZXldID0gdmFsdWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRpcmVjdGl2ZS5uZ09uQ2hhbmdlcz8uKHt9KTtcbiAgICAgICAgICAgIG91dHB1dD8uZW1pdD8uKHZhbHVlKTtcbiAgICAgICAgICAgIHByZXZpb3VzID0gdmFsdWU7XG4gICAgICAgIH0sXG4gICAgICAgIHthbGxvd1NpZ25hbFdyaXRlczogdHJ1ZX0sXG4gICAgKTtcblxuICAgIHJldHVybiByZXN1bHQ7XG59XG4iXX0=