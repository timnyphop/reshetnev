/// <reference types="@taiga-ui/tsconfig/ng-dev-mode" />
const MAX_PRECISION = 292;
/**
 * Rounding number to the set precision
 *
 * @param value
 * @param precision number of digits in a float part
 * @param func rounding function (round, floor, ceil)
 */
function calculate(value, precision, func) {
    if (value === Infinity) {
        return value;
    }
    ngDevMode && console.assert(!Number.isNaN(value), 'Value must be number');
    ngDevMode && console.assert(Number.isInteger(precision), 'Precision must be integer');
    precision = Math.min(precision, MAX_PRECISION);
    const pair = `${value}e`.split('e');
    const tempValue = func(Number(`${pair[0]}e${Number(pair[1]) + precision}`));
    const processedPair = `${tempValue}e`.split('e');
    return Number(`${processedPair[0]}e${Number(processedPair[1]) - precision}`);
}
export function tuiRound(value, precision = 0) {
    return calculate(value, precision, Math.round);
}
export function tuiCeil(value, precision = 0) {
    return calculate(value, precision, Math.ceil);
}
export function tuiFloor(value, precision = 0) {
    return calculate(value, precision, Math.floor);
}
export function tuiTrunc(value, precision = 0) {
    return calculate(value, precision, Math.trunc);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91bmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jZGsvdXRpbHMvbWF0aC9yb3VuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx3REFBd0Q7QUFFeEQsTUFBTSxhQUFhLEdBQUcsR0FBRyxDQUFDO0FBRTFCOzs7Ozs7R0FNRztBQUNILFNBQVMsU0FBUyxDQUNkLEtBQWEsRUFDYixTQUFpQixFQUNqQixJQUEyQjtJQUUzQixJQUFJLEtBQUssS0FBSyxRQUFRLEVBQUU7UUFDcEIsT0FBTyxLQUFLLENBQUM7S0FDaEI7SUFFRCxTQUFTLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztJQUMxRSxTQUFTLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxFQUFFLDJCQUEyQixDQUFDLENBQUM7SUFFdEYsU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBRS9DLE1BQU0sSUFBSSxHQUFHLEdBQUcsS0FBSyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3BDLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUM1RSxNQUFNLGFBQWEsR0FBRyxHQUFHLFNBQVMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVqRCxPQUFPLE1BQU0sQ0FBQyxHQUFHLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsU0FBUyxFQUFFLENBQUMsQ0FBQztBQUNqRixDQUFDO0FBRUQsTUFBTSxVQUFVLFFBQVEsQ0FBQyxLQUFhLEVBQUUsU0FBUyxHQUFHLENBQUM7SUFDakQsT0FBTyxTQUFTLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDbkQsQ0FBQztBQUVELE1BQU0sVUFBVSxPQUFPLENBQUMsS0FBYSxFQUFFLFNBQVMsR0FBRyxDQUFDO0lBQ2hELE9BQU8sU0FBUyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2xELENBQUM7QUFFRCxNQUFNLFVBQVUsUUFBUSxDQUFDLEtBQWEsRUFBRSxTQUFTLEdBQUcsQ0FBQztJQUNqRCxPQUFPLFNBQVMsQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNuRCxDQUFDO0FBRUQsTUFBTSxVQUFVLFFBQVEsQ0FBQyxLQUFhLEVBQUUsU0FBUyxHQUFHLENBQUM7SUFDakQsT0FBTyxTQUFTLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDbkQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHR5cGVzPVwiQHRhaWdhLXVpL3RzY29uZmlnL25nLWRldi1tb2RlXCIgLz5cblxuY29uc3QgTUFYX1BSRUNJU0lPTiA9IDI5MjtcblxuLyoqXG4gKiBSb3VuZGluZyBudW1iZXIgdG8gdGhlIHNldCBwcmVjaXNpb25cbiAqXG4gKiBAcGFyYW0gdmFsdWVcbiAqIEBwYXJhbSBwcmVjaXNpb24gbnVtYmVyIG9mIGRpZ2l0cyBpbiBhIGZsb2F0IHBhcnRcbiAqIEBwYXJhbSBmdW5jIHJvdW5kaW5nIGZ1bmN0aW9uIChyb3VuZCwgZmxvb3IsIGNlaWwpXG4gKi9cbmZ1bmN0aW9uIGNhbGN1bGF0ZShcbiAgICB2YWx1ZTogbnVtYmVyLFxuICAgIHByZWNpc2lvbjogbnVtYmVyLFxuICAgIGZ1bmM6ICh4OiBudW1iZXIpID0+IG51bWJlcixcbik6IG51bWJlciB7XG4gICAgaWYgKHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgbmdEZXZNb2RlICYmIGNvbnNvbGUuYXNzZXJ0KCFOdW1iZXIuaXNOYU4odmFsdWUpLCAnVmFsdWUgbXVzdCBiZSBudW1iZXInKTtcbiAgICBuZ0Rldk1vZGUgJiYgY29uc29sZS5hc3NlcnQoTnVtYmVyLmlzSW50ZWdlcihwcmVjaXNpb24pLCAnUHJlY2lzaW9uIG11c3QgYmUgaW50ZWdlcicpO1xuXG4gICAgcHJlY2lzaW9uID0gTWF0aC5taW4ocHJlY2lzaW9uLCBNQVhfUFJFQ0lTSU9OKTtcblxuICAgIGNvbnN0IHBhaXIgPSBgJHt2YWx1ZX1lYC5zcGxpdCgnZScpO1xuICAgIGNvbnN0IHRlbXBWYWx1ZSA9IGZ1bmMoTnVtYmVyKGAke3BhaXJbMF19ZSR7TnVtYmVyKHBhaXJbMV0pICsgcHJlY2lzaW9ufWApKTtcbiAgICBjb25zdCBwcm9jZXNzZWRQYWlyID0gYCR7dGVtcFZhbHVlfWVgLnNwbGl0KCdlJyk7XG5cbiAgICByZXR1cm4gTnVtYmVyKGAke3Byb2Nlc3NlZFBhaXJbMF19ZSR7TnVtYmVyKHByb2Nlc3NlZFBhaXJbMV0pIC0gcHJlY2lzaW9ufWApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHVpUm91bmQodmFsdWU6IG51bWJlciwgcHJlY2lzaW9uID0gMCk6IG51bWJlciB7XG4gICAgcmV0dXJuIGNhbGN1bGF0ZSh2YWx1ZSwgcHJlY2lzaW9uLCBNYXRoLnJvdW5kKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHR1aUNlaWwodmFsdWU6IG51bWJlciwgcHJlY2lzaW9uID0gMCk6IG51bWJlciB7XG4gICAgcmV0dXJuIGNhbGN1bGF0ZSh2YWx1ZSwgcHJlY2lzaW9uLCBNYXRoLmNlaWwpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHVpRmxvb3IodmFsdWU6IG51bWJlciwgcHJlY2lzaW9uID0gMCk6IG51bWJlciB7XG4gICAgcmV0dXJuIGNhbGN1bGF0ZSh2YWx1ZSwgcHJlY2lzaW9uLCBNYXRoLmZsb29yKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHR1aVRydW5jKHZhbHVlOiBudW1iZXIsIHByZWNpc2lvbiA9IDApOiBudW1iZXIge1xuICAgIHJldHVybiBjYWxjdWxhdGUodmFsdWUsIHByZWNpc2lvbiwgTWF0aC50cnVuYyk7XG59XG4iXX0=