const getChunksFromString = (hex, chunkSize) => hex.match(new RegExp(`.{${chunkSize}}`, 'g'));
const convertHexUnitTo256 = (hexStr) => parseInt(hexStr.repeat(2 / hexStr.length), 16);
const getAlphaFloat = (a, alpha) => {
    if (typeof a !== 'undefined') {
        return Number((a / 255).toFixed(2));
    }
    if (typeof alpha !== 'number' || alpha < 0 || alpha > 1) {
        return 1;
    }
    return alpha;
};
export function tuiHexToRGBA(hex, alpha) {
    const [r, g, b, a] = tuiParseHex(hex, alpha);
    return a < 1 ? `rgba(${r}, ${g}, ${b}, ${a})` : `rgb(${r}, ${g}, ${b})`;
}
export function tuiIsValidHex(hex) {
    return /^#([A-Fa-f0-9]{3,4}){1,2}$/.test(hex);
}
export function tuiParseHex(hex, alpha) {
    if (!tuiIsValidHex(hex)) {
        throw new Error('Invalid HEX');
    }
    const chunkSize = Math.floor((hex.length - 1) / 3);
    const hexArr = getChunksFromString(hex.slice(1), chunkSize);
    const [r = NaN, g = NaN, b = NaN, a] = hexArr?.map(convertHexUnitTo256) ?? [];
    const floatAlpha = getAlphaFloat(a, alpha);
    return [r, g, b, floatAlpha];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGV4LXRvLXJnYmEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jZGsvdXRpbHMvY29sb3IvaGV4LXRvLXJnYmEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxtQkFBbUIsR0FBRyxDQUFDLEdBQVcsRUFBRSxTQUFpQixFQUEyQixFQUFFLENBQ3BGLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsS0FBSyxTQUFTLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBRWxELE1BQU0sbUJBQW1CLEdBQUcsQ0FBQyxNQUFjLEVBQVUsRUFBRSxDQUNuRCxRQUFRLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBRW5ELE1BQU0sYUFBYSxHQUFHLENBQUMsQ0FBVSxFQUFFLEtBQWMsRUFBVSxFQUFFO0lBQ3pELElBQUksT0FBTyxDQUFDLEtBQUssV0FBVyxFQUFFO1FBQzFCLE9BQU8sTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3ZDO0lBRUQsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLElBQUksS0FBSyxHQUFHLENBQUMsSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFO1FBQ3JELE9BQU8sQ0FBQyxDQUFDO0tBQ1o7SUFFRCxPQUFPLEtBQUssQ0FBQztBQUNqQixDQUFDLENBQUM7QUFFRixNQUFNLFVBQVUsWUFBWSxDQUFDLEdBQVcsRUFBRSxLQUFjO0lBQ3BELE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRTdDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDO0FBQzVFLENBQUM7QUFFRCxNQUFNLFVBQVUsYUFBYSxDQUFDLEdBQVc7SUFDckMsT0FBTyw0QkFBNEIsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDbEQsQ0FBQztBQUVELE1BQU0sVUFBVSxXQUFXLENBQ3ZCLEdBQVcsRUFDWCxLQUFjO0lBRWQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUNyQixNQUFNLElBQUksS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0tBQ2xDO0lBRUQsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDbkQsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUM1RCxNQUFNLENBQUMsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsTUFBTSxFQUFFLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUM5RSxNQUFNLFVBQVUsR0FBRyxhQUFhLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRTNDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUNqQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZ2V0Q2h1bmtzRnJvbVN0cmluZyA9IChoZXg6IHN0cmluZywgY2h1bmtTaXplOiBudW1iZXIpOiBSZWdFeHBNYXRjaEFycmF5IHwgbnVsbCA9PlxuICAgIGhleC5tYXRjaChuZXcgUmVnRXhwKGAueyR7Y2h1bmtTaXplfX1gLCAnZycpKTtcblxuY29uc3QgY29udmVydEhleFVuaXRUbzI1NiA9IChoZXhTdHI6IHN0cmluZyk6IG51bWJlciA9PlxuICAgIHBhcnNlSW50KGhleFN0ci5yZXBlYXQoMiAvIGhleFN0ci5sZW5ndGgpLCAxNik7XG5cbmNvbnN0IGdldEFscGhhRmxvYXQgPSAoYT86IG51bWJlciwgYWxwaGE/OiBudW1iZXIpOiBudW1iZXIgPT4ge1xuICAgIGlmICh0eXBlb2YgYSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIE51bWJlcigoYSAvIDI1NSkudG9GaXhlZCgyKSk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBhbHBoYSAhPT0gJ251bWJlcicgfHwgYWxwaGEgPCAwIHx8IGFscGhhID4gMSkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWxwaGE7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gdHVpSGV4VG9SR0JBKGhleDogc3RyaW5nLCBhbHBoYT86IG51bWJlcik6IHN0cmluZyB7XG4gICAgY29uc3QgW3IsIGcsIGIsIGFdID0gdHVpUGFyc2VIZXgoaGV4LCBhbHBoYSk7XG5cbiAgICByZXR1cm4gYSA8IDEgPyBgcmdiYSgke3J9LCAke2d9LCAke2J9LCAke2F9KWAgOiBgcmdiKCR7cn0sICR7Z30sICR7Yn0pYDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHR1aUlzVmFsaWRIZXgoaGV4OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gL14jKFtBLUZhLWYwLTldezMsNH0pezEsMn0kLy50ZXN0KGhleCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0dWlQYXJzZUhleChcbiAgICBoZXg6IHN0cmluZyxcbiAgICBhbHBoYT86IG51bWJlcixcbik6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXJdIHtcbiAgICBpZiAoIXR1aUlzVmFsaWRIZXgoaGV4KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgSEVYJyk7XG4gICAgfVxuXG4gICAgY29uc3QgY2h1bmtTaXplID0gTWF0aC5mbG9vcigoaGV4Lmxlbmd0aCAtIDEpIC8gMyk7XG4gICAgY29uc3QgaGV4QXJyID0gZ2V0Q2h1bmtzRnJvbVN0cmluZyhoZXguc2xpY2UoMSksIGNodW5rU2l6ZSk7XG4gICAgY29uc3QgW3IgPSBOYU4sIGcgPSBOYU4sIGIgPSBOYU4sIGFdID0gaGV4QXJyPy5tYXAoY29udmVydEhleFVuaXRUbzI1NikgPz8gW107XG4gICAgY29uc3QgZmxvYXRBbHBoYSA9IGdldEFscGhhRmxvYXQoYSwgYWxwaGEpO1xuXG4gICAgcmV0dXJuIFtyLCBnLCBiLCBmbG9hdEFscGhhXTtcbn1cbiJdfQ==