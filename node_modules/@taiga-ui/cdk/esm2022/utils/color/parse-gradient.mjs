import { tuiParseColor } from './parse-color';
//
// TypeScript parser based on Dean Taylor's answer:
// https://stackoverflow.com/a/20238168/2706426
//
// SETUP CODE
const COMMA = '\\s*,\\s*'; // Allow space around comma.
const HEX = '#(?:[a-f0-9]{6}|[a-f0-9]{3})'; // 3 or 6 character form
const RGB = '\\(\\s*(?:\\d{1,3}\\s*,\\s*){2}\\d{1,3}\\s*\\)'; // "(1, 2, 3)"
const RGBA = '\\(\\s*(?:\\d{1,3}\\s*,\\s*){2}\\d{1,3}\\s*,\\s*\\d*\\.?\\d+\\)'; // "(1, 2, 3, 4)"
const VALUE = '(?:[+-]?\\d*\\.?\\d+)(?:%|[a-z]+)?'; // ".9", "-5px", "100%".
const KEYWORD = '[_a-z-][_a-z0-9-]*'; // "red", "transparent", "border-collapse".
const COLOR = [
    '(?:',
    HEX,
    '|',
    '(?:rgb|hsl)',
    RGB,
    '|',
    '(?:rgba|hsla)',
    RGBA,
    '|',
    KEYWORD,
    ')',
];
const REGEXP_ARRAY = [
    '\\s*(',
    ...COLOR,
    ')',
    '(?:\\s+',
    '(',
    VALUE,
    '))?',
    '(?:',
    COMMA,
    '\\s*)?',
];
function getPosition(match, stops) {
    const fallback = stops === 1 ? '100%' : `${stops}%`;
    return match?.includes('%') ? match : fallback;
}
export function tuiParseGradient(input) {
    const stopsRegexp = new RegExp(REGEXP_ARRAY.join(''), 'gi');
    const stopsString = input.startsWith('to') || input.match(/^\d/)
        ? input.slice(Math.max(0, input.indexOf(',') + 1)).trim()
        : input;
    const side = input.startsWith('to')
        ? input.split(',')[0]
        : 'to bottom';
    let stops = [];
    let matchColorStop = stopsRegexp.exec(stopsString);
    while (matchColorStop !== null) {
        stops = stops.concat({
            color: matchColorStop[1] || '',
            position: getPosition(matchColorStop[2] || '', stops.length),
        });
        matchColorStop = stopsRegexp.exec(stopsString);
    }
    stops = stops.filter(({ color }) => color.startsWith('#') || color.startsWith('rgb'));
    return {
        stops,
        side,
    };
}
export function tuiToGradient({ stops, side }) {
    return `linear-gradient(${side}, ${stops
        .map(({ color, position }) => `rgba(${tuiParseColor(color).join(', ')}) ${position}`)
        .join(', ')})`;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2UtZ3JhZGllbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jZGsvdXRpbHMvY29sb3IvcGFyc2UtZ3JhZGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQW9CNUMsRUFBRTtBQUNGLG1EQUFtRDtBQUNuRCwrQ0FBK0M7QUFDL0MsRUFBRTtBQUNGLGFBQWE7QUFDYixNQUFNLEtBQUssR0FBRyxXQUFXLENBQUMsQ0FBQyw0QkFBNEI7QUFDdkQsTUFBTSxHQUFHLEdBQUcsOEJBQThCLENBQUMsQ0FBQyx3QkFBd0I7QUFDcEUsTUFBTSxHQUFHLEdBQUcsZ0RBQWdELENBQUMsQ0FBQyxjQUFjO0FBQzVFLE1BQU0sSUFBSSxHQUFHLGlFQUFpRSxDQUFDLENBQUMsaUJBQWlCO0FBQ2pHLE1BQU0sS0FBSyxHQUFHLG9DQUFvQyxDQUFDLENBQUMsd0JBQXdCO0FBQzVFLE1BQU0sT0FBTyxHQUFHLG9CQUFvQixDQUFDLENBQUMsMkNBQTJDO0FBQ2pGLE1BQU0sS0FBSyxHQUFHO0lBQ1YsS0FBSztJQUNMLEdBQUc7SUFDSCxHQUFHO0lBQ0gsYUFBYTtJQUNiLEdBQUc7SUFDSCxHQUFHO0lBQ0gsZUFBZTtJQUNmLElBQUk7SUFDSixHQUFHO0lBQ0gsT0FBTztJQUNQLEdBQUc7Q0FDTixDQUFDO0FBQ0YsTUFBTSxZQUFZLEdBQUc7SUFDakIsT0FBTztJQUNQLEdBQUcsS0FBSztJQUNSLEdBQUc7SUFDSCxTQUFTO0lBQ1QsR0FBRztJQUNILEtBQUs7SUFDTCxLQUFLO0lBQ0wsS0FBSztJQUNMLEtBQUs7SUFDTCxRQUFRO0NBQ1gsQ0FBQztBQUVGLFNBQVMsV0FBVyxDQUFDLEtBQWEsRUFBRSxLQUFhO0lBQzdDLE1BQU0sUUFBUSxHQUFHLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLEdBQUcsQ0FBQztJQUVwRCxPQUFPLEtBQUssRUFBRSxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDO0FBQ25ELENBQUM7QUFFRCxNQUFNLFVBQVUsZ0JBQWdCLENBQUMsS0FBYTtJQUMxQyxNQUFNLFdBQVcsR0FBRyxJQUFJLE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzVELE1BQU0sV0FBVyxHQUNiLEtBQUssQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7UUFDeEMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRTtRQUN6RCxDQUFDLENBQUMsS0FBSyxDQUFDO0lBRWhCLE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDO1FBQy9CLENBQUMsQ0FBRSxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBMEI7UUFDL0MsQ0FBQyxDQUFDLFdBQVcsQ0FBQztJQUNsQixJQUFJLEtBQUssR0FBK0IsRUFBRSxDQUFDO0lBRTNDLElBQUksY0FBYyxHQUFHLFdBQVcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFFbkQsT0FBTyxjQUFjLEtBQUssSUFBSSxFQUFFO1FBQzVCLEtBQUssR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO1lBQ2pCLEtBQUssRUFBRSxjQUFjLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRTtZQUM5QixRQUFRLEVBQUUsV0FBVyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQztTQUMvRCxDQUFDLENBQUM7UUFFSCxjQUFjLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztLQUNsRDtJQUVELEtBQUssR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBQyxLQUFLLEVBQUMsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSSxLQUFLLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFFcEYsT0FBTztRQUNILEtBQUs7UUFDTCxJQUFJO0tBQ1AsQ0FBQztBQUNOLENBQUM7QUFFRCxNQUFNLFVBQVUsYUFBYSxDQUFDLEVBQUMsS0FBSyxFQUFFLElBQUksRUFBb0I7SUFDMUQsT0FBTyxtQkFBbUIsSUFBSSxLQUFLLEtBQUs7U0FDbkMsR0FBRyxDQUNBLENBQUMsRUFBQyxLQUFLLEVBQUUsUUFBUSxFQUFDLEVBQUUsRUFBRSxDQUFDLFFBQVEsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxRQUFRLEVBQUUsQ0FDaEY7U0FDQSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztBQUN2QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHt0dWlQYXJzZUNvbG9yfSBmcm9tICcuL3BhcnNlLWNvbG9yJztcblxuZXhwb3J0IGludGVyZmFjZSBUdWlQYXJzZWRHcmFkaWVudCB7XG4gICAgcmVhZG9ubHkgc2lkZTogVHVpR3JhZGllbnREaXJlY3Rpb247XG4gICAgcmVhZG9ubHkgc3RvcHM6IFJlYWRvbmx5QXJyYXk8e1xuICAgICAgICByZWFkb25seSBjb2xvcjogc3RyaW5nO1xuICAgICAgICByZWFkb25seSBwb3NpdGlvbjogc3RyaW5nO1xuICAgIH0+O1xufVxuXG5leHBvcnQgdHlwZSBUdWlHcmFkaWVudERpcmVjdGlvbiA9XG4gICAgfCAndG8gYm90dG9tIGxlZnQnXG4gICAgfCAndG8gYm90dG9tIHJpZ2h0J1xuICAgIHwgJ3RvIGJvdHRvbSdcbiAgICB8ICd0byBsZWZ0J1xuICAgIHwgJ3RvIHJpZ2h0J1xuICAgIHwgJ3RvIHRvcCBsZWZ0J1xuICAgIHwgJ3RvIHRvcCByaWdodCdcbiAgICB8ICd0byB0b3AnO1xuXG4vL1xuLy8gVHlwZVNjcmlwdCBwYXJzZXIgYmFzZWQgb24gRGVhbiBUYXlsb3IncyBhbnN3ZXI6XG4vLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjAyMzgxNjgvMjcwNjQyNlxuLy9cbi8vIFNFVFVQIENPREVcbmNvbnN0IENPTU1BID0gJ1xcXFxzKixcXFxccyonOyAvLyBBbGxvdyBzcGFjZSBhcm91bmQgY29tbWEuXG5jb25zdCBIRVggPSAnIyg/OlthLWYwLTldezZ9fFthLWYwLTldezN9KSc7IC8vIDMgb3IgNiBjaGFyYWN0ZXIgZm9ybVxuY29uc3QgUkdCID0gJ1xcXFwoXFxcXHMqKD86XFxcXGR7MSwzfVxcXFxzKixcXFxccyopezJ9XFxcXGR7MSwzfVxcXFxzKlxcXFwpJzsgLy8gXCIoMSwgMiwgMylcIlxuY29uc3QgUkdCQSA9ICdcXFxcKFxcXFxzKig/OlxcXFxkezEsM31cXFxccyosXFxcXHMqKXsyfVxcXFxkezEsM31cXFxccyosXFxcXHMqXFxcXGQqXFxcXC4/XFxcXGQrXFxcXCknOyAvLyBcIigxLCAyLCAzLCA0KVwiXG5jb25zdCBWQUxVRSA9ICcoPzpbKy1dP1xcXFxkKlxcXFwuP1xcXFxkKykoPzolfFthLXpdKyk/JzsgLy8gXCIuOVwiLCBcIi01cHhcIiwgXCIxMDAlXCIuXG5jb25zdCBLRVlXT1JEID0gJ1tfYS16LV1bX2EtejAtOS1dKic7IC8vIFwicmVkXCIsIFwidHJhbnNwYXJlbnRcIiwgXCJib3JkZXItY29sbGFwc2VcIi5cbmNvbnN0IENPTE9SID0gW1xuICAgICcoPzonLFxuICAgIEhFWCxcbiAgICAnfCcsXG4gICAgJyg/OnJnYnxoc2wpJyxcbiAgICBSR0IsXG4gICAgJ3wnLFxuICAgICcoPzpyZ2JhfGhzbGEpJyxcbiAgICBSR0JBLFxuICAgICd8JyxcbiAgICBLRVlXT1JELFxuICAgICcpJyxcbl07XG5jb25zdCBSRUdFWFBfQVJSQVkgPSBbXG4gICAgJ1xcXFxzKignLFxuICAgIC4uLkNPTE9SLFxuICAgICcpJyxcbiAgICAnKD86XFxcXHMrJyxcbiAgICAnKCcsXG4gICAgVkFMVUUsXG4gICAgJykpPycsXG4gICAgJyg/OicsXG4gICAgQ09NTUEsXG4gICAgJ1xcXFxzKik/Jyxcbl07XG5cbmZ1bmN0aW9uIGdldFBvc2l0aW9uKG1hdGNoOiBzdHJpbmcsIHN0b3BzOiBudW1iZXIpOiBzdHJpbmcge1xuICAgIGNvbnN0IGZhbGxiYWNrID0gc3RvcHMgPT09IDEgPyAnMTAwJScgOiBgJHtzdG9wc30lYDtcblxuICAgIHJldHVybiBtYXRjaD8uaW5jbHVkZXMoJyUnKSA/IG1hdGNoIDogZmFsbGJhY2s7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0dWlQYXJzZUdyYWRpZW50KGlucHV0OiBzdHJpbmcpOiBUdWlQYXJzZWRHcmFkaWVudCB7XG4gICAgY29uc3Qgc3RvcHNSZWdleHAgPSBuZXcgUmVnRXhwKFJFR0VYUF9BUlJBWS5qb2luKCcnKSwgJ2dpJyk7XG4gICAgY29uc3Qgc3RvcHNTdHJpbmcgPVxuICAgICAgICBpbnB1dC5zdGFydHNXaXRoKCd0bycpIHx8IGlucHV0Lm1hdGNoKC9eXFxkLylcbiAgICAgICAgICAgID8gaW5wdXQuc2xpY2UoTWF0aC5tYXgoMCwgaW5wdXQuaW5kZXhPZignLCcpICsgMSkpLnRyaW0oKVxuICAgICAgICAgICAgOiBpbnB1dDtcblxuICAgIGNvbnN0IHNpZGUgPSBpbnB1dC5zdGFydHNXaXRoKCd0bycpXG4gICAgICAgID8gKGlucHV0LnNwbGl0KCcsJylbMF0gYXMgVHVpR3JhZGllbnREaXJlY3Rpb24pXG4gICAgICAgIDogJ3RvIGJvdHRvbSc7XG4gICAgbGV0IHN0b3BzOiBUdWlQYXJzZWRHcmFkaWVudFsnc3RvcHMnXSA9IFtdO1xuXG4gICAgbGV0IG1hdGNoQ29sb3JTdG9wID0gc3RvcHNSZWdleHAuZXhlYyhzdG9wc1N0cmluZyk7XG5cbiAgICB3aGlsZSAobWF0Y2hDb2xvclN0b3AgIT09IG51bGwpIHtcbiAgICAgICAgc3RvcHMgPSBzdG9wcy5jb25jYXQoe1xuICAgICAgICAgICAgY29sb3I6IG1hdGNoQ29sb3JTdG9wWzFdIHx8ICcnLFxuICAgICAgICAgICAgcG9zaXRpb246IGdldFBvc2l0aW9uKG1hdGNoQ29sb3JTdG9wWzJdIHx8ICcnLCBzdG9wcy5sZW5ndGgpLFxuICAgICAgICB9KTtcblxuICAgICAgICBtYXRjaENvbG9yU3RvcCA9IHN0b3BzUmVnZXhwLmV4ZWMoc3RvcHNTdHJpbmcpO1xuICAgIH1cblxuICAgIHN0b3BzID0gc3RvcHMuZmlsdGVyKCh7Y29sb3J9KSA9PiBjb2xvci5zdGFydHNXaXRoKCcjJykgfHwgY29sb3Iuc3RhcnRzV2l0aCgncmdiJykpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RvcHMsXG4gICAgICAgIHNpZGUsXG4gICAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHR1aVRvR3JhZGllbnQoe3N0b3BzLCBzaWRlfTogVHVpUGFyc2VkR3JhZGllbnQpOiBzdHJpbmcge1xuICAgIHJldHVybiBgbGluZWFyLWdyYWRpZW50KCR7c2lkZX0sICR7c3RvcHNcbiAgICAgICAgLm1hcChcbiAgICAgICAgICAgICh7Y29sb3IsIHBvc2l0aW9ufSkgPT4gYHJnYmEoJHt0dWlQYXJzZUNvbG9yKGNvbG9yKS5qb2luKCcsICcpfSkgJHtwb3NpdGlvbn1gLFxuICAgICAgICApXG4gICAgICAgIC5qb2luKCcsICcpfSlgO1xufVxuIl19