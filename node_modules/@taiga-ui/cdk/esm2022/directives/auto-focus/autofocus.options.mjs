import { ElementRef, InjectionToken, NgZone, Renderer2 } from '@angular/core';
import { WA_ANIMATION_FRAME, WA_WINDOW } from '@ng-web-apis/common';
import { TUI_IS_IOS } from '@taiga-ui/cdk/tokens';
import { tuiCreateToken, tuiProvideOptions } from '@taiga-ui/cdk/utils/miscellaneous';
import { TuiDefaultAutofocusHandler } from './handlers/default.handler';
import { TuiIosAutofocusHandler } from './handlers/ios.handler';
export const TUI_AUTOFOCUS_DEFAULT_OPTIONS = {
    delay: NaN, // NaN = no delay/sync
};
export const TUI_AUTOFOCUS_OPTIONS = tuiCreateToken(TUI_AUTOFOCUS_DEFAULT_OPTIONS);
export function tuiAutoFocusOptionsProvider(options) {
    return tuiProvideOptions(TUI_AUTOFOCUS_OPTIONS, options, TUI_AUTOFOCUS_DEFAULT_OPTIONS);
}
export const TUI_AUTOFOCUS_HANDLER = new InjectionToken('[TUI_AUTOFOCUS_HANDLER]');
export const TUI_AUTOFOCUS_PROVIDERS = [
    {
        provide: TUI_AUTOFOCUS_HANDLER,
        useFactory: (el, animationFrame$, renderer, zone, win, isIos) => isIos
            ? new TuiIosAutofocusHandler(el, renderer, zone, win)
            : new TuiDefaultAutofocusHandler(el, animationFrame$, zone),
        deps: [ElementRef, WA_ANIMATION_FRAME, Renderer2, NgZone, WA_WINDOW, TUI_IS_IOS],
    },
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0b2ZvY3VzLm9wdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jZGsvZGlyZWN0aXZlcy9hdXRvLWZvY3VzL2F1dG9mb2N1cy5vcHRpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBQyxVQUFVLEVBQUUsY0FBYyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDNUUsT0FBTyxFQUFDLGtCQUFrQixFQUFFLFNBQVMsRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBQ2xFLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUNoRCxPQUFPLEVBQUMsY0FBYyxFQUFFLGlCQUFpQixFQUFDLE1BQU0sbUNBQW1DLENBQUM7QUFHcEYsT0FBTyxFQUFDLDBCQUEwQixFQUFDLE1BQU0sNEJBQTRCLENBQUM7QUFDdEUsT0FBTyxFQUFDLHNCQUFzQixFQUFDLE1BQU0sd0JBQXdCLENBQUM7QUFVOUQsTUFBTSxDQUFDLE1BQU0sNkJBQTZCLEdBQXdCO0lBQzlELEtBQUssRUFBRSxHQUFHLEVBQUUsc0JBQXNCO0NBQ3JDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxjQUFjLENBQUMsNkJBQTZCLENBQUMsQ0FBQztBQUVuRixNQUFNLFVBQVUsMkJBQTJCLENBQ3ZDLE9BQXFDO0lBRXJDLE9BQU8saUJBQWlCLENBQ3BCLHFCQUFxQixFQUNyQixPQUFPLEVBQ1AsNkJBQTZCLENBQ2hDLENBQUM7QUFDTixDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBQUcsSUFBSSxjQUFjLENBQ25ELHlCQUF5QixDQUM1QixDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUc7SUFDbkM7UUFDSSxPQUFPLEVBQUUscUJBQXFCO1FBQzlCLFVBQVUsRUFBRSxDQUNSLEVBQTJCLEVBQzNCLGVBQW1DLEVBQ25DLFFBQW1CLEVBQ25CLElBQVksRUFDWixHQUFXLEVBQ1gsS0FBYyxFQUNoQixFQUFFLENBQ0EsS0FBSztZQUNELENBQUMsQ0FBQyxJQUFJLHNCQUFzQixDQUFDLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQztZQUNyRCxDQUFDLENBQUMsSUFBSSwwQkFBMEIsQ0FBQyxFQUFFLEVBQUUsZUFBZSxFQUFFLElBQUksQ0FBQztRQUNuRSxJQUFJLEVBQUUsQ0FBQyxVQUFVLEVBQUUsa0JBQWtCLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsVUFBVSxDQUFDO0tBQ25GO0NBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHtQcm92aWRlcn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0VsZW1lbnRSZWYsIEluamVjdGlvblRva2VuLCBOZ1pvbmUsIFJlbmRlcmVyMn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1dBX0FOSU1BVElPTl9GUkFNRSwgV0FfV0lORE9XfSBmcm9tICdAbmctd2ViLWFwaXMvY29tbW9uJztcbmltcG9ydCB7VFVJX0lTX0lPU30gZnJvbSAnQHRhaWdhLXVpL2Nkay90b2tlbnMnO1xuaW1wb3J0IHt0dWlDcmVhdGVUb2tlbiwgdHVpUHJvdmlkZU9wdGlvbnN9IGZyb20gJ0B0YWlnYS11aS9jZGsvdXRpbHMvbWlzY2VsbGFuZW91cyc7XG5pbXBvcnQgdHlwZSB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7VHVpRGVmYXVsdEF1dG9mb2N1c0hhbmRsZXJ9IGZyb20gJy4vaGFuZGxlcnMvZGVmYXVsdC5oYW5kbGVyJztcbmltcG9ydCB7VHVpSW9zQXV0b2ZvY3VzSGFuZGxlcn0gZnJvbSAnLi9oYW5kbGVycy9pb3MuaGFuZGxlcic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHVpQXV0b2ZvY3VzSGFuZGxlciB7XG4gICAgc2V0Rm9jdXMoKTogdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUdWlBdXRvZm9jdXNPcHRpb25zIHtcbiAgICByZWFkb25seSBkZWxheTogbnVtYmVyO1xufVxuXG5leHBvcnQgY29uc3QgVFVJX0FVVE9GT0NVU19ERUZBVUxUX09QVElPTlM6IFR1aUF1dG9mb2N1c09wdGlvbnMgPSB7XG4gICAgZGVsYXk6IE5hTiwgLy8gTmFOID0gbm8gZGVsYXkvc3luY1xufTtcblxuZXhwb3J0IGNvbnN0IFRVSV9BVVRPRk9DVVNfT1BUSU9OUyA9IHR1aUNyZWF0ZVRva2VuKFRVSV9BVVRPRk9DVVNfREVGQVVMVF9PUFRJT05TKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHR1aUF1dG9Gb2N1c09wdGlvbnNQcm92aWRlcihcbiAgICBvcHRpb25zOiBQYXJ0aWFsPFR1aUF1dG9mb2N1c09wdGlvbnM+LFxuKTogUHJvdmlkZXIge1xuICAgIHJldHVybiB0dWlQcm92aWRlT3B0aW9ucyhcbiAgICAgICAgVFVJX0FVVE9GT0NVU19PUFRJT05TLFxuICAgICAgICBvcHRpb25zLFxuICAgICAgICBUVUlfQVVUT0ZPQ1VTX0RFRkFVTFRfT1BUSU9OUyxcbiAgICApO1xufVxuXG5leHBvcnQgY29uc3QgVFVJX0FVVE9GT0NVU19IQU5ETEVSID0gbmV3IEluamVjdGlvblRva2VuPFR1aUF1dG9mb2N1c0hhbmRsZXI+KFxuICAgICdbVFVJX0FVVE9GT0NVU19IQU5ETEVSXScsXG4pO1xuXG5leHBvcnQgY29uc3QgVFVJX0FVVE9GT0NVU19QUk9WSURFUlMgPSBbXG4gICAge1xuICAgICAgICBwcm92aWRlOiBUVUlfQVVUT0ZPQ1VTX0hBTkRMRVIsXG4gICAgICAgIHVzZUZhY3Rvcnk6IChcbiAgICAgICAgICAgIGVsOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcbiAgICAgICAgICAgIGFuaW1hdGlvbkZyYW1lJDogT2JzZXJ2YWJsZTxudW1iZXI+LFxuICAgICAgICAgICAgcmVuZGVyZXI6IFJlbmRlcmVyMixcbiAgICAgICAgICAgIHpvbmU6IE5nWm9uZSxcbiAgICAgICAgICAgIHdpbjogV2luZG93LFxuICAgICAgICAgICAgaXNJb3M6IGJvb2xlYW4sXG4gICAgICAgICkgPT5cbiAgICAgICAgICAgIGlzSW9zXG4gICAgICAgICAgICAgICAgPyBuZXcgVHVpSW9zQXV0b2ZvY3VzSGFuZGxlcihlbCwgcmVuZGVyZXIsIHpvbmUsIHdpbilcbiAgICAgICAgICAgICAgICA6IG5ldyBUdWlEZWZhdWx0QXV0b2ZvY3VzSGFuZGxlcihlbCwgYW5pbWF0aW9uRnJhbWUkLCB6b25lKSxcbiAgICAgICAgZGVwczogW0VsZW1lbnRSZWYsIFdBX0FOSU1BVElPTl9GUkFNRSwgUmVuZGVyZXIyLCBOZ1pvbmUsIFdBX1dJTkRPVywgVFVJX0lTX0lPU10sXG4gICAgfSxcbl07XG4iXX0=