import type { TuiInteractiveState } from '@taiga-ui/core/types';
import { TuiTextfieldComponent } from './textfield.component';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/cdk/directives/native-validator";
import * as i2 from "@taiga-ui/core/directives/appearance";
export declare class TuiTextfieldBase {
    private readonly focused;
    protected readonly a: import("@angular/core").WritableSignal<string>;
    protected readonly s: import("@angular/core").WritableSignal<TuiInteractiveState | null>;
    protected readonly f: import("@angular/core").Signal<boolean | null>;
    protected readonly textfield: TuiTextfieldComponent<any>;
    protected readonly autoId: string;
    protected readonly el: HTMLInputElement;
    readOnly: boolean;
    invalid: boolean | null;
    set focusedSetter(focused: boolean | null);
    set stateSetter(state: TuiInteractiveState | null);
    get mode(): string | null;
    setValue(value: string): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<TuiTextfieldBase, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<TuiTextfieldBase, never, never, { "readOnly": { "alias": "readOnly"; "required": false; }; "invalid": { "alias": "invalid"; "required": false; }; "focusedSetter": { "alias": "focused"; "required": false; }; "stateSetter": { "alias": "state"; "required": false; }; }, {}, never, never, false, never>;
}
export declare class TuiTextfieldDirective extends TuiTextfieldBase {
    static ɵfac: i0.ɵɵFactoryDeclaration<TuiTextfieldDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<TuiTextfieldDirective, "input[tuiTextfield]", never, {}, {}, never, never, true, [{ directive: typeof i1.TuiNativeValidator; inputs: {}; outputs: {}; }, { directive: typeof i2.TuiAppearance; inputs: {}; outputs: {}; }]>;
}
