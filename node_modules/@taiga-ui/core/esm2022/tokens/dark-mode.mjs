import { effect, inject, InjectionToken, signal } from '@angular/core';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { WA_LOCAL_STORAGE, WA_WINDOW } from '@ng-web-apis/common';
import { tuiCreateToken } from '@taiga-ui/cdk/utils/miscellaneous';
import { filter, fromEvent } from 'rxjs';
export const TUI_DARK_MODE_DEFAULT_KEY = 'tuiDark';
export const TUI_DARK_MODE_KEY = tuiCreateToken(TUI_DARK_MODE_DEFAULT_KEY);
export const TUI_DARK_MODE = new InjectionToken('', {
    factory: () => {
        let automatic = true;
        const storage = inject(WA_LOCAL_STORAGE);
        const key = inject(TUI_DARK_MODE_KEY);
        const saved = storage.getItem(key);
        const media = inject(WA_WINDOW).matchMedia('(prefers-color-scheme: dark)');
        const result = signal(Boolean((saved && JSON.parse(saved)) ?? media.matches));
        fromEvent(media, 'change')
            .pipe(filter(() => !storage.getItem(key)), takeUntilDestroyed())
            .subscribe(() => {
            automatic = true;
            result.set(media.matches);
        });
        effect(() => {
            const value = String(result());
            if (automatic) {
                automatic = false;
            }
            else {
                storage.setItem(key, value);
            }
        });
        return Object.assign(result, {
            reset: () => {
                storage.removeItem(key);
                automatic = true;
                result.set(media.matches);
            },
        });
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGFyay1tb2RlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZS90b2tlbnMvZGFyay1tb2RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLGNBQWMsRUFBRSxNQUFNLEVBQXNCLE1BQU0sZUFBZSxDQUFDO0FBQzFGLE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLDRCQUE0QixDQUFDO0FBQzlELE9BQU8sRUFBQyxnQkFBZ0IsRUFBRSxTQUFTLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUNoRSxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sbUNBQW1DLENBQUM7QUFDakUsT0FBTyxFQUFDLE1BQU0sRUFBRSxTQUFTLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFFdkMsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQUcsU0FBUyxDQUFDO0FBQ25ELE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLGNBQWMsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0FBQzNFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxJQUFJLGNBQWMsQ0FFN0MsRUFBRSxFQUFFO0lBQ0YsT0FBTyxFQUFFLEdBQUcsRUFBRTtRQUNWLElBQUksU0FBUyxHQUFHLElBQUksQ0FBQztRQUVyQixNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUN6QyxNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUN0QyxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ25DLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxVQUFVLENBQUMsOEJBQThCLENBQUMsQ0FBQztRQUMzRSxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUU5RSxTQUFTLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQzthQUNyQixJQUFJLENBQ0QsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUNuQyxrQkFBa0IsRUFBRSxDQUN2QjthQUNBLFNBQVMsQ0FBQyxHQUFHLEVBQUU7WUFDWixTQUFTLEdBQUcsSUFBSSxDQUFDO1lBQ2pCLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzlCLENBQUMsQ0FBQyxDQUFDO1FBRVAsTUFBTSxDQUFDLEdBQUcsRUFBRTtZQUNSLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO1lBRS9CLElBQUksU0FBUyxFQUFFO2dCQUNYLFNBQVMsR0FBRyxLQUFLLENBQUM7YUFDckI7aUJBQU07Z0JBQ0gsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7YUFDL0I7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7WUFDekIsS0FBSyxFQUFFLEdBQUcsRUFBRTtnQkFDUixPQUFPLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUN4QixTQUFTLEdBQUcsSUFBSSxDQUFDO2dCQUNqQixNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUM5QixDQUFDO1NBQ0osQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7ZWZmZWN0LCBpbmplY3QsIEluamVjdGlvblRva2VuLCBzaWduYWwsIHR5cGUgV3JpdGFibGVTaWduYWx9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHt0YWtlVW50aWxEZXN0cm95ZWR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvcnhqcy1pbnRlcm9wJztcbmltcG9ydCB7V0FfTE9DQUxfU1RPUkFHRSwgV0FfV0lORE9XfSBmcm9tICdAbmctd2ViLWFwaXMvY29tbW9uJztcbmltcG9ydCB7dHVpQ3JlYXRlVG9rZW59IGZyb20gJ0B0YWlnYS11aS9jZGsvdXRpbHMvbWlzY2VsbGFuZW91cyc7XG5pbXBvcnQge2ZpbHRlciwgZnJvbUV2ZW50fSBmcm9tICdyeGpzJztcblxuZXhwb3J0IGNvbnN0IFRVSV9EQVJLX01PREVfREVGQVVMVF9LRVkgPSAndHVpRGFyayc7XG5leHBvcnQgY29uc3QgVFVJX0RBUktfTU9ERV9LRVkgPSB0dWlDcmVhdGVUb2tlbihUVUlfREFSS19NT0RFX0RFRkFVTFRfS0VZKTtcbmV4cG9ydCBjb25zdCBUVUlfREFSS19NT0RFID0gbmV3IEluamVjdGlvblRva2VuPFxuICAgIFdyaXRhYmxlU2lnbmFsPGJvb2xlYW4+ICYge3Jlc2V0KCk6IHZvaWR9XG4+KCcnLCB7XG4gICAgZmFjdG9yeTogKCkgPT4ge1xuICAgICAgICBsZXQgYXV0b21hdGljID0gdHJ1ZTtcblxuICAgICAgICBjb25zdCBzdG9yYWdlID0gaW5qZWN0KFdBX0xPQ0FMX1NUT1JBR0UpO1xuICAgICAgICBjb25zdCBrZXkgPSBpbmplY3QoVFVJX0RBUktfTU9ERV9LRVkpO1xuICAgICAgICBjb25zdCBzYXZlZCA9IHN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xuICAgICAgICBjb25zdCBtZWRpYSA9IGluamVjdChXQV9XSU5ET1cpLm1hdGNoTWVkaWEoJyhwcmVmZXJzLWNvbG9yLXNjaGVtZTogZGFyayknKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc2lnbmFsKEJvb2xlYW4oKHNhdmVkICYmIEpTT04ucGFyc2Uoc2F2ZWQpKSA/PyBtZWRpYS5tYXRjaGVzKSk7XG5cbiAgICAgICAgZnJvbUV2ZW50KG1lZGlhLCAnY2hhbmdlJylcbiAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgIGZpbHRlcigoKSA9PiAhc3RvcmFnZS5nZXRJdGVtKGtleSkpLFxuICAgICAgICAgICAgICAgIHRha2VVbnRpbERlc3Ryb3llZCgpLFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgYXV0b21hdGljID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICByZXN1bHQuc2V0KG1lZGlhLm1hdGNoZXMpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgZWZmZWN0KCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gU3RyaW5nKHJlc3VsdCgpKTtcblxuICAgICAgICAgICAgaWYgKGF1dG9tYXRpYykge1xuICAgICAgICAgICAgICAgIGF1dG9tYXRpYyA9IGZhbHNlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdG9yYWdlLnNldEl0ZW0oa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHJlc3VsdCwge1xuICAgICAgICAgICAgcmVzZXQ6ICgpID0+IHtcbiAgICAgICAgICAgICAgICBzdG9yYWdlLnJlbW92ZUl0ZW0oa2V5KTtcbiAgICAgICAgICAgICAgICBhdXRvbWF0aWMgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJlc3VsdC5zZXQobWVkaWEubWF0Y2hlcyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9LFxufSk7XG4iXX0=