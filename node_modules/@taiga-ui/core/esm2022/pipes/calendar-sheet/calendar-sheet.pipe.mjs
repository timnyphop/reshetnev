import { inject, Pipe } from '@angular/core';
import { DAYS_IN_WEEK } from '@taiga-ui/cdk/date-time';
import { TUI_FIRST_DAY_OF_WEEK } from '@taiga-ui/core/tokens';
import { getDayFromMonthRowCol } from './utils';
import * as i0 from "@angular/core";
const CALENDAR_ROWS_COUNT = 6;
class TuiCalendarSheetPipe {
    constructor() {
        this.firstDayOfWeek = inject(TUI_FIRST_DAY_OF_WEEK);
        this.currentMonth = null;
        this.currentSheet = [];
    }
    transform(month, showAdjacentDays = false) {
        if (this.currentMonth?.monthSame(month)) {
            return this.currentSheet;
        }
        const sheet = [];
        for (let rowIndex = 0; rowIndex < CALENDAR_ROWS_COUNT; rowIndex++) {
            const row = [];
            for (let colIndex = 0; colIndex < DAYS_IN_WEEK; colIndex++) {
                const day = getDayFromMonthRowCol({
                    month,
                    rowIndex,
                    colIndex,
                    firstDayOfWeek: this.firstDayOfWeek,
                });
                const isPrevMonthDay = (day, relativeToMonth = month) => day.year < relativeToMonth.year || day.month < relativeToMonth.month;
                const isNextMonthDay = (day, relativeToMonth = month) => day.year > relativeToMonth.year || day.month > relativeToMonth.month;
                if (isPrevMonthDay(day) && !showAdjacentDays) {
                    continue;
                }
                if (isNextMonthDay(day) && !showAdjacentDays) {
                    break;
                }
                row.push(day);
            }
            sheet.push(row);
        }
        this.currentSheet = sheet.filter((row) => row.length);
        this.currentMonth = month;
        return this.currentSheet;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiCalendarSheetPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "16.2.12", ngImport: i0, type: TuiCalendarSheetPipe, isStandalone: true, name: "tuiCalendarSheet" }); }
}
export { TuiCalendarSheetPipe };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiCalendarSheetPipe, decorators: [{
            type: Pipe,
            args: [{
                    standalone: true,
                    name: 'tuiCalendarSheet',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXItc2hlZXQucGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvcGlwZXMvY2FsZW5kYXItc2hlZXQvY2FsZW5kYXItc2hlZXQucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUMsTUFBTSxFQUFFLElBQUksRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFDckQsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFFNUQsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0sU0FBUyxDQUFDOztBQUU5QyxNQUFNLG1CQUFtQixHQUFHLENBQUMsQ0FBQztBQUU5QixNQUlhLG9CQUFvQjtJQUpqQztRQUtxQixtQkFBYyxHQUFHLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBQ3hELGlCQUFZLEdBQW9CLElBQUksQ0FBQztRQUNyQyxpQkFBWSxHQUFxQyxFQUFFLENBQUM7S0FnRC9EO0lBOUNVLFNBQVMsQ0FDWixLQUFlLEVBQ2YsZ0JBQWdCLEdBQUcsS0FBSztRQUV4QixJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUUsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3JDLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztTQUM1QjtRQUVELE1BQU0sS0FBSyxHQUE2QixFQUFFLENBQUM7UUFFM0MsS0FBSyxJQUFJLFFBQVEsR0FBRyxDQUFDLEVBQUUsUUFBUSxHQUFHLG1CQUFtQixFQUFFLFFBQVEsRUFBRSxFQUFFO1lBQy9ELE1BQU0sR0FBRyxHQUFhLEVBQUUsQ0FBQztZQUV6QixLQUFLLElBQUksUUFBUSxHQUFHLENBQUMsRUFBRSxRQUFRLEdBQUcsWUFBWSxFQUFFLFFBQVEsRUFBRSxFQUFFO2dCQUN4RCxNQUFNLEdBQUcsR0FBRyxxQkFBcUIsQ0FBQztvQkFDOUIsS0FBSztvQkFDTCxRQUFRO29CQUNSLFFBQVE7b0JBQ1IsY0FBYyxFQUFFLElBQUksQ0FBQyxjQUFjO2lCQUN0QyxDQUFDLENBQUM7Z0JBRUgsTUFBTSxjQUFjLEdBQUcsQ0FBQyxHQUFXLEVBQUUsZUFBZSxHQUFHLEtBQUssRUFBVyxFQUFFLENBQ3JFLEdBQUcsQ0FBQyxJQUFJLEdBQUcsZUFBZSxDQUFDLElBQUksSUFBSSxHQUFHLENBQUMsS0FBSyxHQUFHLGVBQWUsQ0FBQyxLQUFLLENBQUM7Z0JBRXpFLE1BQU0sY0FBYyxHQUFHLENBQUMsR0FBVyxFQUFFLGVBQWUsR0FBRyxLQUFLLEVBQVcsRUFBRSxDQUNyRSxHQUFHLENBQUMsSUFBSSxHQUFHLGVBQWUsQ0FBQyxJQUFJLElBQUksR0FBRyxDQUFDLEtBQUssR0FBRyxlQUFlLENBQUMsS0FBSyxDQUFDO2dCQUV6RSxJQUFJLGNBQWMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFO29CQUMxQyxTQUFTO2lCQUNaO2dCQUVELElBQUksY0FBYyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7b0JBQzFDLE1BQU07aUJBQ1Q7Z0JBRUQsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUNqQjtZQUVELEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDbkI7UUFFRCxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN0RCxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztRQUUxQixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDN0IsQ0FBQzsrR0FsRFEsb0JBQW9COzZHQUFwQixvQkFBb0I7O1NBQXBCLG9CQUFvQjs0RkFBcEIsb0JBQW9CO2tCQUpoQyxJQUFJO21CQUFDO29CQUNGLFVBQVUsRUFBRSxJQUFJO29CQUNoQixJQUFJLEVBQUUsa0JBQWtCO2lCQUMzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHtQaXBlVHJhbnNmb3JtfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7aW5qZWN0LCBQaXBlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB0eXBlIHtUdWlEYXksIFR1aU1vbnRofSBmcm9tICdAdGFpZ2EtdWkvY2RrL2RhdGUtdGltZSc7XG5pbXBvcnQge0RBWVNfSU5fV0VFS30gZnJvbSAnQHRhaWdhLXVpL2Nkay9kYXRlLXRpbWUnO1xuaW1wb3J0IHtUVUlfRklSU1RfREFZX09GX1dFRUt9IGZyb20gJ0B0YWlnYS11aS9jb3JlL3Rva2Vucyc7XG5cbmltcG9ydCB7Z2V0RGF5RnJvbU1vbnRoUm93Q29sfSBmcm9tICcuL3V0aWxzJztcblxuY29uc3QgQ0FMRU5EQVJfUk9XU19DT1VOVCA9IDY7XG5cbkBQaXBlKHtcbiAgICBzdGFuZGFsb25lOiB0cnVlLFxuICAgIG5hbWU6ICd0dWlDYWxlbmRhclNoZWV0Jyxcbn0pXG5leHBvcnQgY2xhc3MgVHVpQ2FsZW5kYXJTaGVldFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGZpcnN0RGF5T2ZXZWVrID0gaW5qZWN0KFRVSV9GSVJTVF9EQVlfT0ZfV0VFSyk7XG4gICAgcHJpdmF0ZSBjdXJyZW50TW9udGg6IFR1aU1vbnRoIHwgbnVsbCA9IG51bGw7XG4gICAgcHJpdmF0ZSBjdXJyZW50U2hlZXQ6IFJlYWRvbmx5QXJyYXk8cmVhZG9ubHkgVHVpRGF5W10+ID0gW107XG5cbiAgICBwdWJsaWMgdHJhbnNmb3JtKFxuICAgICAgICBtb250aDogVHVpTW9udGgsXG4gICAgICAgIHNob3dBZGphY2VudERheXMgPSBmYWxzZSxcbiAgICApOiBSZWFkb25seUFycmF5PHJlYWRvbmx5IFR1aURheVtdPiB7XG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRNb250aD8ubW9udGhTYW1lKG1vbnRoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudFNoZWV0O1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc2hlZXQ6IEFycmF5PHJlYWRvbmx5IFR1aURheVtdPiA9IFtdO1xuXG4gICAgICAgIGZvciAobGV0IHJvd0luZGV4ID0gMDsgcm93SW5kZXggPCBDQUxFTkRBUl9ST1dTX0NPVU5UOyByb3dJbmRleCsrKSB7XG4gICAgICAgICAgICBjb25zdCByb3c6IFR1aURheVtdID0gW107XG5cbiAgICAgICAgICAgIGZvciAobGV0IGNvbEluZGV4ID0gMDsgY29sSW5kZXggPCBEQVlTX0lOX1dFRUs7IGNvbEluZGV4KyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXkgPSBnZXREYXlGcm9tTW9udGhSb3dDb2woe1xuICAgICAgICAgICAgICAgICAgICBtb250aCxcbiAgICAgICAgICAgICAgICAgICAgcm93SW5kZXgsXG4gICAgICAgICAgICAgICAgICAgIGNvbEluZGV4LFxuICAgICAgICAgICAgICAgICAgICBmaXJzdERheU9mV2VlazogdGhpcy5maXJzdERheU9mV2VlayxcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IGlzUHJldk1vbnRoRGF5ID0gKGRheTogVHVpRGF5LCByZWxhdGl2ZVRvTW9udGggPSBtb250aCk6IGJvb2xlYW4gPT5cbiAgICAgICAgICAgICAgICAgICAgZGF5LnllYXIgPCByZWxhdGl2ZVRvTW9udGgueWVhciB8fCBkYXkubW9udGggPCByZWxhdGl2ZVRvTW9udGgubW9udGg7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBpc05leHRNb250aERheSA9IChkYXk6IFR1aURheSwgcmVsYXRpdmVUb01vbnRoID0gbW9udGgpOiBib29sZWFuID0+XG4gICAgICAgICAgICAgICAgICAgIGRheS55ZWFyID4gcmVsYXRpdmVUb01vbnRoLnllYXIgfHwgZGF5Lm1vbnRoID4gcmVsYXRpdmVUb01vbnRoLm1vbnRoO1xuXG4gICAgICAgICAgICAgICAgaWYgKGlzUHJldk1vbnRoRGF5KGRheSkgJiYgIXNob3dBZGphY2VudERheXMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGlzTmV4dE1vbnRoRGF5KGRheSkgJiYgIXNob3dBZGphY2VudERheXMpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcm93LnB1c2goZGF5KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2hlZXQucHVzaChyb3cpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jdXJyZW50U2hlZXQgPSBzaGVldC5maWx0ZXIoKHJvdykgPT4gcm93Lmxlbmd0aCk7XG4gICAgICAgIHRoaXMuY3VycmVudE1vbnRoID0gbW9udGg7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudFNoZWV0O1xuICAgIH1cbn1cbiJdfQ==