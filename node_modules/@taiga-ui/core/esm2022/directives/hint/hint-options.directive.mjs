import { Self } from '@angular/core';
import { Directive, inject, Input, Optional, SkipSelf } from '@angular/core';
import { tuiCreateToken, tuiProvide } from '@taiga-ui/cdk/utils/miscellaneous';
import { tuiOverrideOptions } from '@taiga-ui/core/utils';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
export const TUI_HINT_DIRECTIONS = [
    'bottom-left',
    'bottom',
    'bottom-right',
    'top-left',
    'top',
    'top-right',
    'left-top',
    'left',
    'left-bottom',
    'right-top',
    'right',
    'right-bottom',
];
/** Default values for hint options */
export const TUI_HINT_DEFAULT_OPTIONS = {
    direction: 'bottom-left',
    showDelay: 500,
    hideDelay: 200,
    appearance: '',
    icon: '@tui.circle-help',
};
/**
 * Default parameters for hint directive
 */
export const TUI_HINT_OPTIONS = tuiCreateToken(TUI_HINT_DEFAULT_OPTIONS);
export const tuiHintOptionsProvider = (override) => ({
    provide: TUI_HINT_OPTIONS,
    deps: [
        [new Optional(), new Self(), TuiHintOptionsDirective],
        [new Optional(), new SkipSelf(), TUI_HINT_OPTIONS],
    ],
    useFactory: tuiOverrideOptions(override, TUI_HINT_DEFAULT_OPTIONS),
});
/**
 * @deprecated: drop in 5.0
 */
class TuiHintOptionsDirective {
    constructor() {
        this.options = inject(TUI_HINT_OPTIONS, { skipSelf: true });
        this.direction = this.options.direction;
        this.appearance = this.options.appearance;
        this.showDelay = this.options.showDelay;
        this.hideDelay = this.options.hideDelay;
        this.icon = this.options.icon;
        this.change$ = new Subject();
    }
    ngOnChanges() {
        this.change$.next();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiHintOptionsDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiHintOptionsDirective, isStandalone: true, selector: "[tuiHintContent]", inputs: { content: ["tuiHintContent", "content"], direction: ["tuiHintDirection", "direction"], appearance: ["tuiHintAppearance", "appearance"], showDelay: ["tuiHintShowDelay", "showDelay"], hideDelay: ["tuiHintHideDelay", "hideDelay"] }, providers: [tuiProvide(TUI_HINT_OPTIONS, TuiHintOptionsDirective)], usesOnChanges: true, ngImport: i0 }); }
}
export { TuiHintOptionsDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiHintOptionsDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[tuiHintContent]',
                    providers: [tuiProvide(TUI_HINT_OPTIONS, TuiHintOptionsDirective)],
                }]
        }], propDecorators: { content: [{
                type: Input,
                args: ['tuiHintContent']
            }], direction: [{
                type: Input,
                args: ['tuiHintDirection']
            }], appearance: [{
                type: Input,
                args: ['tuiHintAppearance']
            }], showDelay: [{
                type: Input,
                args: ['tuiHintShowDelay']
            }], hideDelay: [{
                type: Input,
                args: ['tuiHintHideDelay']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGludC1vcHRpb25zLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvZGlyZWN0aXZlcy9oaW50L2hpbnQtb3B0aW9ucy5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUF1QyxJQUFJLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekUsT0FBTyxFQUFDLFNBQVMsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDM0UsT0FBTyxFQUFDLGNBQWMsRUFBRSxVQUFVLEVBQUMsTUFBTSxtQ0FBbUMsQ0FBQztBQUM3RSxPQUFPLEVBQUMsa0JBQWtCLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUV4RCxPQUFPLEVBQUMsT0FBTyxFQUFDLE1BQU0sTUFBTSxDQUFDOztBQWdCN0IsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQWdDO0lBQzVELGFBQWE7SUFDYixRQUFRO0lBQ1IsY0FBYztJQUNkLFVBQVU7SUFDVixLQUFLO0lBQ0wsV0FBVztJQUNYLFVBQVU7SUFDVixNQUFNO0lBQ04sYUFBYTtJQUNiLFdBQVc7SUFDWCxPQUFPO0lBQ1AsY0FBYztDQUNqQixDQUFDO0FBVUYsc0NBQXNDO0FBQ3RDLE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUFtQjtJQUNwRCxTQUFTLEVBQUUsYUFBYTtJQUN4QixTQUFTLEVBQUUsR0FBRztJQUNkLFNBQVMsRUFBRSxHQUFHO0lBQ2QsVUFBVSxFQUFFLEVBQUU7SUFDZCxJQUFJLEVBQUUsa0JBQWtCO0NBQzNCLENBQUM7QUFFRjs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLGNBQWMsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0FBRXpFLE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUVaLENBQUMsUUFBaUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUMzRCxPQUFPLEVBQUUsZ0JBQWdCO0lBQ3pCLElBQUksRUFBRTtRQUNGLENBQUMsSUFBSSxRQUFRLEVBQUUsRUFBRSxJQUFJLElBQUksRUFBRSxFQUFFLHVCQUF1QixDQUFDO1FBQ3JELENBQUMsSUFBSSxRQUFRLEVBQUUsRUFBRSxJQUFJLFFBQVEsRUFBRSxFQUFFLGdCQUFnQixDQUFDO0tBQ3JEO0lBQ0QsVUFBVSxFQUFFLGtCQUFrQixDQUFDLFFBQVEsRUFBRSx3QkFBd0IsQ0FBQztDQUNyRSxDQUFDLENBQUM7QUFFSDs7R0FFRztBQUNILE1BS2EsdUJBQXVCO0lBTHBDO1FBTXFCLFlBQU8sR0FBRyxNQUFNLENBQUMsZ0JBQWdCLEVBQUUsRUFBQyxRQUFRLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQztRQU0vRCxjQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUM7UUFHbkMsZUFBVSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDO1FBR3JDLGNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQztRQUduQyxjQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUM7UUFFbkMsU0FBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO1FBRWhCLFlBQU8sR0FBRyxJQUFJLE9BQU8sRUFBUSxDQUFDO0tBS2pEO0lBSFUsV0FBVztRQUNkLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDeEIsQ0FBQzsrR0F4QlEsdUJBQXVCO21HQUF2Qix1QkFBdUIsOFNBRnJCLENBQUMsVUFBVSxDQUFDLGdCQUFnQixFQUFFLHVCQUF1QixDQUFDLENBQUM7O1NBRXpELHVCQUF1Qjs0RkFBdkIsdUJBQXVCO2tCQUxuQyxTQUFTO21CQUFDO29CQUNQLFVBQVUsRUFBRSxJQUFJO29CQUNoQixRQUFRLEVBQUUsa0JBQWtCO29CQUM1QixTQUFTLEVBQUUsQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLDBCQUEwQixDQUFDO2lCQUNyRTs4QkFLVSxPQUFPO3NCQURiLEtBQUs7dUJBQUMsZ0JBQWdCO2dCQUloQixTQUFTO3NCQURmLEtBQUs7dUJBQUMsa0JBQWtCO2dCQUlsQixVQUFVO3NCQURoQixLQUFLO3VCQUFDLG1CQUFtQjtnQkFJbkIsU0FBUztzQkFEZixLQUFLO3VCQUFDLGtCQUFrQjtnQkFJbEIsU0FBUztzQkFEZixLQUFLO3VCQUFDLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7dHlwZSBGYWN0b3J5UHJvdmlkZXIsIHR5cGUgT25DaGFuZ2VzLCBTZWxmfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7RGlyZWN0aXZlLCBpbmplY3QsIElucHV0LCBPcHRpb25hbCwgU2tpcFNlbGZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHt0dWlDcmVhdGVUb2tlbiwgdHVpUHJvdmlkZX0gZnJvbSAnQHRhaWdhLXVpL2Nkay91dGlscy9taXNjZWxsYW5lb3VzJztcbmltcG9ydCB7dHVpT3ZlcnJpZGVPcHRpb25zfSBmcm9tICdAdGFpZ2EtdWkvY29yZS91dGlscyc7XG5pbXBvcnQgdHlwZSB7UG9seW1vcnBoZXVzQ29udGVudH0gZnJvbSAnQHRhaWdhLXVpL3BvbHltb3JwaGV1cyc7XG5pbXBvcnQge1N1YmplY3R9IGZyb20gJ3J4anMnO1xuXG5leHBvcnQgdHlwZSBUdWlIaW50RGlyZWN0aW9uID1cbiAgICB8ICdib3R0b20tbGVmdCdcbiAgICB8ICdib3R0b20tcmlnaHQnXG4gICAgfCAnYm90dG9tJ1xuICAgIHwgJ2xlZnQtYm90dG9tJ1xuICAgIHwgJ2xlZnQtdG9wJ1xuICAgIHwgJ2xlZnQnXG4gICAgfCAncmlnaHQtYm90dG9tJ1xuICAgIHwgJ3JpZ2h0LXRvcCdcbiAgICB8ICdyaWdodCdcbiAgICB8ICd0b3AtbGVmdCdcbiAgICB8ICd0b3AtcmlnaHQnXG4gICAgfCAndG9wJztcblxuZXhwb3J0IGNvbnN0IFRVSV9ISU5UX0RJUkVDVElPTlM6IHJlYWRvbmx5IFR1aUhpbnREaXJlY3Rpb25bXSA9IFtcbiAgICAnYm90dG9tLWxlZnQnLFxuICAgICdib3R0b20nLFxuICAgICdib3R0b20tcmlnaHQnLFxuICAgICd0b3AtbGVmdCcsXG4gICAgJ3RvcCcsXG4gICAgJ3RvcC1yaWdodCcsXG4gICAgJ2xlZnQtdG9wJyxcbiAgICAnbGVmdCcsXG4gICAgJ2xlZnQtYm90dG9tJyxcbiAgICAncmlnaHQtdG9wJyxcbiAgICAncmlnaHQnLFxuICAgICdyaWdodC1ib3R0b20nLFxuXTtcblxuZXhwb3J0IGludGVyZmFjZSBUdWlIaW50T3B0aW9ucyB7XG4gICAgcmVhZG9ubHkgYXBwZWFyYW5jZTogc3RyaW5nO1xuICAgIHJlYWRvbmx5IGRpcmVjdGlvbjogVHVpSGludERpcmVjdGlvbjtcbiAgICByZWFkb25seSBoaWRlRGVsYXk6IG51bWJlcjtcbiAgICByZWFkb25seSBpY29uOiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgc2hvd0RlbGF5OiBudW1iZXI7XG59XG5cbi8qKiBEZWZhdWx0IHZhbHVlcyBmb3IgaGludCBvcHRpb25zICovXG5leHBvcnQgY29uc3QgVFVJX0hJTlRfREVGQVVMVF9PUFRJT05TOiBUdWlIaW50T3B0aW9ucyA9IHtcbiAgICBkaXJlY3Rpb246ICdib3R0b20tbGVmdCcsXG4gICAgc2hvd0RlbGF5OiA1MDAsXG4gICAgaGlkZURlbGF5OiAyMDAsXG4gICAgYXBwZWFyYW5jZTogJycsXG4gICAgaWNvbjogJ0B0dWkuY2lyY2xlLWhlbHAnLFxufTtcblxuLyoqXG4gKiBEZWZhdWx0IHBhcmFtZXRlcnMgZm9yIGhpbnQgZGlyZWN0aXZlXG4gKi9cbmV4cG9ydCBjb25zdCBUVUlfSElOVF9PUFRJT05TID0gdHVpQ3JlYXRlVG9rZW4oVFVJX0hJTlRfREVGQVVMVF9PUFRJT05TKTtcblxuZXhwb3J0IGNvbnN0IHR1aUhpbnRPcHRpb25zUHJvdmlkZXI6IChcbiAgICBvcHRpb25zOiBQYXJ0aWFsPFR1aUhpbnRPcHRpb25zPixcbikgPT4gRmFjdG9yeVByb3ZpZGVyID0gKG92ZXJyaWRlOiBQYXJ0aWFsPFR1aUhpbnRPcHRpb25zPikgPT4gKHtcbiAgICBwcm92aWRlOiBUVUlfSElOVF9PUFRJT05TLFxuICAgIGRlcHM6IFtcbiAgICAgICAgW25ldyBPcHRpb25hbCgpLCBuZXcgU2VsZigpLCBUdWlIaW50T3B0aW9uc0RpcmVjdGl2ZV0sXG4gICAgICAgIFtuZXcgT3B0aW9uYWwoKSwgbmV3IFNraXBTZWxmKCksIFRVSV9ISU5UX09QVElPTlNdLFxuICAgIF0sXG4gICAgdXNlRmFjdG9yeTogdHVpT3ZlcnJpZGVPcHRpb25zKG92ZXJyaWRlLCBUVUlfSElOVF9ERUZBVUxUX09QVElPTlMpLFxufSk7XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQ6IGRyb3AgaW4gNS4wXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHN0YW5kYWxvbmU6IHRydWUsXG4gICAgc2VsZWN0b3I6ICdbdHVpSGludENvbnRlbnRdJyxcbiAgICBwcm92aWRlcnM6IFt0dWlQcm92aWRlKFRVSV9ISU5UX09QVElPTlMsIFR1aUhpbnRPcHRpb25zRGlyZWN0aXZlKV0sXG59KVxuZXhwb3J0IGNsYXNzIFR1aUhpbnRPcHRpb25zRGlyZWN0aXZlIGltcGxlbWVudHMgVHVpSGludE9wdGlvbnMsIE9uQ2hhbmdlcyB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBvcHRpb25zID0gaW5qZWN0KFRVSV9ISU5UX09QVElPTlMsIHtza2lwU2VsZjogdHJ1ZX0pO1xuXG4gICAgQElucHV0KCd0dWlIaW50Q29udGVudCcpXG4gICAgcHVibGljIGNvbnRlbnQ6IFBvbHltb3JwaGV1c0NvbnRlbnQ7XG5cbiAgICBASW5wdXQoJ3R1aUhpbnREaXJlY3Rpb24nKVxuICAgIHB1YmxpYyBkaXJlY3Rpb24gPSB0aGlzLm9wdGlvbnMuZGlyZWN0aW9uO1xuXG4gICAgQElucHV0KCd0dWlIaW50QXBwZWFyYW5jZScpXG4gICAgcHVibGljIGFwcGVhcmFuY2UgPSB0aGlzLm9wdGlvbnMuYXBwZWFyYW5jZTtcblxuICAgIEBJbnB1dCgndHVpSGludFNob3dEZWxheScpXG4gICAgcHVibGljIHNob3dEZWxheSA9IHRoaXMub3B0aW9ucy5zaG93RGVsYXk7XG5cbiAgICBASW5wdXQoJ3R1aUhpbnRIaWRlRGVsYXknKVxuICAgIHB1YmxpYyBoaWRlRGVsYXkgPSB0aGlzLm9wdGlvbnMuaGlkZURlbGF5O1xuXG4gICAgcHVibGljIGljb24gPSB0aGlzLm9wdGlvbnMuaWNvbjtcblxuICAgIHB1YmxpYyByZWFkb25seSBjaGFuZ2UkID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcblxuICAgIHB1YmxpYyBuZ09uQ2hhbmdlcygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5jaGFuZ2UkLm5leHQoKTtcbiAgICB9XG59XG4iXX0=