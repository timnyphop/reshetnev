import { Directive, inject, Input, Optional, SkipSelf } from '@angular/core';
import { tuiCreateToken, tuiProvide } from '@taiga-ui/cdk/utils/miscellaneous';
import { tuiOverrideOptions } from '@taiga-ui/core/utils';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
export const TUI_HINT_DIRECTIONS = [
    'bottom-left',
    'bottom',
    'bottom-right',
    'top-left',
    'top',
    'top-right',
    'left-top',
    'left',
    'left-bottom',
    'right-top',
    'right',
    'right-bottom',
];
/** Default values for hint options */
export const TUI_HINT_DEFAULT_OPTIONS = {
    direction: 'bottom-left',
    showDelay: 500,
    hideDelay: 200,
    appearance: '',
    icon: '@tui.circle-help',
};
/**
 * Default parameters for hint directive
 */
export const TUI_HINT_OPTIONS = tuiCreateToken(TUI_HINT_DEFAULT_OPTIONS);
export const tuiHintOptionsProvider = (override) => ({
    provide: TUI_HINT_OPTIONS,
    deps: [
        [new Optional(), TuiHintOptionsDirective],
        [new Optional(), new SkipSelf(), TUI_HINT_OPTIONS],
    ],
    useFactory: tuiOverrideOptions(override, TUI_HINT_DEFAULT_OPTIONS),
});
/**
 * @deprecated: drop in 5.0
 */
class TuiHintOptionsDirective {
    constructor() {
        this.options = inject(TUI_HINT_OPTIONS, { skipSelf: true });
        this.direction = this.options.direction;
        this.appearance = this.options.appearance;
        this.showDelay = this.options.showDelay;
        this.hideDelay = this.options.hideDelay;
        this.icon = this.options.icon;
        this.change$ = new Subject();
    }
    ngOnChanges() {
        this.change$.next();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiHintOptionsDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiHintOptionsDirective, isStandalone: true, selector: "[tuiHintContent]", inputs: { content: ["tuiHintContent", "content"], direction: ["tuiHintDirection", "direction"], appearance: ["tuiHintAppearance", "appearance"], showDelay: ["tuiHintShowDelay", "showDelay"], hideDelay: ["tuiHintHideDelay", "hideDelay"] }, providers: [tuiProvide(TUI_HINT_OPTIONS, TuiHintOptionsDirective)], usesOnChanges: true, ngImport: i0 }); }
}
export { TuiHintOptionsDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiHintOptionsDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[tuiHintContent]',
                    providers: [tuiProvide(TUI_HINT_OPTIONS, TuiHintOptionsDirective)],
                }]
        }], propDecorators: { content: [{
                type: Input,
                args: ['tuiHintContent']
            }], direction: [{
                type: Input,
                args: ['tuiHintDirection']
            }], appearance: [{
                type: Input,
                args: ['tuiHintAppearance']
            }], showDelay: [{
                type: Input,
                args: ['tuiHintShowDelay']
            }], hideDelay: [{
                type: Input,
                args: ['tuiHintHideDelay']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGludC1vcHRpb25zLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvZGlyZWN0aXZlcy9oaW50L2hpbnQtb3B0aW9ucy5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFDLFNBQVMsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDM0UsT0FBTyxFQUFDLGNBQWMsRUFBRSxVQUFVLEVBQUMsTUFBTSxtQ0FBbUMsQ0FBQztBQUM3RSxPQUFPLEVBQUMsa0JBQWtCLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUV4RCxPQUFPLEVBQUMsT0FBTyxFQUFDLE1BQU0sTUFBTSxDQUFDOztBQWdCN0IsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQWdDO0lBQzVELGFBQWE7SUFDYixRQUFRO0lBQ1IsY0FBYztJQUNkLFVBQVU7SUFDVixLQUFLO0lBQ0wsV0FBVztJQUNYLFVBQVU7SUFDVixNQUFNO0lBQ04sYUFBYTtJQUNiLFdBQVc7SUFDWCxPQUFPO0lBQ1AsY0FBYztDQUNqQixDQUFDO0FBVUYsc0NBQXNDO0FBQ3RDLE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUFtQjtJQUNwRCxTQUFTLEVBQUUsYUFBYTtJQUN4QixTQUFTLEVBQUUsR0FBRztJQUNkLFNBQVMsRUFBRSxHQUFHO0lBQ2QsVUFBVSxFQUFFLEVBQUU7SUFDZCxJQUFJLEVBQUUsa0JBQWtCO0NBQzNCLENBQUM7QUFFRjs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLGNBQWMsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0FBRXpFLE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUVaLENBQUMsUUFBaUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUMzRCxPQUFPLEVBQUUsZ0JBQWdCO0lBQ3pCLElBQUksRUFBRTtRQUNGLENBQUMsSUFBSSxRQUFRLEVBQUUsRUFBRSx1QkFBdUIsQ0FBQztRQUN6QyxDQUFDLElBQUksUUFBUSxFQUFFLEVBQUUsSUFBSSxRQUFRLEVBQUUsRUFBRSxnQkFBZ0IsQ0FBQztLQUNyRDtJQUNELFVBQVUsRUFBRSxrQkFBa0IsQ0FBQyxRQUFRLEVBQUUsd0JBQXdCLENBQUM7Q0FDckUsQ0FBQyxDQUFDO0FBRUg7O0dBRUc7QUFDSCxNQUthLHVCQUF1QjtJQUxwQztRQU1xQixZQUFPLEdBQUcsTUFBTSxDQUFDLGdCQUFnQixFQUFFLEVBQUMsUUFBUSxFQUFFLElBQUksRUFBQyxDQUFDLENBQUM7UUFNL0QsY0FBUyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO1FBR25DLGVBQVUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQztRQUdyQyxjQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUM7UUFHbkMsY0FBUyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO1FBRW5DLFNBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztRQUVoQixZQUFPLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztLQUtqRDtJQUhVLFdBQVc7UUFDZCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3hCLENBQUM7K0dBeEJRLHVCQUF1QjttR0FBdkIsdUJBQXVCLDhTQUZyQixDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsRUFBRSx1QkFBdUIsQ0FBQyxDQUFDOztTQUV6RCx1QkFBdUI7NEZBQXZCLHVCQUF1QjtrQkFMbkMsU0FBUzttQkFBQztvQkFDUCxVQUFVLEVBQUUsSUFBSTtvQkFDaEIsUUFBUSxFQUFFLGtCQUFrQjtvQkFDNUIsU0FBUyxFQUFFLENBQUMsVUFBVSxDQUFDLGdCQUFnQiwwQkFBMEIsQ0FBQztpQkFDckU7OEJBS1UsT0FBTztzQkFEYixLQUFLO3VCQUFDLGdCQUFnQjtnQkFJaEIsU0FBUztzQkFEZixLQUFLO3VCQUFDLGtCQUFrQjtnQkFJbEIsVUFBVTtzQkFEaEIsS0FBSzt1QkFBQyxtQkFBbUI7Z0JBSW5CLFNBQVM7c0JBRGYsS0FBSzt1QkFBQyxrQkFBa0I7Z0JBSWxCLFNBQVM7c0JBRGYsS0FBSzt1QkFBQyxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7RmFjdG9yeVByb3ZpZGVyLCBPbkNoYW5nZXN9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtEaXJlY3RpdmUsIGluamVjdCwgSW5wdXQsIE9wdGlvbmFsLCBTa2lwU2VsZn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge3R1aUNyZWF0ZVRva2VuLCB0dWlQcm92aWRlfSBmcm9tICdAdGFpZ2EtdWkvY2RrL3V0aWxzL21pc2NlbGxhbmVvdXMnO1xuaW1wb3J0IHt0dWlPdmVycmlkZU9wdGlvbnN9IGZyb20gJ0B0YWlnYS11aS9jb3JlL3V0aWxzJztcbmltcG9ydCB0eXBlIHtQb2x5bW9ycGhldXNDb250ZW50fSBmcm9tICdAdGFpZ2EtdWkvcG9seW1vcnBoZXVzJztcbmltcG9ydCB7U3ViamVjdH0gZnJvbSAncnhqcyc7XG5cbmV4cG9ydCB0eXBlIFR1aUhpbnREaXJlY3Rpb24gPVxuICAgIHwgJ2JvdHRvbS1sZWZ0J1xuICAgIHwgJ2JvdHRvbS1yaWdodCdcbiAgICB8ICdib3R0b20nXG4gICAgfCAnbGVmdC1ib3R0b20nXG4gICAgfCAnbGVmdC10b3AnXG4gICAgfCAnbGVmdCdcbiAgICB8ICdyaWdodC1ib3R0b20nXG4gICAgfCAncmlnaHQtdG9wJ1xuICAgIHwgJ3JpZ2h0J1xuICAgIHwgJ3RvcC1sZWZ0J1xuICAgIHwgJ3RvcC1yaWdodCdcbiAgICB8ICd0b3AnO1xuXG5leHBvcnQgY29uc3QgVFVJX0hJTlRfRElSRUNUSU9OUzogcmVhZG9ubHkgVHVpSGludERpcmVjdGlvbltdID0gW1xuICAgICdib3R0b20tbGVmdCcsXG4gICAgJ2JvdHRvbScsXG4gICAgJ2JvdHRvbS1yaWdodCcsXG4gICAgJ3RvcC1sZWZ0JyxcbiAgICAndG9wJyxcbiAgICAndG9wLXJpZ2h0JyxcbiAgICAnbGVmdC10b3AnLFxuICAgICdsZWZ0JyxcbiAgICAnbGVmdC1ib3R0b20nLFxuICAgICdyaWdodC10b3AnLFxuICAgICdyaWdodCcsXG4gICAgJ3JpZ2h0LWJvdHRvbScsXG5dO1xuXG5leHBvcnQgaW50ZXJmYWNlIFR1aUhpbnRPcHRpb25zIHtcbiAgICByZWFkb25seSBhcHBlYXJhbmNlOiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgZGlyZWN0aW9uOiBUdWlIaW50RGlyZWN0aW9uO1xuICAgIHJlYWRvbmx5IGhpZGVEZWxheTogbnVtYmVyO1xuICAgIHJlYWRvbmx5IGljb246IHN0cmluZztcbiAgICByZWFkb25seSBzaG93RGVsYXk6IG51bWJlcjtcbn1cblxuLyoqIERlZmF1bHQgdmFsdWVzIGZvciBoaW50IG9wdGlvbnMgKi9cbmV4cG9ydCBjb25zdCBUVUlfSElOVF9ERUZBVUxUX09QVElPTlM6IFR1aUhpbnRPcHRpb25zID0ge1xuICAgIGRpcmVjdGlvbjogJ2JvdHRvbS1sZWZ0JyxcbiAgICBzaG93RGVsYXk6IDUwMCxcbiAgICBoaWRlRGVsYXk6IDIwMCxcbiAgICBhcHBlYXJhbmNlOiAnJyxcbiAgICBpY29uOiAnQHR1aS5jaXJjbGUtaGVscCcsXG59O1xuXG4vKipcbiAqIERlZmF1bHQgcGFyYW1ldGVycyBmb3IgaGludCBkaXJlY3RpdmVcbiAqL1xuZXhwb3J0IGNvbnN0IFRVSV9ISU5UX09QVElPTlMgPSB0dWlDcmVhdGVUb2tlbihUVUlfSElOVF9ERUZBVUxUX09QVElPTlMpO1xuXG5leHBvcnQgY29uc3QgdHVpSGludE9wdGlvbnNQcm92aWRlcjogKFxuICAgIG9wdGlvbnM6IFBhcnRpYWw8VHVpSGludE9wdGlvbnM+LFxuKSA9PiBGYWN0b3J5UHJvdmlkZXIgPSAob3ZlcnJpZGU6IFBhcnRpYWw8VHVpSGludE9wdGlvbnM+KSA9PiAoe1xuICAgIHByb3ZpZGU6IFRVSV9ISU5UX09QVElPTlMsXG4gICAgZGVwczogW1xuICAgICAgICBbbmV3IE9wdGlvbmFsKCksIFR1aUhpbnRPcHRpb25zRGlyZWN0aXZlXSxcbiAgICAgICAgW25ldyBPcHRpb25hbCgpLCBuZXcgU2tpcFNlbGYoKSwgVFVJX0hJTlRfT1BUSU9OU10sXG4gICAgXSxcbiAgICB1c2VGYWN0b3J5OiB0dWlPdmVycmlkZU9wdGlvbnMob3ZlcnJpZGUsIFRVSV9ISU5UX0RFRkFVTFRfT1BUSU9OUyksXG59KTtcblxuLyoqXG4gKiBAZGVwcmVjYXRlZDogZHJvcCBpbiA1LjBcbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgICBzZWxlY3RvcjogJ1t0dWlIaW50Q29udGVudF0nLFxuICAgIHByb3ZpZGVyczogW3R1aVByb3ZpZGUoVFVJX0hJTlRfT1BUSU9OUywgVHVpSGludE9wdGlvbnNEaXJlY3RpdmUpXSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpSGludE9wdGlvbnNEaXJlY3RpdmUgaW1wbGVtZW50cyBUdWlIaW50T3B0aW9ucywgT25DaGFuZ2VzIHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IG9wdGlvbnMgPSBpbmplY3QoVFVJX0hJTlRfT1BUSU9OUywge3NraXBTZWxmOiB0cnVlfSk7XG5cbiAgICBASW5wdXQoJ3R1aUhpbnRDb250ZW50JylcbiAgICBwdWJsaWMgY29udGVudDogUG9seW1vcnBoZXVzQ29udGVudDtcblxuICAgIEBJbnB1dCgndHVpSGludERpcmVjdGlvbicpXG4gICAgcHVibGljIGRpcmVjdGlvbiA9IHRoaXMub3B0aW9ucy5kaXJlY3Rpb247XG5cbiAgICBASW5wdXQoJ3R1aUhpbnRBcHBlYXJhbmNlJylcbiAgICBwdWJsaWMgYXBwZWFyYW5jZSA9IHRoaXMub3B0aW9ucy5hcHBlYXJhbmNlO1xuXG4gICAgQElucHV0KCd0dWlIaW50U2hvd0RlbGF5JylcbiAgICBwdWJsaWMgc2hvd0RlbGF5ID0gdGhpcy5vcHRpb25zLnNob3dEZWxheTtcblxuICAgIEBJbnB1dCgndHVpSGludEhpZGVEZWxheScpXG4gICAgcHVibGljIGhpZGVEZWxheSA9IHRoaXMub3B0aW9ucy5oaWRlRGVsYXk7XG5cbiAgICBwdWJsaWMgaWNvbiA9IHRoaXMub3B0aW9ucy5pY29uO1xuXG4gICAgcHVibGljIHJlYWRvbmx5IGNoYW5nZSQgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuXG4gICAgcHVibGljIG5nT25DaGFuZ2VzKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmNoYW5nZSQubmV4dCgpO1xuICAgIH1cbn1cbiJdfQ==