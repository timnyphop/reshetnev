import { NgForOf } from '@angular/common';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, DestroyRef, inject, } from '@angular/core';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { TuiActiveZone } from '@taiga-ui/cdk/directives/active-zone';
import { tuiParentAnimation } from '@taiga-ui/core/animations';
import { PolymorpheusOutlet, PolymorpheusTemplate } from '@taiga-ui/polymorpheus';
import { TuiHintService } from './hint.service';
import * as i0 from "@angular/core";
class TuiHints {
    constructor() {
        this.hints$ = inject(TuiHintService);
        this.destroyRef = inject(DestroyRef);
        this.cdr = inject(ChangeDetectorRef);
        this.hints = [];
    }
    ngOnInit() {
        // Due to this view being parallel to app content, `markForCheck` from `async` pipe
        // can happen after view was checked, so calling `detectChanges` instead
        this.hints$.pipe(takeUntilDestroyed(this.destroyRef)).subscribe((hints) => {
            this.hints = hints;
            this.cdr.detectChanges();
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiHints, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiHints, isStandalone: true, selector: "tui-hints", host: { attributes: { "aria-live": "polite" } }, ngImport: i0, template: "<div\n    *ngFor=\"let hint of hints\"\n    role=\"tooltip\"\n    @tuiParentAnimation\n    [tuiActiveZoneParent]=\"hint.activeZone || null\"\n>\n    <ng-container *polymorpheusOutlet=\"hint.component; context: {$implicit: hint}\" />\n</div>\n", styles: [":host{position:fixed;top:0;left:0;inline-size:100%;block-size:100%;block-size:0}\n"], dependencies: [{ kind: "directive", type: NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: TuiActiveZone, selector: "[tuiActiveZone]:not(ng-container), [tuiActiveZoneChange]:not(ng-container), [tuiActiveZoneParent]:not(ng-container)", inputs: ["tuiActiveZoneParent"], outputs: ["tuiActiveZoneChange"], exportAs: ["tuiActiveZone"] }, { kind: "directive", type: PolymorpheusOutlet, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }], animations: [tuiParentAnimation], changeDetection: i0.ChangeDetectionStrategy.Default }); }
}
export { TuiHints };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiHints, decorators: [{
            type: Component,
            args: [{ standalone: true, selector: 'tui-hints', imports: [NgForOf, TuiActiveZone, PolymorpheusOutlet, PolymorpheusTemplate], changeDetection: ChangeDetectionStrategy.Default, animations: [tuiParentAnimation], host: {
                        'aria-live': 'polite',
                    }, template: "<div\n    *ngFor=\"let hint of hints\"\n    role=\"tooltip\"\n    @tuiParentAnimation\n    [tuiActiveZoneParent]=\"hint.activeZone || null\"\n>\n    <ng-container *polymorpheusOutlet=\"hint.component; context: {$implicit: hint}\" />\n</div>\n", styles: [":host{position:fixed;top:0;left:0;inline-size:100%;block-size:100%;block-size:0}\n"] }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGludHMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZS9kaXJlY3RpdmVzL2hpbnQvaGludHMuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZS9kaXJlY3RpdmVzL2hpbnQvaGludHMudGVtcGxhdGUuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsT0FBTyxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFFeEMsT0FBTyxFQUNILHVCQUF1QixFQUN2QixpQkFBaUIsRUFDakIsU0FBUyxFQUNULFVBQVUsRUFDVixNQUFNLEdBQ1QsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLGtCQUFrQixFQUFDLE1BQU0sNEJBQTRCLENBQUM7QUFDOUQsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLHNDQUFzQyxDQUFDO0FBQ25FLE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBRTdELE9BQU8sRUFBQyxrQkFBa0IsRUFBRSxvQkFBb0IsRUFBQyxNQUFNLHdCQUF3QixDQUFDO0FBRWhGLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFFOUMsTUFjYSxRQUFRO0lBZHJCO1FBZXFCLFdBQU0sR0FBRyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDaEMsZUFBVSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNoQyxRQUFHLEdBQUcsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFFdkMsVUFBSyxHQUE2QixFQUFFLENBQUM7S0FVbEQ7SUFSVSxRQUFRO1FBQ1gsbUZBQW1GO1FBQ25GLHdFQUF3RTtRQUN4RSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUN0RSxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztZQUNuQixJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQzdCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQzsrR0FkUSxRQUFRO21HQUFSLFFBQVEsc0hDL0JyQixvUEFRQSw0SURZYyxPQUFPLG1IQUFFLGFBQWEsZ1FBQUUsa0JBQWtCLGdIQU14QyxDQUFDLGtCQUFrQixDQUFDOztTQUt2QixRQUFROzRGQUFSLFFBQVE7a0JBZHBCLFNBQVM7aUNBQ00sSUFBSSxZQUNOLFdBQVcsV0FDWixDQUFDLE9BQU8sRUFBRSxhQUFhLEVBQUUsa0JBQWtCLEVBQUUsb0JBQW9CLENBQUMsbUJBSzFELHVCQUF1QixDQUFDLE9BQU8sY0FDcEMsQ0FBQyxrQkFBa0IsQ0FBQyxRQUMxQjt3QkFDRixXQUFXLEVBQUUsUUFBUTtxQkFDeEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge05nRm9yT2Z9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgdHlwZSB7T25Jbml0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gICAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgQ29tcG9uZW50LFxuICAgIERlc3Ryb3lSZWYsXG4gICAgaW5qZWN0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7dGFrZVVudGlsRGVzdHJveWVkfSBmcm9tICdAYW5ndWxhci9jb3JlL3J4anMtaW50ZXJvcCc7XG5pbXBvcnQge1R1aUFjdGl2ZVpvbmV9IGZyb20gJ0B0YWlnYS11aS9jZGsvZGlyZWN0aXZlcy9hY3RpdmUtem9uZSc7XG5pbXBvcnQge3R1aVBhcmVudEFuaW1hdGlvbn0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvYW5pbWF0aW9ucyc7XG5pbXBvcnQgdHlwZSB7VHVpUG9ydGFsSXRlbX0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvdHlwZXMnO1xuaW1wb3J0IHtQb2x5bW9ycGhldXNPdXRsZXQsIFBvbHltb3JwaGV1c1RlbXBsYXRlfSBmcm9tICdAdGFpZ2EtdWkvcG9seW1vcnBoZXVzJztcblxuaW1wb3J0IHtUdWlIaW50U2VydmljZX0gZnJvbSAnLi9oaW50LnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzdGFuZGFsb25lOiB0cnVlLFxuICAgIHNlbGVjdG9yOiAndHVpLWhpbnRzJyxcbiAgICBpbXBvcnRzOiBbTmdGb3JPZiwgVHVpQWN0aXZlWm9uZSwgUG9seW1vcnBoZXVzT3V0bGV0LCBQb2x5bW9ycGhldXNUZW1wbGF0ZV0sXG4gICAgdGVtcGxhdGVVcmw6ICcuL2hpbnRzLnRlbXBsYXRlLmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL2hpbnRzLnN0eWxlLmxlc3MnXSxcbiAgICAvLyBTbyB0aGF0IHdlIGRvIG5vdCBmb3JjZSBPblB1c2ggb24gY3VzdG9tIGhpbnRzXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEBhbmd1bGFyLWVzbGludC9wcmVmZXItb24tcHVzaC1jb21wb25lbnQtY2hhbmdlLWRldGVjdGlvblxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuRGVmYXVsdCxcbiAgICBhbmltYXRpb25zOiBbdHVpUGFyZW50QW5pbWF0aW9uXSxcbiAgICBob3N0OiB7XG4gICAgICAgICdhcmlhLWxpdmUnOiAncG9saXRlJyxcbiAgICB9LFxufSlcbmV4cG9ydCBjbGFzcyBUdWlIaW50cyBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBoaW50cyQgPSBpbmplY3QoVHVpSGludFNlcnZpY2UpO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZGVzdHJveVJlZiA9IGluamVjdChEZXN0cm95UmVmKTtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGNkciA9IGluamVjdChDaGFuZ2VEZXRlY3RvclJlZik7XG5cbiAgICBwcm90ZWN0ZWQgaGludHM6IHJlYWRvbmx5IFR1aVBvcnRhbEl0ZW1bXSA9IFtdO1xuXG4gICAgcHVibGljIG5nT25Jbml0KCk6IHZvaWQge1xuICAgICAgICAvLyBEdWUgdG8gdGhpcyB2aWV3IGJlaW5nIHBhcmFsbGVsIHRvIGFwcCBjb250ZW50LCBgbWFya0ZvckNoZWNrYCBmcm9tIGBhc3luY2AgcGlwZVxuICAgICAgICAvLyBjYW4gaGFwcGVuIGFmdGVyIHZpZXcgd2FzIGNoZWNrZWQsIHNvIGNhbGxpbmcgYGRldGVjdENoYW5nZXNgIGluc3RlYWRcbiAgICAgICAgdGhpcy5oaW50cyQucGlwZSh0YWtlVW50aWxEZXN0cm95ZWQodGhpcy5kZXN0cm95UmVmKSkuc3Vic2NyaWJlKChoaW50cykgPT4ge1xuICAgICAgICAgICAgdGhpcy5oaW50cyA9IGhpbnRzO1xuICAgICAgICAgICAgdGhpcy5jZHIuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iLCI8ZGl2XG4gICAgKm5nRm9yPVwibGV0IGhpbnQgb2YgaGludHNcIlxuICAgIHJvbGU9XCJ0b29sdGlwXCJcbiAgICBAdHVpUGFyZW50QW5pbWF0aW9uXG4gICAgW3R1aUFjdGl2ZVpvbmVQYXJlbnRdPVwiaGludC5hY3RpdmVab25lIHx8IG51bGxcIlxuPlxuICAgIDxuZy1jb250YWluZXIgKnBvbHltb3JwaGV1c091dGxldD1cImhpbnQuY29tcG9uZW50OyBjb250ZXh0OiB7JGltcGxpY2l0OiBoaW50fVwiIC8+XG48L2Rpdj5cbiJdfQ==