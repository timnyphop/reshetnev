import { Directive, inject, INJECTOR, Input } from '@angular/core';
import { TuiActiveZone } from '@taiga-ui/cdk/directives/active-zone';
import { tuiInjectElement } from '@taiga-ui/cdk/utils/dom';
import { tuiAsRectAccessor, tuiAsVehicle } from '@taiga-ui/core/classes';
import { PolymorpheusComponent } from '@taiga-ui/polymorpheus';
import { TUI_HINT_COMPONENT } from './hint.providers';
import { TuiHintService } from './hint.service';
import { TuiHintDriver } from './hint-driver.directive';
import { TuiHintHover } from './hint-hover.directive';
import { TUI_HINT_OPTIONS } from './hint-options.directive';
import { TuiHintPosition } from './hint-position.directive';
import * as i0 from "@angular/core";
import * as i1 from "./hint-driver.directive";
import * as i2 from "./hint-hover.directive";
import * as i3 from "./hint-position.directive";
class TuiHintDirective {
    constructor() {
        this.service = inject(TuiHintService);
        this.appearance = inject(TUI_HINT_OPTIONS).appearance;
        this.component = inject((PolymorpheusComponent));
        this.el = tuiInjectElement();
        this.activeZone = inject(TuiActiveZone, { optional: true });
        this.type = 'hint';
    }
    set tuiHint(content) {
        this.content = content;
        if (!content) {
            this.toggle(false);
        }
    }
    ngOnDestroy() {
        this.toggle(false);
    }
    getClientRect() {
        return this.el.getBoundingClientRect();
    }
    toggle(show) {
        if (show && this.content) {
            this.service.add(this);
        }
        else {
            this.service.remove(this);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiHintDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiHintDirective, isStandalone: true, selector: "[tuiHint]:not(ng-container):not(ng-template)", inputs: { context: ["tuiHintContext", "context"], appearance: ["tuiHintAppearance", "appearance"], tuiHint: "tuiHint" }, providers: [
            tuiAsRectAccessor(TuiHintDirective),
            tuiAsVehicle(TuiHintDirective),
            {
                provide: PolymorpheusComponent,
                deps: [TUI_HINT_COMPONENT, INJECTOR],
                useClass: PolymorpheusComponent,
            },
        ], hostDirectives: [{ directive: i1.TuiHintDriver }, { directive: i2.TuiHintHover, inputs: ["tuiHintHideDelay", "tuiHintHideDelay", "tuiHintShowDelay", "tuiHintShowDelay"] }, { directive: i3.TuiHintPosition, inputs: ["tuiHintDirection", "tuiHintDirection"] }], ngImport: i0 }); }
}
export { TuiHintDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiHintDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[tuiHint]:not(ng-container):not(ng-template)',
                    providers: [
                        tuiAsRectAccessor(TuiHintDirective),
                        tuiAsVehicle(TuiHintDirective),
                        {
                            provide: PolymorpheusComponent,
                            deps: [TUI_HINT_COMPONENT, INJECTOR],
                            useClass: PolymorpheusComponent,
                        },
                    ],
                    hostDirectives: [
                        TuiHintDriver,
                        {
                            directive: TuiHintHover,
                            inputs: ['tuiHintHideDelay', 'tuiHintShowDelay'],
                        },
                        {
                            directive: TuiHintPosition,
                            inputs: ['tuiHintDirection'],
                        },
                    ],
                }]
        }], propDecorators: { context: [{
                type: Input,
                args: ['tuiHintContext']
            }], appearance: [{
                type: Input,
                args: ['tuiHintAppearance']
            }], tuiHint: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGludC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL2RpcmVjdGl2ZXMvaGludC9oaW50LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUMsU0FBUyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ2pFLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxzQ0FBc0MsQ0FBQztBQUNuRSxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUV6RCxPQUFPLEVBQUMsaUJBQWlCLEVBQUUsWUFBWSxFQUFDLE1BQU0sd0JBQXdCLENBQUM7QUFHdkUsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0sd0JBQXdCLENBQUM7QUFFN0QsT0FBTyxFQUFDLGtCQUFrQixFQUFDLE1BQU0sa0JBQWtCLENBQUM7QUFDcEQsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQzlDLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUN0RCxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sd0JBQXdCLENBQUM7QUFDcEQsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDMUQsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLDJCQUEyQixDQUFDOzs7OztBQUUxRCxNQXdCYSxnQkFBZ0I7SUF4QjdCO1FBMkJxQixZQUFPLEdBQUcsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBTTNDLGVBQVUsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxVQUFVLENBQUM7UUFHakQsY0FBUyxHQUFHLE1BQU0sQ0FBQyxDQUFBLHFCQUE4QixDQUFBLENBQUMsQ0FBQztRQUMxQyxPQUFFLEdBQUcsZ0JBQWdCLEVBQUUsQ0FBQztRQUN4QixlQUFVLEdBQUksTUFBTSxDQUFDLGFBQWEsRUFBRSxFQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDO1FBQ3RELFNBQUksR0FBRyxNQUFNLENBQUM7S0EwQmpDO0lBeEJHLElBQ1csT0FBTyxDQUFDLE9BQStCO1FBQzlDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBRXZCLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDVixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3RCO0lBQ0wsQ0FBQztJQUVNLFdBQVc7UUFDZCxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3ZCLENBQUM7SUFFTSxhQUFhO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO0lBQzNDLENBQUM7SUFFTSxNQUFNLENBQUMsSUFBYTtRQUN2QixJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ3RCLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzFCO2FBQU07WUFDSCxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUM3QjtJQUNMLENBQUM7K0dBeENRLGdCQUFnQjttR0FBaEIsZ0JBQWdCLG9OQXJCZDtZQUNQLGlCQUFpQixDQUFDLGdCQUFnQixDQUFDO1lBQ25DLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQztZQUM5QjtnQkFDSSxPQUFPLEVBQUUscUJBQXFCO2dCQUM5QixJQUFJLEVBQUUsQ0FBQyxrQkFBa0IsRUFBRSxRQUFRLENBQUM7Z0JBQ3BDLFFBQVEsRUFBRSxxQkFBcUI7YUFDbEM7U0FDSjs7U0FhUSxnQkFBZ0I7NEZBQWhCLGdCQUFnQjtrQkF4QjVCLFNBQVM7bUJBQUM7b0JBQ1AsVUFBVSxFQUFFLElBQUk7b0JBQ2hCLFFBQVEsRUFBRSw4Q0FBOEM7b0JBQ3hELFNBQVMsRUFBRTt3QkFDUCxpQkFBaUIsa0JBQWtCO3dCQUNuQyxZQUFZLGtCQUFrQjt3QkFDOUI7NEJBQ0ksT0FBTyxFQUFFLHFCQUFxQjs0QkFDOUIsSUFBSSxFQUFFLENBQUMsa0JBQWtCLEVBQUUsUUFBUSxDQUFDOzRCQUNwQyxRQUFRLEVBQUUscUJBQXFCO3lCQUNsQztxQkFDSjtvQkFDRCxjQUFjLEVBQUU7d0JBQ1osYUFBYTt3QkFDYjs0QkFDSSxTQUFTLEVBQUUsWUFBWTs0QkFDdkIsTUFBTSxFQUFFLENBQUMsa0JBQWtCLEVBQUUsa0JBQWtCLENBQUM7eUJBQ25EO3dCQUNEOzRCQUNJLFNBQVMsRUFBRSxlQUFlOzRCQUMxQixNQUFNLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQzt5QkFDL0I7cUJBQ0o7aUJBQ0o7OEJBT1UsT0FBTztzQkFEYixLQUFLO3VCQUFDLGdCQUFnQjtnQkFJaEIsVUFBVTtzQkFEaEIsS0FBSzt1QkFBQyxtQkFBbUI7Z0JBVWYsT0FBTztzQkFEakIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHtPbkRlc3Ryb3l9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtEaXJlY3RpdmUsIGluamVjdCwgSU5KRUNUT1IsIElucHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7VHVpQWN0aXZlWm9uZX0gZnJvbSAnQHRhaWdhLXVpL2Nkay9kaXJlY3RpdmVzL2FjdGl2ZS16b25lJztcbmltcG9ydCB7dHVpSW5qZWN0RWxlbWVudH0gZnJvbSAnQHRhaWdhLXVpL2Nkay91dGlscy9kb20nO1xuaW1wb3J0IHR5cGUge1R1aVJlY3RBY2Nlc3NvciwgVHVpVmVoaWNsZX0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvY2xhc3Nlcyc7XG5pbXBvcnQge3R1aUFzUmVjdEFjY2Vzc29yLCB0dWlBc1ZlaGljbGV9IGZyb20gJ0B0YWlnYS11aS9jb3JlL2NsYXNzZXMnO1xuaW1wb3J0IHR5cGUge1R1aVBvcnRhbEl0ZW19IGZyb20gJ0B0YWlnYS11aS9jb3JlL3R5cGVzJztcbmltcG9ydCB0eXBlIHtQb2x5bW9ycGhldXNDb250ZW50fSBmcm9tICdAdGFpZ2EtdWkvcG9seW1vcnBoZXVzJztcbmltcG9ydCB7UG9seW1vcnBoZXVzQ29tcG9uZW50fSBmcm9tICdAdGFpZ2EtdWkvcG9seW1vcnBoZXVzJztcblxuaW1wb3J0IHtUVUlfSElOVF9DT01QT05FTlR9IGZyb20gJy4vaGludC5wcm92aWRlcnMnO1xuaW1wb3J0IHtUdWlIaW50U2VydmljZX0gZnJvbSAnLi9oaW50LnNlcnZpY2UnO1xuaW1wb3J0IHtUdWlIaW50RHJpdmVyfSBmcm9tICcuL2hpbnQtZHJpdmVyLmRpcmVjdGl2ZSc7XG5pbXBvcnQge1R1aUhpbnRIb3Zlcn0gZnJvbSAnLi9oaW50LWhvdmVyLmRpcmVjdGl2ZSc7XG5pbXBvcnQge1RVSV9ISU5UX09QVElPTlN9IGZyb20gJy4vaGludC1vcHRpb25zLmRpcmVjdGl2ZSc7XG5pbXBvcnQge1R1aUhpbnRQb3NpdGlvbn0gZnJvbSAnLi9oaW50LXBvc2l0aW9uLmRpcmVjdGl2ZSc7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHN0YW5kYWxvbmU6IHRydWUsXG4gICAgc2VsZWN0b3I6ICdbdHVpSGludF06bm90KG5nLWNvbnRhaW5lcik6bm90KG5nLXRlbXBsYXRlKScsXG4gICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHR1aUFzUmVjdEFjY2Vzc29yKFR1aUhpbnREaXJlY3RpdmUpLFxuICAgICAgICB0dWlBc1ZlaGljbGUoVHVpSGludERpcmVjdGl2ZSksXG4gICAgICAgIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IFBvbHltb3JwaGV1c0NvbXBvbmVudCxcbiAgICAgICAgICAgIGRlcHM6IFtUVUlfSElOVF9DT01QT05FTlQsIElOSkVDVE9SXSxcbiAgICAgICAgICAgIHVzZUNsYXNzOiBQb2x5bW9ycGhldXNDb21wb25lbnQsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBob3N0RGlyZWN0aXZlczogW1xuICAgICAgICBUdWlIaW50RHJpdmVyLFxuICAgICAgICB7XG4gICAgICAgICAgICBkaXJlY3RpdmU6IFR1aUhpbnRIb3ZlcixcbiAgICAgICAgICAgIGlucHV0czogWyd0dWlIaW50SGlkZURlbGF5JywgJ3R1aUhpbnRTaG93RGVsYXknXSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGlyZWN0aXZlOiBUdWlIaW50UG9zaXRpb24sXG4gICAgICAgICAgICBpbnB1dHM6IFsndHVpSGludERpcmVjdGlvbiddLFxuICAgICAgICB9LFxuICAgIF0sXG59KVxuZXhwb3J0IGNsYXNzIFR1aUhpbnREaXJlY3RpdmU8Qz5cbiAgICBpbXBsZW1lbnRzIE9uRGVzdHJveSwgVHVpUG9ydGFsSXRlbTxDPiwgVHVpUmVjdEFjY2Vzc29yLCBUdWlWZWhpY2xlXG57XG4gICAgcHJpdmF0ZSByZWFkb25seSBzZXJ2aWNlID0gaW5qZWN0KFR1aUhpbnRTZXJ2aWNlKTtcblxuICAgIEBJbnB1dCgndHVpSGludENvbnRleHQnKVxuICAgIHB1YmxpYyBjb250ZXh0PzogQztcblxuICAgIEBJbnB1dCgndHVpSGludEFwcGVhcmFuY2UnKVxuICAgIHB1YmxpYyBhcHBlYXJhbmNlID0gaW5qZWN0KFRVSV9ISU5UX09QVElPTlMpLmFwcGVhcmFuY2U7XG5cbiAgICBwdWJsaWMgY29udGVudDogUG9seW1vcnBoZXVzQ29udGVudDxDPjtcbiAgICBwdWJsaWMgY29tcG9uZW50ID0gaW5qZWN0KFBvbHltb3JwaGV1c0NvbXBvbmVudDx1bmtub3duPik7XG4gICAgcHVibGljIHJlYWRvbmx5IGVsID0gdHVpSW5qZWN0RWxlbWVudCgpO1xuICAgIHB1YmxpYyByZWFkb25seSBhY3RpdmVab25lPyA9IGluamVjdChUdWlBY3RpdmVab25lLCB7b3B0aW9uYWw6IHRydWV9KTtcbiAgICBwdWJsaWMgcmVhZG9ubHkgdHlwZSA9ICdoaW50JztcblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIHNldCB0dWlIaW50KGNvbnRlbnQ6IFBvbHltb3JwaGV1c0NvbnRlbnQ8Qz4pIHtcbiAgICAgICAgdGhpcy5jb250ZW50ID0gY29udGVudDtcblxuICAgICAgICBpZiAoIWNvbnRlbnQpIHtcbiAgICAgICAgICAgIHRoaXMudG9nZ2xlKGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy50b2dnbGUoZmFsc2UpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRDbGllbnRSZWN0KCk6IERPTVJlY3Qge1xuICAgICAgICByZXR1cm4gdGhpcy5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdG9nZ2xlKHNob3c6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgaWYgKHNob3cgJiYgdGhpcy5jb250ZW50KSB7XG4gICAgICAgICAgICB0aGlzLnNlcnZpY2UuYWRkKHRoaXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZXJ2aWNlLnJlbW92ZSh0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==