import { AsyncPipe, NgIf } from '@angular/common';
import { ChangeDetectionStrategy, Component, inject, Input } from '@angular/core';
import { TuiValidationError } from '@taiga-ui/cdk/classes';
import { TuiLet } from '@taiga-ui/cdk/directives/let';
import { tuiIsString } from '@taiga-ui/cdk/utils/miscellaneous';
import { tuiFadeIn, tuiHeightCollapse } from '@taiga-ui/core/animations';
import { TUI_ANIMATIONS_SPEED, TUI_DEFAULT_ERROR_MESSAGE } from '@taiga-ui/core/tokens';
import { tuiToAnimationOptions } from '@taiga-ui/core/utils';
import { PolymorpheusOutlet, PolymorpheusTemplate } from '@taiga-ui/polymorpheus';
import * as i0 from "@angular/core";
class TuiError {
    constructor() {
        this.options = tuiToAnimationOptions(inject(TUI_ANIMATIONS_SPEED));
        this.error = null;
        this.visible = true;
        this.defaultErrorMessage$ = inject(TUI_DEFAULT_ERROR_MESSAGE);
    }
    set errorSetter(error) {
        this.error = tuiIsString(error) ? new TuiValidationError(error) : error;
    }
    onAnimation(visible) {
        this.visible = visible;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiError, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiError, isStandalone: true, selector: "tui-error", inputs: { errorSetter: ["error", "errorSetter"] }, host: { listeners: { "animationcancel.self": "onAnimation(false)", "animationstart.self": "onAnimation(true)" } }, ngImport: i0, template: "<ng-container *tuiLet=\"defaultErrorMessage$ | async as defaultErrorMessage\">\n    <div\n        *ngIf=\"error && visible\"\n        automation-id=\"tui-error__text\"\n        class=\"t-message-text\"\n        [@tuiFadeIn]=\"options\"\n        [@tuiHeightCollapse]=\"options\"\n    >\n        <ng-container *polymorpheusOutlet=\"error.message || defaultErrorMessage as text; context: error.context || {}\">\n            {{ text }}\n        </ng-container>\n    </div>\n</ng-container>\n", styles: [":host{display:block;font:var(--tui-font-text-s);color:var(--tui-text-negative);word-wrap:break-word;animation:tuiPresent 1s infinite}.t-message-text{margin-top:.25rem;white-space:pre-line}\n"], dependencies: [{ kind: "pipe", type: AsyncPipe, name: "async" }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: PolymorpheusOutlet, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { kind: "directive", type: TuiLet, selector: "[tuiLet]", inputs: ["tuiLet"] }], animations: [tuiHeightCollapse, tuiFadeIn], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { TuiError };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiError, decorators: [{
            type: Component,
            args: [{ standalone: true, selector: 'tui-error', imports: [AsyncPipe, NgIf, PolymorpheusOutlet, PolymorpheusTemplate, TuiLet], changeDetection: ChangeDetectionStrategy.OnPush, animations: [tuiHeightCollapse, tuiFadeIn], host: {
                        '(animationcancel.self)': 'onAnimation(false)',
                        '(animationstart.self)': 'onAnimation(true)',
                    }, template: "<ng-container *tuiLet=\"defaultErrorMessage$ | async as defaultErrorMessage\">\n    <div\n        *ngIf=\"error && visible\"\n        automation-id=\"tui-error__text\"\n        class=\"t-message-text\"\n        [@tuiFadeIn]=\"options\"\n        [@tuiHeightCollapse]=\"options\"\n    >\n        <ng-container *polymorpheusOutlet=\"error.message || defaultErrorMessage as text; context: error.context || {}\">\n            {{ text }}\n        </ng-container>\n    </div>\n</ng-container>\n", styles: [":host{display:block;font:var(--tui-font-text-s);color:var(--tui-text-negative);word-wrap:break-word;animation:tuiPresent 1s infinite}.t-message-text{margin-top:.25rem;white-space:pre-line}\n"] }]
        }], propDecorators: { errorSetter: [{
                type: Input,
                args: ['error']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3IuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZS9jb21wb25lbnRzL2Vycm9yL2Vycm9yLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvY29tcG9uZW50cy9lcnJvci9lcnJvci50ZW1wbGF0ZS5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsSUFBSSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDaEQsT0FBTyxFQUFDLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ2hGLE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBQ3pELE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSw4QkFBOEIsQ0FBQztBQUNwRCxPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0sbUNBQW1DLENBQUM7QUFDOUQsT0FBTyxFQUFDLFNBQVMsRUFBRSxpQkFBaUIsRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBQ3ZFLE9BQU8sRUFBQyxvQkFBb0IsRUFBRSx5QkFBeUIsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBQ3RGLE9BQU8sRUFBQyxxQkFBcUIsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBQzNELE9BQU8sRUFBQyxrQkFBa0IsRUFBRSxvQkFBb0IsRUFBQyxNQUFNLHdCQUF3QixDQUFDOztBQUVoRixNQWFhLFFBQVE7SUFickI7UUFjdUIsWUFBTyxHQUFHLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUM7UUFDdkUsVUFBSyxHQUE4QixJQUFJLENBQUM7UUFDeEMsWUFBTyxHQUFHLElBQUksQ0FBQztRQUNOLHlCQUFvQixHQUFHLE1BQU0sQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0tBVS9FO0lBUkcsSUFDVyxXQUFXLENBQUMsS0FBeUM7UUFDNUQsSUFBSSxDQUFDLEtBQUssR0FBRyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUM1RSxDQUFDO0lBRVMsV0FBVyxDQUFDLE9BQWdCO1FBQ2xDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQzNCLENBQUM7K0dBYlEsUUFBUTttR0FBUixRQUFRLDJPQ3ZCckIseWVBYUEsbVBEQWMsU0FBUyw4Q0FBRSxJQUFJLDZGQUFFLGtCQUFrQiw4SEFBd0IsTUFBTSwyREFJL0QsQ0FBQyxpQkFBaUIsRUFBRSxTQUFTLENBQUM7O1NBTWpDLFFBQVE7NEZBQVIsUUFBUTtrQkFicEIsU0FBUztpQ0FDTSxJQUFJLFlBQ04sV0FBVyxXQUNaLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxrQkFBa0IsRUFBRSxvQkFBb0IsRUFBRSxNQUFNLENBQUMsbUJBRzNELHVCQUF1QixDQUFDLE1BQU0sY0FDbkMsQ0FBQyxpQkFBaUIsRUFBRSxTQUFTLENBQUMsUUFDcEM7d0JBQ0Ysd0JBQXdCLEVBQUUsb0JBQW9CO3dCQUM5Qyx1QkFBdUIsRUFBRSxtQkFBbUI7cUJBQy9DOzhCQVNVLFdBQVc7c0JBRHJCLEtBQUs7dUJBQUMsT0FBTyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QXN5bmNQaXBlLCBOZ0lmfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBpbmplY3QsIElucHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7VHVpVmFsaWRhdGlvbkVycm9yfSBmcm9tICdAdGFpZ2EtdWkvY2RrL2NsYXNzZXMnO1xuaW1wb3J0IHtUdWlMZXR9IGZyb20gJ0B0YWlnYS11aS9jZGsvZGlyZWN0aXZlcy9sZXQnO1xuaW1wb3J0IHt0dWlJc1N0cmluZ30gZnJvbSAnQHRhaWdhLXVpL2Nkay91dGlscy9taXNjZWxsYW5lb3VzJztcbmltcG9ydCB7dHVpRmFkZUluLCB0dWlIZWlnaHRDb2xsYXBzZX0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvYW5pbWF0aW9ucyc7XG5pbXBvcnQge1RVSV9BTklNQVRJT05TX1NQRUVELCBUVUlfREVGQVVMVF9FUlJPUl9NRVNTQUdFfSBmcm9tICdAdGFpZ2EtdWkvY29yZS90b2tlbnMnO1xuaW1wb3J0IHt0dWlUb0FuaW1hdGlvbk9wdGlvbnN9IGZyb20gJ0B0YWlnYS11aS9jb3JlL3V0aWxzJztcbmltcG9ydCB7UG9seW1vcnBoZXVzT3V0bGV0LCBQb2x5bW9ycGhldXNUZW1wbGF0ZX0gZnJvbSAnQHRhaWdhLXVpL3BvbHltb3JwaGV1cyc7XG5cbkBDb21wb25lbnQoe1xuICAgIHN0YW5kYWxvbmU6IHRydWUsXG4gICAgc2VsZWN0b3I6ICd0dWktZXJyb3InLFxuICAgIGltcG9ydHM6IFtBc3luY1BpcGUsIE5nSWYsIFBvbHltb3JwaGV1c091dGxldCwgUG9seW1vcnBoZXVzVGVtcGxhdGUsIFR1aUxldF0sXG4gICAgdGVtcGxhdGVVcmw6ICcuL2Vycm9yLnRlbXBsYXRlLmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL2Vycm9yLnN0eWxlLmxlc3MnXSxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgICBhbmltYXRpb25zOiBbdHVpSGVpZ2h0Q29sbGFwc2UsIHR1aUZhZGVJbl0sXG4gICAgaG9zdDoge1xuICAgICAgICAnKGFuaW1hdGlvbmNhbmNlbC5zZWxmKSc6ICdvbkFuaW1hdGlvbihmYWxzZSknLFxuICAgICAgICAnKGFuaW1hdGlvbnN0YXJ0LnNlbGYpJzogJ29uQW5pbWF0aW9uKHRydWUpJyxcbiAgICB9LFxufSlcbmV4cG9ydCBjbGFzcyBUdWlFcnJvciB7XG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IG9wdGlvbnMgPSB0dWlUb0FuaW1hdGlvbk9wdGlvbnMoaW5qZWN0KFRVSV9BTklNQVRJT05TX1NQRUVEKSk7XG4gICAgcHJvdGVjdGVkIGVycm9yOiBUdWlWYWxpZGF0aW9uRXJyb3IgfCBudWxsID0gbnVsbDtcbiAgICBwcm90ZWN0ZWQgdmlzaWJsZSA9IHRydWU7XG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGRlZmF1bHRFcnJvck1lc3NhZ2UkID0gaW5qZWN0KFRVSV9ERUZBVUxUX0VSUk9SX01FU1NBR0UpO1xuXG4gICAgQElucHV0KCdlcnJvcicpXG4gICAgcHVibGljIHNldCBlcnJvclNldHRlcihlcnJvcjogVHVpVmFsaWRhdGlvbkVycm9yIHwgc3RyaW5nIHwgbnVsbCkge1xuICAgICAgICB0aGlzLmVycm9yID0gdHVpSXNTdHJpbmcoZXJyb3IpID8gbmV3IFR1aVZhbGlkYXRpb25FcnJvcihlcnJvcikgOiBlcnJvcjtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgb25BbmltYXRpb24odmlzaWJsZTogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICB0aGlzLnZpc2libGUgPSB2aXNpYmxlO1xuICAgIH1cbn1cbiIsIjxuZy1jb250YWluZXIgKnR1aUxldD1cImRlZmF1bHRFcnJvck1lc3NhZ2UkIHwgYXN5bmMgYXMgZGVmYXVsdEVycm9yTWVzc2FnZVwiPlxuICAgIDxkaXZcbiAgICAgICAgKm5nSWY9XCJlcnJvciAmJiB2aXNpYmxlXCJcbiAgICAgICAgYXV0b21hdGlvbi1pZD1cInR1aS1lcnJvcl9fdGV4dFwiXG4gICAgICAgIGNsYXNzPVwidC1tZXNzYWdlLXRleHRcIlxuICAgICAgICBbQHR1aUZhZGVJbl09XCJvcHRpb25zXCJcbiAgICAgICAgW0B0dWlIZWlnaHRDb2xsYXBzZV09XCJvcHRpb25zXCJcbiAgICA+XG4gICAgICAgIDxuZy1jb250YWluZXIgKnBvbHltb3JwaGV1c091dGxldD1cImVycm9yLm1lc3NhZ2UgfHwgZGVmYXVsdEVycm9yTWVzc2FnZSBhcyB0ZXh0OyBjb250ZXh0OiBlcnJvci5jb250ZXh0IHx8IHt9XCI+XG4gICAgICAgICAgICB7eyB0ZXh0IH19XG4gICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgIDwvZGl2PlxuPC9uZy1jb250YWluZXI+XG4iXX0=