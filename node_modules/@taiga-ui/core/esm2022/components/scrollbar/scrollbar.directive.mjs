import { Directive, inject, Input } from '@angular/core';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { WA_ANIMATION_FRAME } from '@ng-web-apis/common';
import { tuiScrollFrom, tuiZonefree, tuiZonefreeScheduler, } from '@taiga-ui/cdk/observables';
import { tuiInjectElement } from '@taiga-ui/cdk/utils/dom';
import { TUI_SCROLL_REF } from '@taiga-ui/core/tokens';
import { merge, throttleTime } from 'rxjs';
import { TuiScrollbarService } from './scrollbar.service';
import * as i0 from "@angular/core";
const MIN_WIDTH = 24;
class TuiScrollbarDirective {
    constructor() {
        this.el = inject(TUI_SCROLL_REF).nativeElement;
        this.style = tuiInjectElement().style;
        this.scrollSub = inject(TuiScrollbarService)
            .pipe(takeUntilDestroyed())
            .subscribe(([top, left]) => {
            this.el.style.scrollBehavior = 'auto';
            this.el.scrollTo({ top, left });
            this.el.style.scrollBehavior = '';
        });
        this.styleSub = merge(inject(WA_ANIMATION_FRAME).pipe(throttleTime(100, tuiZonefreeScheduler())), tuiScrollFrom(this.el))
            .pipe(tuiZonefree(), takeUntilDestroyed())
            .subscribe(() => {
            const dimension = {
                scrollTop: this.el.scrollTop,
                scrollHeight: this.el.scrollHeight,
                clientHeight: this.el.clientHeight,
                scrollLeft: this.el.scrollLeft,
                scrollWidth: this.el.scrollWidth,
                clientWidth: this.el.clientWidth,
            };
            const thumb = `${this.getThumb(dimension) * 100}%`;
            const view = `${this.getView(dimension) * 100}%`;
            if (this.tuiScrollbar === 'vertical') {
                this.style.top = thumb;
                this.style.height = view;
            }
            else {
                this.style.left = thumb;
                this.style.width = view;
            }
        });
        this.tuiScrollbar = 'vertical';
    }
    getScrolled(dimension) {
        return this.tuiScrollbar === 'vertical'
            ? dimension.scrollTop / (dimension.scrollHeight - dimension.clientHeight)
            : dimension.scrollLeft / (dimension.scrollWidth - dimension.clientWidth);
    }
    getCompensation(dimension) {
        if (((dimension.clientHeight * dimension.clientHeight) / dimension.scrollHeight >
            MIN_WIDTH &&
            this.tuiScrollbar === 'vertical') ||
            ((dimension.clientWidth * dimension.clientWidth) / dimension.scrollWidth >
                MIN_WIDTH &&
                this.tuiScrollbar === 'horizontal')) {
            return 0;
        }
        return this.tuiScrollbar === 'vertical'
            ? MIN_WIDTH / dimension.clientHeight
            : MIN_WIDTH / dimension.clientWidth;
    }
    getThumb(dimension) {
        const compensation = this.getCompensation(dimension) || this.getView(dimension);
        return this.getScrolled(dimension) * (1 - compensation);
    }
    getView(dimension) {
        return this.tuiScrollbar === 'vertical'
            ? Math.ceil((dimension.clientHeight / dimension.scrollHeight) * 100) / 100
            : Math.ceil((dimension.clientWidth / dimension.scrollWidth) * 100) / 100;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiScrollbarDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiScrollbarDirective, isStandalone: true, selector: "[tuiScrollbar]", inputs: { tuiScrollbar: "tuiScrollbar" }, providers: [TuiScrollbarService], ngImport: i0 }); }
}
export { TuiScrollbarDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiScrollbarDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[tuiScrollbar]',
                    providers: [TuiScrollbarService],
                }]
        }], propDecorators: { tuiScrollbar: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,