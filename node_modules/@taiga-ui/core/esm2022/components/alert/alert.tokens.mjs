import { inject } from '@angular/core';
import { TUI_IS_MOBILE } from '@taiga-ui/cdk/tokens';
import { tuiCreateToken, tuiCreateTokenFromFactory, } from '@taiga-ui/cdk/utils/miscellaneous';
import { TUI_NOTIFICATION_OPTIONS } from '@taiga-ui/core/components/notification';
import { BehaviorSubject, combineLatest, map, of } from 'rxjs';
export const TUI_ALERT_DEFAULT_OPTIONS = {
    autoClose: 3000,
    label: '',
    closeable: true,
    data: undefined,
};
export const TUI_ALERT_OPTIONS = tuiCreateTokenFromFactory(() => ({
    ...TUI_ALERT_DEFAULT_OPTIONS,
    ...inject(TUI_NOTIFICATION_OPTIONS),
}));
export const TUI_ALERT_POSITION = tuiCreateTokenFromFactory(() => inject(TUI_IS_MOBILE) ? '1rem 1rem 0 auto' : '2rem 3rem 0 auto');
export const TUI_ALERTS = tuiCreateToken(new BehaviorSubject([]));
/**
 * Grouping alerts by their component
 */
export const TUI_ALERTS_GROUPED = tuiCreateTokenFromFactory(() => combineLatest([
    of(new Map()),
    inject(TUI_ALERTS),
]).pipe(map(([map, alerts]) => {
    map.forEach((_, key) => map.set(key, []));
    alerts.forEach((alert) => {
        const key = alert.component.component;
        const value = map.get(key) || [];
        map.set(key, [...value, alert]);
    });
    return Array.from(map.values());
})));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnQudG9rZW5zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZS9jb21wb25lbnRzL2FsZXJ0L2FsZXJ0LnRva2Vucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUMsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRXJDLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUNuRCxPQUFPLEVBQ0gsY0FBYyxFQUNkLHlCQUF5QixHQUM1QixNQUFNLG1DQUFtQyxDQUFDO0FBQzNDLE9BQU8sRUFBQyx3QkFBd0IsRUFBQyxNQUFNLHdDQUF3QyxDQUFDO0FBQ2hGLE9BQU8sRUFBQyxlQUFlLEVBQUUsYUFBYSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFJN0QsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQWlEO0lBQ25GLFNBQVMsRUFBRSxJQUFJO0lBQ2YsS0FBSyxFQUFFLEVBQUU7SUFDVCxTQUFTLEVBQUUsSUFBSTtJQUNmLElBQUksRUFBRSxTQUFTO0NBQ2xCLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyx5QkFBeUIsQ0FBa0IsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUMvRSxHQUFHLHlCQUF5QjtJQUM1QixHQUFHLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQztDQUN0QyxDQUFDLENBQUMsQ0FBQztBQUVKLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLHlCQUF5QixDQUFTLEdBQUcsRUFBRSxDQUNyRSxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FDbEUsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxjQUFjLENBQ3BDLElBQUksZUFBZSxDQUFzQyxFQUFFLENBQUMsQ0FDL0QsQ0FBQztBQUVGOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUcseUJBQXlCLENBQUMsR0FBRyxFQUFFLENBQzdELGFBQWEsQ0FBQztJQUNWLEVBQUUsQ0FBQyxJQUFJLEdBQUcsRUFBa0QsQ0FBQztJQUM3RCxNQUFNLENBQUMsVUFBVSxDQUFDO0NBQ3JCLENBQUMsQ0FBQyxJQUFJLENBQ0gsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLEVBQUUsRUFBRTtJQUNsQixHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUUxQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7UUFDckIsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUM7UUFDdEMsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7UUFFakMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ3BDLENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0FBQ3BDLENBQUMsQ0FBQyxDQUNMLENBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHtUeXBlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7aW5qZWN0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB0eXBlIHtUdWlQb3BvdmVyfSBmcm9tICdAdGFpZ2EtdWkvY2RrL3NlcnZpY2VzJztcbmltcG9ydCB7VFVJX0lTX01PQklMRX0gZnJvbSAnQHRhaWdhLXVpL2Nkay90b2tlbnMnO1xuaW1wb3J0IHtcbiAgICB0dWlDcmVhdGVUb2tlbixcbiAgICB0dWlDcmVhdGVUb2tlbkZyb21GYWN0b3J5LFxufSBmcm9tICdAdGFpZ2EtdWkvY2RrL3V0aWxzL21pc2NlbGxhbmVvdXMnO1xuaW1wb3J0IHtUVUlfTk9USUZJQ0FUSU9OX09QVElPTlN9IGZyb20gJ0B0YWlnYS11aS9jb3JlL2NvbXBvbmVudHMvbm90aWZpY2F0aW9uJztcbmltcG9ydCB7QmVoYXZpb3JTdWJqZWN0LCBjb21iaW5lTGF0ZXN0LCBtYXAsIG9mfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHR5cGUge1R1aUFsZXJ0T3B0aW9uc30gZnJvbSAnLi9hbGVydC5pbnRlcmZhY2VzJztcblxuZXhwb3J0IGNvbnN0IFRVSV9BTEVSVF9ERUZBVUxUX09QVElPTlM6IE9taXQ8VHVpQWxlcnRPcHRpb25zLCAnYXBwZWFyYW5jZScgfCAnaWNvbic+ID0ge1xuICAgIGF1dG9DbG9zZTogMzAwMCxcbiAgICBsYWJlbDogJycsXG4gICAgY2xvc2VhYmxlOiB0cnVlLFxuICAgIGRhdGE6IHVuZGVmaW5lZCxcbn07XG5cbmV4cG9ydCBjb25zdCBUVUlfQUxFUlRfT1BUSU9OUyA9IHR1aUNyZWF0ZVRva2VuRnJvbUZhY3Rvcnk8VHVpQWxlcnRPcHRpb25zPigoKSA9PiAoe1xuICAgIC4uLlRVSV9BTEVSVF9ERUZBVUxUX09QVElPTlMsXG4gICAgLi4uaW5qZWN0KFRVSV9OT1RJRklDQVRJT05fT1BUSU9OUyksXG59KSk7XG5cbmV4cG9ydCBjb25zdCBUVUlfQUxFUlRfUE9TSVRJT04gPSB0dWlDcmVhdGVUb2tlbkZyb21GYWN0b3J5PHN0cmluZz4oKCkgPT5cbiAgICBpbmplY3QoVFVJX0lTX01PQklMRSkgPyAnMXJlbSAxcmVtIDAgYXV0bycgOiAnMnJlbSAzcmVtIDAgYXV0bycsXG4pO1xuXG5leHBvcnQgY29uc3QgVFVJX0FMRVJUUyA9IHR1aUNyZWF0ZVRva2VuKFxuICAgIG5ldyBCZWhhdmlvclN1YmplY3Q8UmVhZG9ubHlBcnJheTxUdWlQb3BvdmVyPGFueSwgYW55Pj4+KFtdKSxcbik7XG5cbi8qKlxuICogR3JvdXBpbmcgYWxlcnRzIGJ5IHRoZWlyIGNvbXBvbmVudFxuICovXG5leHBvcnQgY29uc3QgVFVJX0FMRVJUU19HUk9VUEVEID0gdHVpQ3JlYXRlVG9rZW5Gcm9tRmFjdG9yeSgoKSA9PlxuICAgIGNvbWJpbmVMYXRlc3QoW1xuICAgICAgICBvZihuZXcgTWFwPFR5cGU8YW55PiwgUmVhZG9ubHlBcnJheTxUdWlQb3BvdmVyPGFueSwgYW55Pj4+KCkpLFxuICAgICAgICBpbmplY3QoVFVJX0FMRVJUUyksXG4gICAgXSkucGlwZShcbiAgICAgICAgbWFwKChbbWFwLCBhbGVydHNdKSA9PiB7XG4gICAgICAgICAgICBtYXAuZm9yRWFjaCgoXywga2V5KSA9PiBtYXAuc2V0KGtleSwgW10pKTtcblxuICAgICAgICAgICAgYWxlcnRzLmZvckVhY2goKGFsZXJ0KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gYWxlcnQuY29tcG9uZW50LmNvbXBvbmVudDtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IG1hcC5nZXQoa2V5KSB8fCBbXTtcblxuICAgICAgICAgICAgICAgIG1hcC5zZXQoa2V5LCBbLi4udmFsdWUsIGFsZXJ0XSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIEFycmF5LmZyb20obWFwLnZhbHVlcygpKTtcbiAgICAgICAgfSksXG4gICAgKSxcbik7XG4iXX0=