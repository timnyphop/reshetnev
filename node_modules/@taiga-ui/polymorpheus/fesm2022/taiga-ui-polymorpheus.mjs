import * as i0 from '@angular/core';
import { InjectionToken, inject, Injector, TemplateRef, ChangeDetectorRef, Directive, ViewContainerRef, INJECTOR, Input } from '@angular/core';

/**
 * Use this token to access context within your components when
 * instantiating them through {@link PolymorpheusOutlet}
 */
const POLYMORPHEUS_CONTEXT = new InjectionToken('');
function injectContext(options = {}) {
    return inject(POLYMORPHEUS_CONTEXT, options);
}

/**
 * Wrapper class for a component that will be used as content for {@link PolymorpheusOutlet}
 *
 * @param component — an Angular component to be dynamically created
 * @param injector — optional {@link Injector} for lazy loaded module case
 */
class PolymorpheusComponent {
    constructor(component, i) {
        this.component = component;
        this.i = i;
    }
    createInjector(injector, useValue) {
        return Injector.create({
            parent: this.i || injector,
            providers: [
                {
                    provide: POLYMORPHEUS_CONTEXT,
                    useValue,
                },
            ],
        });
    }
}

class PolymorpheusContext {
    constructor($implicit) {
        this.$implicit = $implicit;
    }
    get polymorpheusOutlet() {
        return this.$implicit;
    }
}
/**
 * @deprecated: use {@link PolymorpheusContext} instead
 * Primitive types used as content by {@link PolymorpheusOutlet}
 */
class PrimitiveContext extends PolymorpheusContext {
}

/**
 * ng-template wrapper directive also stores {@link ChangeDetectorRef} to properly handle change detection.
 */
class PolymorpheusTemplate {
    constructor(template = inject((TemplateRef), { self: true }), cdr = inject(ChangeDetectorRef)) {
        this.template = template;
        this.cdr = cdr;
        this.polymorpheus = '';
    }
    static ngTemplateContextGuard(_dir, _ctx) {
        return true;
    }
    check() {
        this.cdr.markForCheck();
    }
    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: PolymorpheusTemplate, deps: [{ token: i0.TemplateRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    /** @nocollapse */ static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: PolymorpheusTemplate, isStandalone: true, selector: "ng-template[polymorpheus]", inputs: { polymorpheus: "polymorpheus" }, exportAs: ["polymorpheus"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: PolymorpheusTemplate, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: 'ng-template[polymorpheus]',
                    inputs: ['polymorpheus'],
                    exportAs: 'polymorpheus',
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i0.ChangeDetectorRef }]; } });

class PolymorpheusOutlet {
    constructor() {
        this.vcr = inject(ViewContainerRef);
        this.i = inject(INJECTOR);
        this.t = inject(TemplateRef);
        this.content = '';
    }
    static ngTemplateContextGuard(_dir, _ctx) {
        return true;
    }
    ngOnChanges({ content }) {
        const context = this.getContext();
        this.c?.injector.get(ChangeDetectorRef).markForCheck();
        if (!content) {
            return;
        }
        this.vcr.clear();
        const proxy = context &&
            new Proxy(context, {
                get: (_, key) => this.getContext()?.[key],
            });
        if (isComponent(this.content)) {
            this.process(this.content, proxy);
        }
        else if (
        // eslint-disable-next-line eqeqeq
        (context instanceof PolymorpheusContext && context.$implicit) != null) {
            this.vcr.createEmbeddedView(this.template, proxy, { injector: this.i });
        }
    }
    ngDoCheck() {
        if (isDirective(this.content)) {
            this.content.check();
        }
    }
    get template() {
        if (isDirective(this.content)) {
            return this.content.template;
        }
        return this.content instanceof TemplateRef ? this.content : this.t;
    }
    getContext() {
        if (isTemplate(this.content) || isComponent(this.content)) {
            return this.context;
        }
        return new PolymorpheusContext(this.context && typeof this.content === 'function'
            ? this.content(this.context)
            : this.content);
    }
    process(content, proxy) {
        const injector = content.createInjector(this.i, proxy);
        this.c = this.vcr.createComponent(content.component, { injector });
    }
    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: PolymorpheusOutlet, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    /** @nocollapse */ static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: PolymorpheusOutlet, isStandalone: true, selector: "[polymorpheusOutlet]", inputs: { content: ["polymorpheusOutlet", "content"], context: ["polymorpheusOutletContext", "context"] }, usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: PolymorpheusOutlet, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[polymorpheusOutlet]',
                }]
        }], propDecorators: { content: [{
                type: Input,
                args: ['polymorpheusOutlet']
            }], context: [{
                type: Input,
                args: ['polymorpheusOutletContext']
            }] } });
function isDirective(content) {
    return content instanceof PolymorpheusTemplate;
}
function isComponent(content) {
    return content instanceof PolymorpheusComponent;
}
function isTemplate(content) {
    return isDirective(content) || content instanceof TemplateRef;
}

/**
 * Public API Surface of ng-polymorpheus
 */

/**
 * Generated bundle index. Do not edit.
 */

export { POLYMORPHEUS_CONTEXT, PolymorpheusComponent, PolymorpheusOutlet, PolymorpheusTemplate, injectContext };
//# sourceMappingURL=taiga-ui-polymorpheus.mjs.map
