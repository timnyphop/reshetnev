import { ChangeDetectorRef, Directive, inject, INJECTOR, Input, TemplateRef, ViewContainerRef, } from '@angular/core';
import { PolymorpheusComponent } from '../classes/component';
import { PolymorpheusContext } from '../classes/context';
import { PolymorpheusTemplate } from './template';
import * as i0 from "@angular/core";
class PolymorpheusOutlet {
    constructor() {
        this.vcr = inject(ViewContainerRef);
        this.i = inject(INJECTOR);
        this.t = inject(TemplateRef);
        this.content = '';
    }
    static ngTemplateContextGuard(_dir, _ctx) {
        return true;
    }
    ngOnChanges({ content }) {
        const context = this.getContext();
        this.c?.injector.get(ChangeDetectorRef).markForCheck();
        if (!content) {
            return;
        }
        this.vcr.clear();
        const proxy = context &&
            new Proxy(context, {
                get: (_, key) => this.getContext()?.[key],
            });
        if (isComponent(this.content)) {
            this.process(this.content, proxy);
        }
        else if (
        // eslint-disable-next-line eqeqeq
        (context instanceof PolymorpheusContext && context.$implicit) != null) {
            this.vcr.createEmbeddedView(this.template, proxy, { injector: this.i });
        }
    }
    ngDoCheck() {
        if (isDirective(this.content)) {
            this.content.check();
        }
    }
    get template() {
        if (isDirective(this.content)) {
            return this.content.template;
        }
        return this.content instanceof TemplateRef ? this.content : this.t;
    }
    getContext() {
        if (isTemplate(this.content) || isComponent(this.content)) {
            return this.context;
        }
        return new PolymorpheusContext(this.context && typeof this.content === 'function'
            ? this.content(this.context)
            : this.content);
    }
    process(content, proxy) {
        const injector = content.createInjector(this.i, proxy);
        this.c = this.vcr.createComponent(content.component, { injector });
    }
    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: PolymorpheusOutlet, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    /** @nocollapse */ static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: PolymorpheusOutlet, isStandalone: true, selector: "[polymorpheusOutlet]", inputs: { content: ["polymorpheusOutlet", "content"], context: ["polymorpheusOutletContext", "context"] }, usesOnChanges: true, ngImport: i0 }); }
}
export { PolymorpheusOutlet };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: PolymorpheusOutlet, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[polymorpheusOutlet]',
                }]
        }], propDecorators: { content: [{
                type: Input,
                args: ['polymorpheusOutlet']
            }], context: [{
                type: Input,
                args: ['polymorpheusOutletContext']
            }] } });
function isDirective(content) {
    return content instanceof PolymorpheusTemplate;
}
function isComponent(content) {
    return content instanceof PolymorpheusComponent;
}
function isTemplate(content) {
    return isDirective(content) || content instanceof TemplateRef;
}
//# sourceMappingURL=data:application/json;base64,